
Brana.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000019d0  00001a64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000582  0080020c  0080020c  00001a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000470  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006353  00000000  00000000  00001f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f1c  00000000  00000000  000082a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002928  00000000  00000000  0000b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a60  00000000  00000000  0000dae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e89  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002644  00000000  00000000  000103d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000458  00000000  00000000  00012a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	da c0       	rjmp	.+436    	; 0x1ea <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__vector_36>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 ed       	ldi	r30, 0xD0	; 208
     14c:	f9 e1       	ldi	r31, 0x19	; 25
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ac 30       	cpi	r26, 0x0C	; 12
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	27 e0       	ldi	r18, 0x07	; 7
     160:	ac e0       	ldi	r26, 0x0C	; 12
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ae 38       	cpi	r26, 0x8E	; 142
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	63 d1       	rcall	.+710    	; 0x436 <main>
     170:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     176:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	a8 95       	wdr
     17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     182:	88 61       	ori	r24, 0x18	; 24
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     18c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     18e:	e1 e6       	ldi	r30, 0x61	; 97
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	80 83       	st	Z, r24
  CLKPR = 0;
     196:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     198:	78 94       	sei

  HAL_TimerInit();
     19a:	01 c0       	rjmp	.+2      	; 0x19e <HAL_TimerInit>
     19c:	08 95       	ret

0000019e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     19e:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <halTimerIrqCount>
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	97 e2       	ldi	r25, 0x27	; 39
     1a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     1ae:	e1 ea       	ldi	r30, 0xA1	; 161
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	88 e0       	ldi	r24, 0x08	; 8
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
     1bc:	e2 e7       	ldi	r30, 0x72	; 114
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	80 83       	st	Z, r24
     1c6:	08 95       	ret

000001c8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
  halTimerIrqCount++;
     1d4:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <halTimerIrqCount>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 65 07 	sts	0x0765, r24	; 0x800765 <halTimerIrqCount>
}
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
  halSleepTimerEvent = true;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
}
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_37>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	8f 93       	push	r24
     218:	ef 93       	push	r30
     21a:	ff 93       	push	r31
  udrEmpty = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     222:	e9 ec       	ldi	r30, 0xC9	; 201
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8f 7d       	andi	r24, 0xDF	; 223
     22a:	80 83       	st	Z, r24
}
     22c:	ff 91       	pop	r31
     22e:	ef 91       	pop	r30
     230:	8f 91       	pop	r24
     232:	0f 90       	pop	r0
     234:	0b be       	out	0x3b, r0	; 59
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	0b b6       	in	r0, 0x3b	; 59
     24c:	0f 92       	push	r0
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     266:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  uint8_t byte = UDRx;
     26a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     26e:	8c 71       	andi	r24, 0x1C	; 28
     270:	59 f5       	brne	.+86     	; 0x2c8 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     272:	ef e0       	ldi	r30, 0x0F	; 15
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	46 81       	ldd	r20, Z+6	; 0x06
     278:	57 81       	ldd	r21, Z+7	; 0x07
     27a:	84 81       	ldd	r24, Z+4	; 0x04
     27c:	95 81       	ldd	r25, Z+5	; 0x05
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	11 f1       	breq	.+68     	; 0x2c8 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     284:	40 85       	ldd	r20, Z+8	; 0x08
     286:	51 85       	ldd	r21, Z+9	; 0x09
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	93 81       	ldd	r25, Z+3	; 0x03
     28c:	bc 01       	movw	r22, r24
     28e:	6f 5f       	subi	r22, 0xFF	; 255
     290:	7f 4f       	sbci	r23, 0xFF	; 255
     292:	73 83       	std	Z+3, r23	; 0x03
     294:	62 83       	std	Z+2, r22	; 0x02
     296:	da 01       	movw	r26, r20
     298:	a8 0f       	add	r26, r24
     29a:	b9 1f       	adc	r27, r25
     29c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     29e:	22 81       	ldd	r18, Z+2	; 0x02
     2a0:	33 81       	ldd	r19, Z+3	; 0x03
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	95 81       	ldd	r25, Z+5	; 0x05
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <__vector_36+0x74>
      rxFifo.tail = 0;
     2ac:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <rxFifo+0x3>
     2b0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <rxFifo+0x2>
    rxFifo.bytes++;
     2b4:	ef e0       	ldi	r30, 0x0F	; 15
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	86 81       	ldd	r24, Z+6	; 0x06
     2ba:	97 81       	ldd	r25, Z+7	; 0x07
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	97 83       	std	Z+7, r25	; 0x07
     2c0:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0b be       	out	0x3b, r0	; 59
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <send>:
 */ 

#include "communication.h"

void send(uint16_t adresa, uint8_t endpoint, uint8_t *data, uint8_t delka){
	appDataReq.dstAddr = adresa;
     2ee:	e9 e1       	ldi	r30, 0x19	; 25
     2f0:	f2 e0       	ldi	r31, 0x02	; 2
     2f2:	96 83       	std	Z+6, r25	; 0x06
     2f4:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = endpoint;
     2f6:	67 83       	std	Z+7, r22	; 0x07
	appDataReq.srcEndpoint = endpoint;
     2f8:	60 87       	std	Z+8, r22	; 0x08
	appDataReq.data = data;
     2fa:	53 87       	std	Z+11, r21	; 0x0b
     2fc:	42 87       	std	Z+10, r20	; 0x0a
	appDataReq.size = delka;
     2fe:	24 87       	std	Z+12, r18	; 0x0c
	NWK_DataReq(&appDataReq);
     300:	cf 01       	movw	r24, r30
     302:	f8 c0       	rjmp	.+496    	; 0x4f4 <NWK_DataReq>
     304:	08 95       	ret

00000306 <UART_SendChar>:
uint8_t UART_GetChar( void )
{
	while ( !(UCSR1A & (1<<RXC0)) )
	;
	return UDR1;
}
     306:	e8 ec       	ldi	r30, 0xC8	; 200
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	90 81       	ld	r25, Z
     30c:	95 ff       	sbrs	r25, 5
     30e:	fd cf       	rjmp	.-6      	; 0x30a <UART_SendChar+0x4>
     310:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     314:	08 95       	ret

00000316 <UART_Clc>:

void UART_Clc(){
	UART_SendChar(27);   // this is the escape
     316:	8b e1       	ldi	r24, 0x1B	; 27
     318:	f6 df       	rcall	.-20     	; 0x306 <UART_SendChar>
	UART_SendChar('[');
     31a:	8b e5       	ldi	r24, 0x5B	; 91
     31c:	f4 df       	rcall	.-24     	; 0x306 <UART_SendChar>
	UART_SendChar('2');
     31e:	82 e3       	ldi	r24, 0x32	; 50
     320:	f2 df       	rcall	.-28     	; 0x306 <UART_SendChar>
	UART_SendChar('J');  // uppercase J
     322:	8a e4       	ldi	r24, 0x4A	; 74
     324:	f0 cf       	rjmp	.-32     	; 0x306 <UART_SendChar>
     326:	08 95       	ret

00000328 <UART_SendString>:
void UART_HomePos(){
	UART_SendString("\033[H");
}

void UART_SendString(char *text)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
	while (*text != 0x00)
     32e:	88 81       	ld	r24, Y
     330:	88 23       	and	r24, r24
     332:	29 f0       	breq	.+10     	; 0x33e <UART_SendString+0x16>
     334:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(*text);
     336:	e7 df       	rcall	.-50     	; 0x306 <UART_SendChar>
	UART_SendString("\033[H");
}

void UART_SendString(char *text)
{
	while (*text != 0x00)
     338:	89 91       	ld	r24, Y+
     33a:	81 11       	cpse	r24, r1
     33c:	fc cf       	rjmp	.-8      	; 0x336 <UART_SendString+0xe>
	{
		UART_SendChar(*text);
		text++;
	}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <UART_HomePos>:
	UART_SendChar('2');
	UART_SendChar('J');  // uppercase J
}

void UART_HomePos(){
	UART_SendString("\033[H");
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	ef cf       	rjmp	.-34     	; 0x328 <UART_SendString>
     34a:	08 95       	ret

0000034c <UART_init>:
 */ 
#include "UART.h"
#include <string.h>
#include <avr/interrupt.h>

void UART_init(int Baudrate){
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	00 d0       	rcall	.+0      	; 0x35a <UART_init+0xe>
     35a:	1f 92       	push	r1
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
	volatile double test=((8000000/16)/Baudrate)-1;
     360:	9c 01       	movw	r18, r24
     362:	99 0f       	add	r25, r25
     364:	44 0b       	sbc	r20, r20
     366:	55 0b       	sbc	r21, r21
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	71 ea       	ldi	r23, 0xA1	; 161
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 4d 0c 	call	0x189a	; 0x189a <__divmodsi4>
     374:	69 01       	movw	r12, r18
     376:	7a 01       	movw	r14, r20
     378:	ca 01       	movw	r24, r20
     37a:	b9 01       	movw	r22, r18
     37c:	61 50       	subi	r22, 0x01	; 1
     37e:	71 09       	sbc	r23, r1
     380:	81 09       	sbc	r24, r1
     382:	91 09       	sbc	r25, r1
     384:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <__floatsisf>
     388:	69 83       	std	Y+1, r22	; 0x01
     38a:	7a 83       	std	Y+2, r23	; 0x02
     38c:	8b 83       	std	Y+3, r24	; 0x03
     38e:	9c 83       	std	Y+4, r25	; 0x04
	int ubrr=((F_CPU/16/Baudrate)-1);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	c8 1a       	sub	r12, r24
     394:	d1 08       	sbc	r13, r1
	UBRR1H = (uint8_t)(ubrr>>8);
     396:	d0 92 cd 00 	sts	0x00CD, r13	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = (uint8_t)ubrr;
     39a:	c0 92 cc 00 	sts	0x00CC, r12	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);// Povolit prijem/vydej
     39e:	e9 ec       	ldi	r30, 0xC9	; 201
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	88 e1       	ldi	r24, 0x18	; 24
     3a4:	80 83       	st	Z, r24
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);// Async, Parity-Disabled, 1 Stop bit, 8 data bits
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	UCSR1B |= (1 << RXCIE1); //Povoleni preruseni pri prijmu
     3ac:	80 81       	ld	r24, Z
     3ae:	80 68       	ori	r24, 0x80	; 128
     3b0:	80 83       	st	Z, r24
	UART_Clc();
     3b2:	b1 df       	rcall	.-158    	; 0x316 <UART_Clc>
	UART_HomePos();
     3b4:	c7 df       	rcall	.-114    	; 0x344 <UART_HomePos>
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	08 95       	ret

000003cc <funkceObsluhy>:

AppState_t appState = APP_STATE_INITIAL;

//obsluha prichozich ramcu
static bool funkceObsluhy (NWK_DataInd_t *ind)
{
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	8c 01       	movw	r16, r24
	for (int p = 0;p< ind->size;p++){
     3d6:	dc 01       	movw	r26, r24
     3d8:	19 96       	adiw	r26, 0x09	; 9
     3da:	8c 91       	ld	r24, X
     3dc:	88 23       	and	r24, r24
     3de:	99 f0       	breq	.+38     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3e0:	c0 e0       	ldi	r28, 0x00	; 0
     3e2:	d0 e0       	ldi	r29, 0x00	; 0
		UART_SendString(ind->data[p]);
     3e4:	d8 01       	movw	r26, r16
     3e6:	17 96       	adiw	r26, 0x07	; 7
     3e8:	ed 91       	ld	r30, X+
     3ea:	fc 91       	ld	r31, X
     3ec:	18 97       	sbiw	r26, 0x08	; 8
     3ee:	ec 0f       	add	r30, r28
     3f0:	fd 1f       	adc	r31, r29
     3f2:	80 81       	ld	r24, Z
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	98 df       	rcall	.-208    	; 0x328 <UART_SendString>
AppState_t appState = APP_STATE_INITIAL;

//obsluha prichozich ramcu
static bool funkceObsluhy (NWK_DataInd_t *ind)
{
	for (int p = 0;p< ind->size;p++){
     3f8:	21 96       	adiw	r28, 0x01	; 1
     3fa:	f8 01       	movw	r30, r16
     3fc:	21 85       	ldd	r18, Z+9	; 0x09
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	c2 17       	cp	r28, r18
     402:	d3 07       	cpc	r29, r19
     404:	7c f3       	brlt	.-34     	; 0x3e4 <funkceObsluhy+0x18>
		UART_SendString(ind->data[p]);
	}
	
	UART_init(9600);
     406:	80 e8       	ldi	r24, 0x80	; 128
     408:	95 e2       	ldi	r25, 0x25	; 37
     40a:	a0 df       	rcall	.-192    	; 0x34c <UART_init>
	UART_SendString("\r\n");
     40c:	88 e0       	ldi	r24, 0x08	; 8
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	8b df       	rcall	.-234    	; 0x328 <UART_SendString>
	return true;
}
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	1f 91       	pop	r17
     41a:	0f 91       	pop	r16
     41c:	08 95       	ret

0000041e <appInit>:

void appInit(){
	NWK_OpenEndpoint(APP_ENDPOINT, funkceObsluhy);
     41e:	66 ee       	ldi	r22, 0xE6	; 230
     420:	71 e0       	ldi	r23, 0x01	; 1
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	32 d0       	rcall	.+100    	; 0x48a <NWK_OpenEndpoint>
	send(0x01, 1, 3, 1);
     426:	21 e0       	ldi	r18, 0x01	; 1
     428:	43 e0       	ldi	r20, 0x03	; 3
     42a:	50 e0       	ldi	r21, 0x00	; 0
     42c:	61 e0       	ldi	r22, 0x01	; 1
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	5d cf       	rjmp	.-326    	; 0x2ee <send>
     434:	08 95       	ret

00000436 <main>:
	}
}

int main(void)
{	
	UART_init(9600);
     436:	80 e8       	ldi	r24, 0x80	; 128
     438:	95 e2       	ldi	r25, 0x25	; 37
     43a:	88 df       	rcall	.-240    	; 0x34c <UART_init>
	SYS_Init();
     43c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SYS_Init>
	{
		case APP_STATE_INITIAL:
		{
			appInit();
			UART_SendString(appDataReq.data);
			appState = APP_STATE_IDLE;
     440:	c1 e0       	ldi	r28, 0x01	; 1
{	
	UART_init(9600);
	SYS_Init();
	while (1)
	{
		SYS_TaskHandler();
     442:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SYS_TaskHandler>
	send(0x01, 1, 3, 1);
}

static void APP_TaskHandler(void)
{
	switch (appState)
     446:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <appState>
     44a:	81 11       	cpse	r24, r1
     44c:	fa cf       	rjmp	.-12     	; 0x442 <main+0xc>
	{
		case APP_STATE_INITIAL:
		{
			appInit();
     44e:	e7 df       	rcall	.-50     	; 0x41e <appInit>
			UART_SendString(appDataReq.data);
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	69 df       	rcall	.-302    	; 0x328 <UART_SendString>
			appState = APP_STATE_IDLE;
     456:	c0 93 2a 02 	sts	0x022A, r28	; 0x80022a <appState>
     45a:	f3 cf       	rjmp	.-26     	; 0x442 <main+0xc>

0000045c <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     45c:	e6 e6       	ldi	r30, 0x66	; 102
     45e:	f7 e0       	ldi	r31, 0x07	; 7
     460:	14 82       	std	Z+4, r1	; 0x04
     462:	15 82       	std	Z+5, r1	; 0x05
     464:	11 82       	std	Z+1, r1	; 0x01
     466:	10 82       	st	Z, r1
     468:	17 a2       	std	Z+39, r1	; 0x27
     46a:	16 a2       	std	Z+38, r1	; 0x26
     46c:	ec e6       	ldi	r30, 0x6C	; 108
     46e:	f7 e0       	ldi	r31, 0x07	; 7
     470:	8c e8       	ldi	r24, 0x8C	; 140
     472:	97 e0       	ldi	r25, 0x07	; 7
     474:	11 92       	st	Z+, r1
     476:	11 92       	st	Z+, r1
     478:	e8 17       	cp	r30, r24
     47a:	f9 07       	cpc	r31, r25
     47c:	d9 f7       	brne	.-10     	; 0x474 <NWK_Init+0x18>
     47e:	39 d6       	rcall	.+3186   	; 0x10f2 <nwkTxInit>
     480:	50 d3       	rcall	.+1696   	; 0xb22 <nwkRxInit>
     482:	ff d0       	rcall	.+510    	; 0x682 <nwkFrameInit>
     484:	32 d0       	rcall	.+100    	; 0x4ea <nwkDataReqInit>
     486:	7a c1       	rjmp	.+756    	; 0x77c <nwkRouteInit>
     488:	08 95       	ret

0000048a <NWK_OpenEndpoint>:
     48a:	e8 2f       	mov	r30, r24
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ee 0f       	add	r30, r30
     490:	ff 1f       	adc	r31, r31
     492:	e4 59       	subi	r30, 0x94	; 148
     494:	f8 4f       	sbci	r31, 0xF8	; 248
     496:	71 83       	std	Z+1, r23	; 0x01
     498:	60 83       	st	Z, r22
     49a:	08 95       	ret

0000049c <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     49c:	89 d3       	rcall	.+1810   	; 0xbb0 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     49e:	24 d7       	rcall	.+3656   	; 0x12e8 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     4a0:	4d c0       	rjmp	.+154    	; 0x53c <nwkDataReqTaskHandler>
     4a2:	08 95       	ret

000004a4 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     4a4:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <nwkDataReqQueue>
     4a8:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <nwkDataReqQueue+0x1>
     4ac:	30 97       	sbiw	r30, 0x00	; 0
     4ae:	d9 f0       	breq	.+54     	; 0x4e6 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     4b0:	22 81       	ldd	r18, Z+2	; 0x02
     4b2:	33 81       	ldd	r19, Z+3	; 0x03
     4b4:	28 17       	cp	r18, r24
     4b6:	39 07       	cpc	r19, r25
     4b8:	89 f4       	brne	.+34     	; 0x4dc <nwkDataReqTxConf+0x38>
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <nwkDataReqTxConf+0x22>
     4bc:	22 81       	ldd	r18, Z+2	; 0x02
     4be:	33 81       	ldd	r19, Z+3	; 0x03
     4c0:	28 17       	cp	r18, r24
     4c2:	39 07       	cpc	r19, r25
     4c4:	59 f4       	brne	.+22     	; 0x4dc <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     4c6:	dc 01       	movw	r26, r24
     4c8:	ad 57       	subi	r26, 0x7D	; 125
     4ca:	bf 4f       	sbci	r27, 0xFF	; 255
     4cc:	2c 91       	ld	r18, X
     4ce:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     4d0:	13 96       	adiw	r26, 0x03	; 3
     4d2:	2c 91       	ld	r18, X
     4d4:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     4d6:	22 e0       	ldi	r18, 0x02	; 2
     4d8:	24 83       	std	Z+4, r18	; 0x04
      break;
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     4dc:	01 90       	ld	r0, Z+
     4de:	f0 81       	ld	r31, Z
     4e0:	e0 2d       	mov	r30, r0
     4e2:	30 97       	sbiw	r30, 0x00	; 0
     4e4:	59 f7       	brne	.-42     	; 0x4bc <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     4e6:	0a c1       	rjmp	.+532    	; 0x6fc <nwkFrameFree>
     4e8:	08 95       	ret

000004ea <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     4ea:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <nwkDataReqQueue+0x1>
     4ee:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <nwkDataReqQueue>
     4f2:	08 95       	ret

000004f4 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     4f4:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     4f6:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     4f8:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     4fa:	13 82       	std	Z+3, r1	; 0x03
     4fc:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     4fe:	a6 e6       	ldi	r26, 0x66	; 102
     500:	b7 e0       	ldi	r27, 0x07	; 7
     502:	96 96       	adiw	r26, 0x26	; 38
     504:	8d 91       	ld	r24, X+
     506:	9c 91       	ld	r25, X
     508:	97 97       	sbiw	r26, 0x27	; 39
     50a:	01 96       	adiw	r24, 0x01	; 1
     50c:	97 96       	adiw	r26, 0x27	; 39
     50e:	9c 93       	st	X, r25
     510:	8e 93       	st	-X, r24
     512:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     514:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <nwkDataReqQueue>
     518:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <nwkDataReqQueue+0x1>
     51c:	00 97       	sbiw	r24, 0x00	; 0
     51e:	39 f4       	brne	.+14     	; 0x52e <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     520:	11 82       	std	Z+1, r1	; 0x01
     522:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     524:	f0 93 2c 02 	sts	0x022C, r31	; 0x80022c <nwkDataReqQueue+0x1>
     528:	e0 93 2b 02 	sts	0x022B, r30	; 0x80022b <nwkDataReqQueue>
     52c:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     52e:	91 83       	std	Z+1, r25	; 0x01
     530:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     532:	f0 93 2c 02 	sts	0x022C, r31	; 0x80022c <nwkDataReqQueue+0x1>
     536:	e0 93 2b 02 	sts	0x022B, r30	; 0x80022b <nwkDataReqQueue>
     53a:	08 95       	ret

0000053c <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     544:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <nwkDataReqQueue>
     548:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <nwkDataReqQueue+0x1>
     54c:	30 97       	sbiw	r30, 0x00	; 0
     54e:	09 f4       	brne	.+2      	; 0x552 <nwkDataReqTaskHandler+0x16>
     550:	93 c0       	rjmp	.+294    	; 0x678 <nwkDataReqTaskHandler+0x13c>
     552:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     554:	8c 81       	ldd	r24, Y+4	; 0x04
     556:	88 23       	and	r24, r24
     558:	21 f0       	breq	.+8      	; 0x562 <nwkDataReqTaskHandler+0x26>
     55a:	82 30       	cpi	r24, 0x02	; 2
     55c:	09 f4       	brne	.+2      	; 0x560 <nwkDataReqTaskHandler+0x24>
     55e:	66 c0       	rjmp	.+204    	; 0x62c <nwkDataReqTaskHandler+0xf0>
     560:	85 c0       	rjmp	.+266    	; 0x66c <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     562:	96 d0       	rcall	.+300    	; 0x690 <nwkFrameAlloc>
     564:	8c 01       	movw	r16, r24
     566:	00 97       	sbiw	r24, 0x00	; 0
     568:	21 f4       	brne	.+8      	; 0x572 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     56a:	82 e0       	ldi	r24, 0x02	; 2
     56c:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     56e:	8f 87       	std	Y+15, r24	; 0x0f
     570:	83 c0       	rjmp	.+262    	; 0x678 <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     572:	9b 83       	std	Y+3, r25	; 0x03
     574:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     57a:	f8 01       	movw	r30, r16
     57c:	e9 57       	subi	r30, 0x79	; 121
     57e:	ff 4f       	sbci	r31, 0xFF	; 255
     580:	82 e5       	ldi	r24, 0x52	; 82
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	91 83       	std	Z+1, r25	; 0x01
     586:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	89 85       	ldd	r24, Y+9	; 0x09
     58c:	82 fb       	bst	r24, 2
     58e:	88 27       	eor	r24, r24
     590:	80 f9       	bld	r24, 0
     592:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     594:	99 85       	ldd	r25, Y+9	; 0x09
     596:	d8 01       	movw	r26, r16
     598:	1b 96       	adiw	r26, 0x0b	; 11
     59a:	8c 91       	ld	r24, X
     59c:	1b 97       	sbiw	r26, 0x0b	; 11
     59e:	90 fb       	bst	r25, 0
     5a0:	80 f9       	bld	r24, 0
     5a2:	1b 96       	adiw	r26, 0x0b	; 11
     5a4:	8c 93       	st	X, r24
     5a6:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     5a8:	99 85       	ldd	r25, Y+9	; 0x09
     5aa:	93 fb       	bst	r25, 3
     5ac:	99 27       	eor	r25, r25
     5ae:	90 f9       	bld	r25, 0
     5b0:	90 fb       	bst	r25, 0
     5b2:	82 f9       	bld	r24, 2
     5b4:	1b 96       	adiw	r26, 0x0b	; 11
     5b6:	8c 93       	st	X, r24
     5b8:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     5ba:	e6 e6       	ldi	r30, 0x66	; 102
     5bc:	f7 e0       	ldi	r31, 0x07	; 7
     5be:	84 81       	ldd	r24, Z+4	; 0x04
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	84 83       	std	Z+4, r24	; 0x04
     5c4:	1c 96       	adiw	r26, 0x0c	; 12
     5c6:	8c 93       	st	X, r24
     5c8:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     5ca:	80 81       	ld	r24, Z
     5cc:	91 81       	ldd	r25, Z+1	; 0x01
     5ce:	1e 96       	adiw	r26, 0x0e	; 14
     5d0:	9c 93       	st	X, r25
     5d2:	8e 93       	st	-X, r24
     5d4:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     5d6:	8d 81       	ldd	r24, Y+5	; 0x05
     5d8:	9e 81       	ldd	r25, Y+6	; 0x06
     5da:	50 96       	adiw	r26, 0x10	; 16
     5dc:	9c 93       	st	X, r25
     5de:	8e 93       	st	-X, r24
     5e0:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     5e2:	88 85       	ldd	r24, Y+8	; 0x08
     5e4:	98 2f       	mov	r25, r24
     5e6:	9f 70       	andi	r25, 0x0F	; 15
     5e8:	51 96       	adiw	r26, 0x11	; 17
     5ea:	8c 91       	ld	r24, X
     5ec:	51 97       	sbiw	r26, 0x11	; 17
     5ee:	80 7f       	andi	r24, 0xF0	; 240
     5f0:	89 2b       	or	r24, r25
     5f2:	51 96       	adiw	r26, 0x11	; 17
     5f4:	8c 93       	st	X, r24
     5f6:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     5f8:	9f 81       	ldd	r25, Y+7	; 0x07
     5fa:	92 95       	swap	r25
     5fc:	90 7f       	andi	r25, 0xF0	; 240
     5fe:	8f 70       	andi	r24, 0x0F	; 15
     600:	89 2b       	or	r24, r25
     602:	51 96       	adiw	r26, 0x11	; 17
     604:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     606:	f8 01       	movw	r30, r16
     608:	ef 57       	subi	r30, 0x7F	; 127
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	4c 85       	ldd	r20, Y+12	; 0x0c
     60e:	50 e0       	ldi	r21, 0x00	; 0
     610:	6a 85       	ldd	r22, Y+10	; 0x0a
     612:	7b 85       	ldd	r23, Y+11	; 0x0b
     614:	80 81       	ld	r24, Z
     616:	91 81       	ldd	r25, Z+1	; 0x01
     618:	0e 94 be 0c 	call	0x197c	; 0x197c <memcpy>
  frame->size += req->size;
     61c:	f8 01       	movw	r30, r16
     61e:	91 81       	ldd	r25, Z+1	; 0x01
     620:	8c 85       	ldd	r24, Y+12	; 0x0c
     622:	89 0f       	add	r24, r25
     624:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     626:	c8 01       	movw	r24, r16
     628:	87 d5       	rcall	.+2830   	; 0x1138 <nwkTxFrame>
     62a:	26 c0       	rjmp	.+76     	; 0x678 <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     62c:	ce 17       	cp	r28, r30
     62e:	df 07       	cpc	r29, r31
     630:	41 f4       	brne	.+16     	; 0x642 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     632:	88 81       	ld	r24, Y
     634:	99 81       	ldd	r25, Y+1	; 0x01
     636:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <nwkDataReqQueue+0x1>
     63a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nwkDataReqQueue>
     63e:	0a c0       	rjmp	.+20     	; 0x654 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     640:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     642:	80 81       	ld	r24, Z
     644:	91 81       	ldd	r25, Z+1	; 0x01
     646:	c8 17       	cp	r28, r24
     648:	d9 07       	cpc	r29, r25
     64a:	d1 f7       	brne	.-12     	; 0x640 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     64c:	88 81       	ld	r24, Y
     64e:	99 81       	ldd	r25, Y+1	; 0x01
     650:	91 83       	std	Z+1, r25	; 0x01
     652:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     654:	e6 e6       	ldi	r30, 0x66	; 102
     656:	f7 e0       	ldi	r31, 0x07	; 7
     658:	86 a1       	ldd	r24, Z+38	; 0x26
     65a:	97 a1       	ldd	r25, Z+39	; 0x27
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	97 a3       	std	Z+39, r25	; 0x27
     660:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     662:	ed 85       	ldd	r30, Y+13	; 0x0d
     664:	fe 85       	ldd	r31, Y+14	; 0x0e
     666:	ce 01       	movw	r24, r28
     668:	19 95       	eicall
     66a:	06 c0       	rjmp	.+12     	; 0x678 <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     66c:	09 90       	ld	r0, Y+
     66e:	d8 81       	ld	r29, Y
     670:	c0 2d       	mov	r28, r0
     672:	20 97       	sbiw	r28, 0x00	; 0
     674:	09 f0       	breq	.+2      	; 0x678 <nwkDataReqTaskHandler+0x13c>
     676:	6e cf       	rjmp	.-292    	; 0x554 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	0f 91       	pop	r16
     680:	08 95       	ret

00000682 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     682:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <nwkFrameFrames>
     686:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <nwkFrameFrames+0x89>
     68a:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <nwkFrameFrames+0x112>
     68e:	08 95       	ret

00000690 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     690:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <nwkFrameFrames>
     694:	88 23       	and	r24, r24
     696:	71 f0       	breq	.+28     	; 0x6b4 <nwkFrameAlloc+0x24>
     698:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <nwkFrameFrames+0x89>
     69c:	88 23       	and	r24, r24
     69e:	39 f0       	breq	.+14     	; 0x6ae <nwkFrameAlloc+0x1e>
     6a0:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <nwkFrameFrames+0x112>
     6a4:	81 11       	cpse	r24, r1
     6a6:	27 c0       	rjmp	.+78     	; 0x6f6 <nwkFrameAlloc+0x66>
     6a8:	82 e0       	ldi	r24, 0x02	; 2
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <nwkFrameAlloc+0x28>
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <nwkFrameAlloc+0x28>
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     6b8:	49 e8       	ldi	r20, 0x89	; 137
     6ba:	48 9f       	mul	r20, r24
     6bc:	90 01       	movw	r18, r0
     6be:	49 9f       	mul	r20, r25
     6c0:	30 0d       	add	r19, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	c9 01       	movw	r24, r18
     6c6:	83 5d       	subi	r24, 0xD3	; 211
     6c8:	9d 4f       	sbci	r25, 0xFD	; 253
     6ca:	fc 01       	movw	r30, r24
     6cc:	11 92       	st	Z+, r1
     6ce:	4a 95       	dec	r20
     6d0:	e9 f7       	brne	.-6      	; 0x6cc <nwkFrameAlloc+0x3c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     6d2:	40 e1       	ldi	r20, 0x10	; 16
     6d4:	fc 01       	movw	r30, r24
     6d6:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     6d8:	ef 57       	subi	r30, 0x7F	; 127
     6da:	ff 4f       	sbci	r31, 0xFF	; 255
     6dc:	21 5c       	subi	r18, 0xC1	; 193
     6de:	3d 4f       	sbci	r19, 0xFD	; 253
     6e0:	31 83       	std	Z+1, r19	; 0x01
     6e2:	20 83       	st	Z, r18
      nwkIb.lock++;
     6e4:	e6 e6       	ldi	r30, 0x66	; 102
     6e6:	f7 e0       	ldi	r31, 0x07	; 7
     6e8:	26 a1       	ldd	r18, Z+38	; 0x26
     6ea:	37 a1       	ldd	r19, Z+39	; 0x27
     6ec:	2f 5f       	subi	r18, 0xFF	; 255
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	37 a3       	std	Z+39, r19	; 0x27
     6f2:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     6f4:	08 95       	ret
    }
  }
  return NULL;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
}
     6fa:	08 95       	ret

000006fc <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     6fc:	fc 01       	movw	r30, r24
     6fe:	10 82       	st	Z, r1
  nwkIb.lock--;
     700:	e6 e6       	ldi	r30, 0x66	; 102
     702:	f7 e0       	ldi	r31, 0x07	; 7
     704:	86 a1       	ldd	r24, Z+38	; 0x26
     706:	97 a1       	ldd	r25, Z+39	; 0x27
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	97 a3       	std	Z+39, r25	; 0x27
     70c:	86 a3       	std	Z+38, r24	; 0x26
     70e:	08 95       	ret

00000710 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     710:	00 97       	sbiw	r24, 0x00	; 0
     712:	41 f0       	breq	.+16     	; 0x724 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     714:	fc 01       	movw	r30, r24
     716:	e7 57       	subi	r30, 0x77	; 119
     718:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     71a:	83 e0       	ldi	r24, 0x03	; 3
     71c:	e8 3c       	cpi	r30, 0xC8	; 200
     71e:	f8 07       	cpc	r31, r24
     720:	18 f0       	brcs	.+6      	; 0x728 <nwkFrameNext+0x18>
     722:	15 c0       	rjmp	.+42     	; 0x74e <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     724:	ed e2       	ldi	r30, 0x2D	; 45
     726:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     728:	80 81       	ld	r24, Z
     72a:	88 23       	and	r24, r24
     72c:	39 f0       	breq	.+14     	; 0x73c <nwkFrameNext+0x2c>
     72e:	03 c0       	rjmp	.+6      	; 0x736 <nwkFrameNext+0x26>
     730:	80 81       	ld	r24, Z
     732:	88 23       	and	r24, r24
     734:	19 f0       	breq	.+6      	; 0x73c <nwkFrameNext+0x2c>
      return frame;
     736:	8e 2f       	mov	r24, r30
     738:	9f 2f       	mov	r25, r31
     73a:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     73c:	e7 57       	subi	r30, 0x77	; 119
     73e:	ff 4f       	sbci	r31, 0xFF	; 255
     740:	83 e0       	ldi	r24, 0x03	; 3
     742:	e8 3c       	cpi	r30, 0xC8	; 200
     744:	f8 07       	cpc	r31, r24
     746:	a0 f3       	brcs	.-24     	; 0x730 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	08 95       	ret
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
}
     752:	08 95       	ret

00000754 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     754:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     756:	dc 01       	movw	r26, r24
     758:	ad 57       	subi	r26, 0x7D	; 125
     75a:	bf 4f       	sbci	r27, 0xFF	; 255
     75c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     75e:	a6 e6       	ldi	r26, 0x66	; 102
     760:	b7 e0       	ldi	r27, 0x07	; 7
     762:	14 96       	adiw	r26, 0x04	; 4
     764:	9c 91       	ld	r25, X
     766:	14 97       	sbiw	r26, 0x04	; 4
     768:	9f 5f       	subi	r25, 0xFF	; 255
     76a:	14 96       	adiw	r26, 0x04	; 4
     76c:	9c 93       	st	X, r25
     76e:	14 97       	sbiw	r26, 0x04	; 4
     770:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     772:	8d 91       	ld	r24, X+
     774:	9c 91       	ld	r25, X
     776:	96 87       	std	Z+14, r25	; 0x0e
     778:	85 87       	std	Z+13, r24	; 0x0d
     77a:	08 95       	ret

0000077c <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     77c:	ad ec       	ldi	r26, 0xCD	; 205
     77e:	b3 e0       	ldi	r27, 0x03	; 3
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	4f ef       	ldi	r20, 0xFF	; 255
     786:	5f ef       	ldi	r21, 0xFF	; 255
     788:	fd 01       	movw	r30, r26
     78a:	34 97       	sbiw	r30, 0x04	; 4
     78c:	51 83       	std	Z+1, r21	; 0x01
     78e:	40 83       	st	Z, r20
     790:	fc 01       	movw	r30, r24
     792:	ee 0f       	add	r30, r30
     794:	ff 1f       	adc	r31, r31
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	ee 0f       	add	r30, r30
     79c:	ff 1f       	adc	r31, r31
     79e:	e8 1b       	sub	r30, r24
     7a0:	f9 0b       	sbc	r31, r25
     7a2:	e8 53       	subi	r30, 0x38	; 56
     7a4:	fc 4f       	sbci	r31, 0xFC	; 252
     7a6:	20 81       	ld	r18, Z
     7a8:	2e 7f       	andi	r18, 0xFE	; 254
     7aa:	20 83       	st	Z, r18
     7ac:	1c 92       	st	X, r1
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	17 96       	adiw	r26, 0x07	; 7
     7b2:	84 36       	cpi	r24, 0x64	; 100
     7b4:	91 05       	cpc	r25, r1
     7b6:	41 f7       	brne	.-48     	; 0x788 <nwkRouteInit+0xc>
     7b8:	08 95       	ret

000007ba <NWK_RouteFindEntry>:
     7ba:	0f 93       	push	r16
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	e9 ec       	ldi	r30, 0xC9	; 201
     7c4:	f3 e0       	ldi	r31, 0x03	; 3
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	06 2f       	mov	r16, r22
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	40 81       	ld	r20, Z
     7d0:	51 81       	ldd	r21, Z+1	; 0x01
     7d2:	48 17       	cp	r20, r24
     7d4:	59 07       	cpc	r21, r25
     7d6:	b1 f4       	brne	.+44     	; 0x804 <NWK_RouteFindEntry+0x4a>
     7d8:	d9 01       	movw	r26, r18
     7da:	aa 0f       	add	r26, r26
     7dc:	bb 1f       	adc	r27, r27
     7de:	aa 0f       	add	r26, r26
     7e0:	bb 1f       	adc	r27, r27
     7e2:	aa 0f       	add	r26, r26
     7e4:	bb 1f       	adc	r27, r27
     7e6:	a2 1b       	sub	r26, r18
     7e8:	b3 0b       	sbc	r27, r19
     7ea:	a8 53       	subi	r26, 0x38	; 56
     7ec:	bc 4f       	sbci	r27, 0xFC	; 252
     7ee:	4c 91       	ld	r20, X
     7f0:	46 95       	lsr	r20
     7f2:	41 70       	andi	r20, 0x01	; 1
     7f4:	c4 2f       	mov	r28, r20
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	d4 2f       	mov	r29, r20
     7fa:	c0 17       	cp	r28, r16
     7fc:	d1 07       	cpc	r29, r17
     7fe:	11 f4       	brne	.+4      	; 0x804 <NWK_RouteFindEntry+0x4a>
     800:	cd 01       	movw	r24, r26
     802:	08 c0       	rjmp	.+16     	; 0x814 <NWK_RouteFindEntry+0x5a>
     804:	2f 5f       	subi	r18, 0xFF	; 255
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	37 96       	adiw	r30, 0x07	; 7
     80a:	24 36       	cpi	r18, 0x64	; 100
     80c:	31 05       	cpc	r19, r1
     80e:	f9 f6       	brne	.-66     	; 0x7ce <NWK_RouteFindEntry+0x14>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	08 95       	ret

0000081e <NWK_RouteNewEntry>:
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ed ec       	ldi	r30, 0xCD	; 205
     824:	f3 e0       	ldi	r31, 0x03	; 3
     826:	29 e8       	ldi	r18, 0x89	; 137
     828:	36 e0       	ldi	r19, 0x06	; 6
     82a:	c0 e0       	ldi	r28, 0x00	; 0
     82c:	d0 e0       	ldi	r29, 0x00	; 0
     82e:	df 01       	movw	r26, r30
     830:	15 97       	sbiw	r26, 0x05	; 5
     832:	8c 91       	ld	r24, X
     834:	80 fd       	sbrc	r24, 0
     836:	0b c0       	rjmp	.+22     	; 0x84e <NWK_RouteNewEntry+0x30>
     838:	80 81       	ld	r24, Z
     83a:	88 23       	and	r24, r24
     83c:	69 f0       	breq	.+26     	; 0x858 <NWK_RouteNewEntry+0x3a>
     83e:	20 97       	sbiw	r28, 0x00	; 0
     840:	29 f0       	breq	.+10     	; 0x84c <NWK_RouteNewEntry+0x2e>
     842:	9d 81       	ldd	r25, Y+5	; 0x05
     844:	89 17       	cp	r24, r25
     846:	18 f4       	brcc	.+6      	; 0x84e <NWK_RouteNewEntry+0x30>
     848:	ed 01       	movw	r28, r26
     84a:	01 c0       	rjmp	.+2      	; 0x84e <NWK_RouteNewEntry+0x30>
     84c:	ed 01       	movw	r28, r26
     84e:	37 96       	adiw	r30, 0x07	; 7
     850:	e2 17       	cp	r30, r18
     852:	f3 07       	cpc	r31, r19
     854:	61 f7       	brne	.-40     	; 0x82e <NWK_RouteNewEntry+0x10>
     856:	de 01       	movw	r26, r28
     858:	8c 91       	ld	r24, X
     85a:	8d 70       	andi	r24, 0x0D	; 13
     85c:	80 63       	ori	r24, 0x30	; 48
     85e:	8c 93       	st	X, r24
     860:	80 e8       	ldi	r24, 0x80	; 128
     862:	15 96       	adiw	r26, 0x05	; 5
     864:	8c 93       	st	X, r24
     866:	15 97       	sbiw	r26, 0x05	; 5
     868:	cd 01       	movw	r24, r26
     86a:	df 91       	pop	r29
     86c:	cf 91       	pop	r28
     86e:	08 95       	ret

00000870 <NWK_RouteFreeEntry>:
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	80 fd       	sbrc	r24, 0
     876:	05 c0       	rjmp	.+10     	; 0x882 <NWK_RouteFreeEntry+0x12>
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	92 83       	std	Z+2, r25	; 0x02
     87e:	81 83       	std	Z+1, r24	; 0x01
     880:	15 82       	std	Z+5, r1	; 0x05
     882:	08 95       	ret

00000884 <NWK_RouteNextHop>:
     884:	9a df       	rcall	.-204    	; 0x7ba <NWK_RouteFindEntry>
     886:	00 97       	sbiw	r24, 0x00	; 0
     888:	21 f0       	breq	.+8      	; 0x892 <NWK_RouteNextHop+0xe>
     88a:	fc 01       	movw	r30, r24
     88c:	83 81       	ldd	r24, Z+3	; 0x03
     88e:	94 81       	ldd	r25, Z+4	; 0x04
     890:	08 95       	ret
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	9f ef       	ldi	r25, 0xFF	; 255
     896:	08 95       	ret

00000898 <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     898:	90 df       	rcall	.-224    	; 0x7ba <NWK_RouteFindEntry>
  if (entry)
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	09 f0       	breq	.+2      	; 0x8a0 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
     89e:	e8 cf       	rjmp	.-48     	; 0x870 <NWK_RouteFreeEntry>
     8a0:	08 95       	ret

000008a2 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     8ac:	01 85       	ldd	r16, Z+9	; 0x09
     8ae:	12 85       	ldd	r17, Z+10	; 0x0a
     8b0:	11 23       	and	r17, r17
     8b2:	2c f4       	brge	.+10     	; 0x8be <nwkRouteFrameReceived+0x1c>
     8b4:	85 85       	ldd	r24, Z+13	; 0x0d
     8b6:	96 85       	ldd	r25, Z+14	; 0x0e
     8b8:	08 17       	cp	r16, r24
     8ba:	19 07       	cpc	r17, r25
     8bc:	e1 f5       	brne	.+120    	; 0x936 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     8be:	85 81       	ldd	r24, Z+5	; 0x05
     8c0:	96 81       	ldd	r25, Z+6	; 0x06
     8c2:	01 96       	adiw	r24, 0x01	; 1
     8c4:	c1 f1       	breq	.+112    	; 0x936 <nwkRouteFrameReceived+0x94>
     8c6:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	85 85       	ldd	r24, Z+13	; 0x0d
     8cc:	96 85       	ldd	r25, Z+14	; 0x0e
     8ce:	75 df       	rcall	.-278    	; 0x7ba <NWK_RouteFindEntry>
     8d0:	fc 01       	movw	r30, r24

  if (entry)
     8d2:	89 2b       	or	r24, r25
     8d4:	a1 f0       	breq	.+40     	; 0x8fe <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     8d6:	8f 81       	ldd	r24, Y+7	; 0x07
     8d8:	98 85       	ldd	r25, Y+8	; 0x08
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	f9 f4       	brne	.+62     	; 0x91c <nwkRouteFrameReceived+0x7a>
     8de:	20 91 66 07 	lds	r18, 0x0766	; 0x800766 <nwkIb>
     8e2:	30 91 67 07 	lds	r19, 0x0767	; 0x800767 <nwkIb+0x1>
     8e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8e8:	98 89       	ldd	r25, Y+16	; 0x10
     8ea:	28 17       	cp	r18, r24
     8ec:	39 07       	cpc	r19, r25
     8ee:	b1 f4       	brne	.+44     	; 0x91c <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     8f0:	14 83       	std	Z+4, r17	; 0x04
     8f2:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     8f4:	80 81       	ld	r24, Z
     8f6:	8f 70       	andi	r24, 0x0F	; 15
     8f8:	80 63       	ori	r24, 0x30	; 48
     8fa:	80 83       	st	Z, r24
     8fc:	0a c0       	rjmp	.+20     	; 0x912 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     8fe:	8f df       	rcall	.-226    	; 0x81e <NWK_RouteNewEntry>
     900:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     902:	8d 85       	ldd	r24, Y+13	; 0x0d
     904:	9e 85       	ldd	r25, Y+14	; 0x0e
     906:	92 83       	std	Z+2, r25	; 0x02
     908:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     90a:	89 85       	ldd	r24, Y+9	; 0x09
     90c:	9a 85       	ldd	r25, Y+10	; 0x0a
     90e:	94 83       	std	Z+4, r25	; 0x04
     910:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     912:	cd 57       	subi	r28, 0x7D	; 125
     914:	df 4f       	sbci	r29, 0xFF	; 255
     916:	88 81       	ld	r24, Y
     918:	86 83       	std	Z+6, r24	; 0x06
     91a:	0d c0       	rjmp	.+26     	; 0x936 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     91c:	83 81       	ldd	r24, Z+3	; 0x03
     91e:	94 81       	ldd	r25, Z+4	; 0x04
     920:	08 17       	cp	r16, r24
     922:	19 07       	cpc	r17, r25
     924:	b1 f3       	breq	.-20     	; 0x912 <nwkRouteFrameReceived+0x70>
     926:	de 01       	movw	r26, r28
     928:	ad 57       	subi	r26, 0x7D	; 125
     92a:	bf 4f       	sbci	r27, 0xFF	; 255
     92c:	9c 91       	ld	r25, X
     92e:	86 81       	ldd	r24, Z+6	; 0x06
     930:	89 17       	cp	r24, r25
     932:	f0 f2       	brcs	.-68     	; 0x8f0 <nwkRouteFrameReceived+0x4e>
     934:	ee cf       	rjmp	.-36     	; 0x912 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	1f 91       	pop	r17
     93c:	0f 91       	pop	r16
     93e:	08 95       	ret

00000940 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
     944:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     946:	87 85       	ldd	r24, Z+15	; 0x0f
     948:	90 89       	ldd	r25, Z+16	; 0x10
     94a:	8f 3f       	cpi	r24, 0xFF	; 255
     94c:	2f ef       	ldi	r18, 0xFF	; 255
     94e:	92 07       	cpc	r25, r18
     950:	d9 f1       	breq	.+118    	; 0x9c8 <nwkRouteFrameSent+0x88>
     952:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     954:	63 85       	ldd	r22, Z+11	; 0x0b
     956:	63 fb       	bst	r22, 3
     958:	66 27       	eor	r22, r22
     95a:	60 f9       	bld	r22, 0
     95c:	2e df       	rcall	.-420    	; 0x7ba <NWK_RouteFindEntry>
     95e:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     960:	89 2b       	or	r24, r25
     962:	91 f1       	breq	.+100    	; 0x9c8 <nwkRouteFrameSent+0x88>
     964:	8c 91       	ld	r24, X
     966:	80 fd       	sbrc	r24, 0
     968:	2f c0       	rjmp	.+94     	; 0x9c8 <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     96a:	fe 01       	movw	r30, r28
     96c:	ed 57       	subi	r30, 0x7D	; 125
     96e:	ff 4f       	sbci	r31, 0xFF	; 255
     970:	80 81       	ld	r24, Z
     972:	81 11       	cpse	r24, r1
     974:	19 c0       	rjmp	.+50     	; 0x9a8 <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     976:	8c 91       	ld	r24, X
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	80 63       	ori	r24, 0x30	; 48
     97c:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     97e:	15 96       	adiw	r26, 0x05	; 5
     980:	8c 91       	ld	r24, X
     982:	15 97       	sbiw	r26, 0x05	; 5
     984:	8f 5f       	subi	r24, 0xFF	; 255
     986:	15 96       	adiw	r26, 0x05	; 5
     988:	8c 93       	st	X, r24
     98a:	8f 3f       	cpi	r24, 0xFF	; 255
     98c:	e9 f4       	brne	.+58     	; 0x9c8 <nwkRouteFrameSent+0x88>
     98e:	ed ec       	ldi	r30, 0xCD	; 205
     990:	f3 e0       	ldi	r31, 0x03	; 3
     992:	29 e8       	ldi	r18, 0x89	; 137
     994:	36 e0       	ldi	r19, 0x06	; 6
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     996:	80 81       	ld	r24, Z
     998:	86 95       	lsr	r24
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 83       	st	Z, r24
     99e:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     9a0:	e2 17       	cp	r30, r18
     9a2:	f3 07       	cpc	r31, r19
     9a4:	c1 f7       	brne	.-16     	; 0x996 <nwkRouteFrameSent+0x56>
     9a6:	10 c0       	rjmp	.+32     	; 0x9c8 <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     9a8:	9c 91       	ld	r25, X
     9aa:	89 2f       	mov	r24, r25
     9ac:	82 95       	swap	r24
     9ae:	8f 70       	andi	r24, 0x0F	; 15
     9b0:	81 5f       	subi	r24, 0xF1	; 241
     9b2:	8f 70       	andi	r24, 0x0F	; 15
     9b4:	28 2f       	mov	r18, r24
     9b6:	22 95       	swap	r18
     9b8:	20 7f       	andi	r18, 0xF0	; 240
     9ba:	9f 70       	andi	r25, 0x0F	; 15
     9bc:	92 2b       	or	r25, r18
     9be:	9c 93       	st	X, r25
     9c0:	81 11       	cpse	r24, r1
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     9c4:	cd 01       	movw	r24, r26
     9c6:	54 df       	rcall	.-344    	; 0x870 <NWK_RouteFreeEntry>
  }
}
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     9d4:	87 85       	ldd	r24, Z+15	; 0x0f
     9d6:	90 89       	ldd	r25, Z+16	; 0x10
     9d8:	8f 3f       	cpi	r24, 0xFF	; 255
     9da:	2f ef       	ldi	r18, 0xFF	; 255
     9dc:	92 07       	cpc	r25, r18
     9de:	29 f4       	brne	.+10     	; 0x9ea <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	9f ef       	ldi	r25, 0xFF	; 255
     9e4:	90 87       	std	Z+8, r25	; 0x08
     9e6:	87 83       	std	Z+7, r24	; 0x07
     9e8:	0e c0       	rjmp	.+28     	; 0xa06 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     9ea:	23 85       	ldd	r18, Z+11	; 0x0b
     9ec:	22 ff       	sbrs	r18, 2
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     9f0:	90 87       	std	Z+8, r25	; 0x08
     9f2:	87 83       	std	Z+7, r24	; 0x07
     9f4:	08 c0       	rjmp	.+16     	; 0xa06 <nwkRoutePrepareTx+0x38>
     9f6:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     9f8:	63 85       	ldd	r22, Z+11	; 0x0b
     9fa:	63 fb       	bst	r22, 3
     9fc:	66 27       	eor	r22, r22
     9fe:	60 f9       	bld	r22, 0
     a00:	41 df       	rcall	.-382    	; 0x884 <NWK_RouteNextHop>
     a02:	98 87       	std	Y+8, r25	; 0x08
     a04:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     a0c:	af 92       	push	r10
     a0e:	bf 92       	push	r11
     a10:	cf 92       	push	r12
     a12:	df 92       	push	r13
     a14:	ef 92       	push	r14
     a16:	ff 92       	push	r15
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     a20:	1b 85       	ldd	r17, Y+11	; 0x0b
     a22:	13 fb       	bst	r17, 3
     a24:	11 27       	eor	r17, r17
     a26:	10 f9       	bld	r17, 0
     a28:	cf 84       	ldd	r12, Y+15	; 0x0f
     a2a:	d8 88       	ldd	r13, Y+16	; 0x10
     a2c:	61 2f       	mov	r22, r17
     a2e:	c6 01       	movw	r24, r12
     a30:	29 df       	rcall	.-430    	; 0x884 <NWK_RouteNextHop>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	59 f0       	breq	.+22     	; 0xa4c <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     a36:	fe 01       	movw	r30, r28
     a38:	e9 57       	subi	r30, 0x79	; 121
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	11 82       	std	Z+1, r1	; 0x01
     a3e:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     a40:	31 97       	sbiw	r30, 0x01	; 1
     a42:	82 e0       	ldi	r24, 0x02	; 2
     a44:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     a46:	ce 01       	movw	r24, r28
     a48:	77 d3       	rcall	.+1774   	; 0x1138 <nwkTxFrame>
     a4a:	22 c0       	rjmp	.+68     	; 0xa90 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     a4c:	ad 84       	ldd	r10, Y+13	; 0x0d
     a4e:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     a50:	1f de       	rcall	.-962    	; 0x690 <nwkFrameAlloc>
     a52:	7c 01       	movw	r14, r24
     a54:	00 97       	sbiw	r24, 0x00	; 0
     a56:	d1 f0       	breq	.+52     	; 0xa8c <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     a58:	7d de       	rcall	.-774    	; 0x754 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     a5a:	f7 01       	movw	r30, r14
     a5c:	81 81       	ldd	r24, Z+1	; 0x01
     a5e:	8a 5f       	subi	r24, 0xFA	; 250
     a60:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     a62:	e9 57       	subi	r30, 0x79	; 121
     a64:	ff 4f       	sbci	r31, 0xFF	; 255
     a66:	11 82       	std	Z+1, r1	; 0x01
     a68:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     a6a:	f7 01       	movw	r30, r14
     a6c:	b0 8a       	std	Z+16, r11	; 0x10
     a6e:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     a70:	ef 57       	subi	r30, 0x7F	; 127
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	01 90       	ld	r0, Z+
     a76:	f0 81       	ld	r31, Z
     a78:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	80 83       	st	Z, r24
  command->srcAddr = src;
     a7e:	b2 82       	std	Z+2, r11	; 0x02
     a80:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     a82:	d4 82       	std	Z+4, r13	; 0x04
     a84:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
     a86:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
     a88:	c7 01       	movw	r24, r14
     a8a:	56 d3       	rcall	.+1708   	; 0x1138 <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     a8c:	ce 01       	movw	r24, r28
     a8e:	36 de       	rcall	.-916    	; 0x6fc <nwkFrameFree>
  }
}
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	1f 91       	pop	r17
     a96:	ff 90       	pop	r15
     a98:	ef 90       	pop	r14
     a9a:	df 90       	pop	r13
     a9c:	cf 90       	pop	r12
     a9e:	bf 90       	pop	r11
     aa0:	af 90       	pop	r10
     aa2:	08 95       	ret

00000aa4 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     aa4:	dc 01       	movw	r26, r24
     aa6:	17 96       	adiw	r26, 0x07	; 7
     aa8:	ed 91       	ld	r30, X+
     aaa:	fc 91       	ld	r31, X
     aac:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     aae:	19 96       	adiw	r26, 0x09	; 9
     ab0:	8c 91       	ld	r24, X
     ab2:	86 30       	cpi	r24, 0x06	; 6
     ab4:	31 f4       	brne	.+12     	; 0xac2 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     ab6:	65 81       	ldd	r22, Z+5	; 0x05
     ab8:	83 81       	ldd	r24, Z+3	; 0x03
     aba:	94 81       	ldd	r25, Z+4	; 0x04
     abc:	ed de       	rcall	.-550    	; 0x898 <nwkRouteRemove>

  return true;
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     ac2:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     ac4:	08 95       	ret

00000ac6 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     ac6:	dc 01       	movw	r26, r24
     ac8:	19 96       	adiw	r26, 0x09	; 9
     aca:	2c 91       	ld	r18, X
     acc:	19 97       	sbiw	r26, 0x09	; 9
     ace:	22 23       	and	r18, r18
     ad0:	71 f0       	breq	.+28     	; 0xaee <nwkRxServiceDataInd+0x28>
     ad2:	17 96       	adiw	r26, 0x07	; 7
     ad4:	ed 91       	ld	r30, X+
     ad6:	fc 91       	ld	r31, X
     ad8:	18 97       	sbiw	r26, 0x08	; 8
     ada:	20 81       	ld	r18, Z
     adc:	22 23       	and	r18, r18
     ade:	19 f0       	breq	.+6      	; 0xae6 <nwkRxServiceDataInd+0x20>
     ae0:	21 30       	cpi	r18, 0x01	; 1
     ae2:	19 f0       	breq	.+6      	; 0xaea <nwkRxServiceDataInd+0x24>
     ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <nwkRxServiceDataInd+0x2c>
     ae6:	b9 c3       	rjmp	.+1906   	; 0x125a <nwkTxAckReceived>
     ae8:	08 95       	ret
     aea:	dc cf       	rjmp	.-72     	; 0xaa4 <nwkRouteErrorReceived>
     aec:	08 95       	ret
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	08 95       	ret
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	08 95       	ret

00000af6 <nwkRxDuplicateRejectionTimerHandler>:
     af6:	bc 01       	movw	r22, r24
     af8:	e6 e9       	ldi	r30, 0x96	; 150
     afa:	f6 e0       	ldi	r31, 0x06	; 6
     afc:	28 ec       	ldi	r18, 0xC8	; 200
     afe:	36 e0       	ldi	r19, 0x06	; 6
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	51 e0       	ldi	r21, 0x01	; 1
     b04:	90 81       	ld	r25, Z
     b06:	99 23       	and	r25, r25
     b08:	19 f0       	breq	.+6      	; 0xb10 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     b0a:	91 50       	subi	r25, 0x01	; 1
     b0c:	90 83       	st	Z, r25
     b0e:	45 2f       	mov	r20, r21
     b10:	35 96       	adiw	r30, 0x05	; 5
     b12:	e2 17       	cp	r30, r18
     b14:	f3 07       	cpc	r31, r19
     b16:	b1 f7       	brne	.-20     	; 0xb04 <nwkRxDuplicateRejectionTimerHandler+0xe>
     b18:	44 23       	and	r20, r20
     b1a:	11 f0       	breq	.+4      	; 0xb20 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     b1c:	cb 01       	movw	r24, r22
     b1e:	e8 c5       	rjmp	.+3024   	; 0x16f0 <SYS_TimerStart>
     b20:	08 95       	ret

00000b22 <nwkRxInit>:
     b22:	e6 e9       	ldi	r30, 0x96	; 150
     b24:	f6 e0       	ldi	r31, 0x06	; 6
     b26:	88 ec       	ldi	r24, 0xC8	; 200
     b28:	96 e0       	ldi	r25, 0x06	; 6
     b2a:	10 82       	st	Z, r1
     b2c:	35 96       	adiw	r30, 0x05	; 5
     b2e:	e8 17       	cp	r30, r24
     b30:	f9 07       	cpc	r31, r25
     b32:	d9 f7       	brne	.-10     	; 0xb2a <nwkRxInit+0x8>
     b34:	e4 e8       	ldi	r30, 0x84	; 132
     b36:	f6 e0       	ldi	r31, 0x06	; 6
     b38:	84 e6       	ldi	r24, 0x64	; 100
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	86 83       	std	Z+6, r24	; 0x06
     b42:	97 83       	std	Z+7, r25	; 0x07
     b44:	a0 87       	std	Z+8, r26	; 0x08
     b46:	b1 87       	std	Z+9, r27	; 0x09
     b48:	12 86       	std	Z+10, r1	; 0x0a
     b4a:	8b e7       	ldi	r24, 0x7B	; 123
     b4c:	95 e0       	ldi	r25, 0x05	; 5
     b4e:	94 87       	std	Z+12, r25	; 0x0c
     b50:	83 87       	std	Z+11, r24	; 0x0b
     b52:	63 e6       	ldi	r22, 0x63	; 99
     b54:	75 e0       	ldi	r23, 0x05	; 5
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	98 cc       	rjmp	.-1744   	; 0x48a <NWK_OpenEndpoint>
     b5a:	08 95       	ret

00000b5c <PHY_DataInd>:
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	dc 01       	movw	r26, r24
     b62:	ed 91       	ld	r30, X+
     b64:	fc 91       	ld	r31, X
     b66:	11 97       	sbiw	r26, 0x01	; 1
     b68:	21 81       	ldd	r18, Z+1	; 0x01
     b6a:	28 38       	cpi	r18, 0x88	; 136
     b6c:	f1 f4       	brne	.+60     	; 0xbaa <PHY_DataInd+0x4e>
     b6e:	20 81       	ld	r18, Z
     b70:	2f 7d       	andi	r18, 0xDF	; 223
     b72:	21 34       	cpi	r18, 0x41	; 65
     b74:	d1 f4       	brne	.+52     	; 0xbaa <PHY_DataInd+0x4e>
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	2c 91       	ld	r18, X
     b7a:	20 31       	cpi	r18, 0x10	; 16
     b7c:	b0 f0       	brcs	.+44     	; 0xbaa <PHY_DataInd+0x4e>
     b7e:	ec 01       	movw	r28, r24
     b80:	87 dd       	rcall	.-1266   	; 0x690 <nwkFrameAlloc>
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	91 f0       	breq	.+36     	; 0xbaa <PHY_DataInd+0x4e>
     b86:	20 e2       	ldi	r18, 0x20	; 32
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	2a 81       	ldd	r18, Y+2	; 0x02
     b8e:	21 83       	std	Z+1, r18	; 0x01
     b90:	2b 81       	ldd	r18, Y+3	; 0x03
     b92:	ed 57       	subi	r30, 0x7D	; 125
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	20 83       	st	Z, r18
     b98:	2c 81       	ldd	r18, Y+4	; 0x04
     b9a:	31 96       	adiw	r30, 0x01	; 1
     b9c:	20 83       	st	Z, r18
     b9e:	4a 81       	ldd	r20, Y+2	; 0x02
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	68 81       	ld	r22, Y
     ba4:	79 81       	ldd	r23, Y+1	; 0x01
     ba6:	02 96       	adiw	r24, 0x02	; 2
     ba8:	e9 d6       	rcall	.+3538   	; 0x197c <memcpy>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     bb0:	2f 92       	push	r2
     bb2:	3f 92       	push	r3
     bb4:	4f 92       	push	r4
     bb6:	5f 92       	push	r5
     bb8:	6f 92       	push	r6
     bba:	7f 92       	push	r7
     bbc:	8f 92       	push	r8
     bbe:	9f 92       	push	r9
     bc0:	af 92       	push	r10
     bc2:	bf 92       	push	r11
     bc4:	cf 92       	push	r12
     bc6:	df 92       	push	r13
     bc8:	ef 92       	push	r14
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	2e 97       	sbiw	r28, 0x0e	; 14
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     be8:	0f 2e       	mov	r0, r31
     bea:	f4 e2       	ldi	r31, 0x24	; 36
     bec:	df 2e       	mov	r13, r31
     bee:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     bf0:	0f 2e       	mov	r0, r31
     bf2:	f6 e6       	ldi	r31, 0x66	; 102
     bf4:	8f 2e       	mov	r8, r31
     bf6:	f7 e0       	ldi	r31, 0x07	; 7
     bf8:	9f 2e       	mov	r9, r31
     bfa:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     bfc:	68 94       	set
     bfe:	cc 24       	eor	r12, r12
     c00:	c4 f8       	bld	r12, 4
     c02:	0f 2e       	mov	r0, r31
     c04:	f6 e9       	ldi	r31, 0x96	; 150
     c06:	4f 2e       	mov	r4, r31
     c08:	f6 e0       	ldi	r31, 0x06	; 6
     c0a:	5f 2e       	mov	r5, r31
     c0c:	f0 2d       	mov	r31, r0
     c0e:	0f 2e       	mov	r0, r31
     c10:	f2 e9       	ldi	r31, 0x92	; 146
     c12:	6f 2e       	mov	r6, r31
     c14:	f6 e0       	ldi	r31, 0x06	; 6
     c16:	7f 2e       	mov	r7, r31
     c18:	f0 2d       	mov	r31, r0
     c1a:	0f 2e       	mov	r0, r31
     c1c:	f4 ec       	ldi	r31, 0xC4	; 196
     c1e:	ef 2e       	mov	r14, r31
     c20:	f6 e0       	ldi	r31, 0x06	; 6
     c22:	ff 2e       	mov	r15, r31
     c24:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     c26:	31 2c       	mov	r3, r1
     c28:	21 2c       	mov	r2, r1
     c2a:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     c2c:	dd c1       	rjmp	.+954    	; 0xfe8 <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
     c2e:	d5 01       	movw	r26, r10
     c30:	8c 91       	ld	r24, X
     c32:	82 32       	cpi	r24, 0x22	; 34
     c34:	09 f4       	brne	.+2      	; 0xc38 <nwkRxTaskHandler+0x88>
     c36:	07 c1       	rjmp	.+526    	; 0xe46 <nwkRxTaskHandler+0x296>
     c38:	18 f4       	brcc	.+6      	; 0xc40 <nwkRxTaskHandler+0x90>
     c3a:	80 32       	cpi	r24, 0x20	; 32
     c3c:	41 f0       	breq	.+16     	; 0xc4e <nwkRxTaskHandler+0x9e>
     c3e:	d4 c1       	rjmp	.+936    	; 0xfe8 <nwkRxTaskHandler+0x438>
     c40:	83 32       	cpi	r24, 0x23	; 35
     c42:	09 f4       	brne	.+2      	; 0xc46 <nwkRxTaskHandler+0x96>
     c44:	cc c1       	rjmp	.+920    	; 0xfde <nwkRxTaskHandler+0x42e>
     c46:	84 32       	cpi	r24, 0x24	; 36
     c48:	09 f4       	brne	.+2      	; 0xc4c <nwkRxTaskHandler+0x9c>
     c4a:	cc c1       	rjmp	.+920    	; 0xfe4 <nwkRxTaskHandler+0x434>
     c4c:	cd c1       	rjmp	.+922    	; 0xfe8 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     c4e:	f5 01       	movw	r30, r10
     c50:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     c52:	83 85       	ldd	r24, Z+11	; 0x0b
     c54:	98 2f       	mov	r25, r24
     c56:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     c58:	09 f0       	breq	.+2      	; 0xc5c <nwkRxTaskHandler+0xac>
     c5a:	c6 c1       	rjmp	.+908    	; 0xfe8 <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     c5c:	25 81       	ldd	r18, Z+5	; 0x05
     c5e:	36 81       	ldd	r19, Z+6	; 0x06
     c60:	2f 3f       	cpi	r18, 0xFF	; 255
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	91 f4       	brne	.+36     	; 0xc8a <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c66:	d5 01       	movw	r26, r10
     c68:	1f 96       	adiw	r26, 0x0f	; 15
     c6a:	8d 91       	ld	r24, X+
     c6c:	9c 91       	ld	r25, X
     c6e:	50 97       	sbiw	r26, 0x10	; 16
     c70:	f4 01       	movw	r30, r8
     c72:	20 81       	ld	r18, Z
     c74:	31 81       	ldd	r19, Z+1	; 0x01
     c76:	28 17       	cp	r18, r24
     c78:	39 07       	cpc	r19, r25
     c7a:	19 f0       	breq	.+6      	; 0xc82 <nwkRxTaskHandler+0xd2>
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	09 f0       	breq	.+2      	; 0xc82 <nwkRxTaskHandler+0xd2>
     c80:	b3 c1       	rjmp	.+870    	; 0xfe8 <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     c82:	e2 e2       	ldi	r30, 0x22	; 34
     c84:	d5 01       	movw	r26, r10
     c86:	ec 93       	st	X, r30
     c88:	af c1       	rjmp	.+862    	; 0xfe8 <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     c8a:	d5 01       	movw	r26, r10
     c8c:	1f 96       	adiw	r26, 0x0f	; 15
     c8e:	2d 91       	ld	r18, X+
     c90:	3c 91       	ld	r19, X
     c92:	50 97       	sbiw	r26, 0x10	; 16
     c94:	2f 3f       	cpi	r18, 0xFF	; 255
     c96:	3f 4f       	sbci	r19, 0xFF	; 255
     c98:	11 f4       	brne	.+4      	; 0xc9e <nwkRxTaskHandler+0xee>
     c9a:	80 fd       	sbrc	r24, 0
     c9c:	a5 c1       	rjmp	.+842    	; 0xfe8 <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     c9e:	f4 01       	movw	r30, r8
     ca0:	20 81       	ld	r18, Z
     ca2:	31 81       	ldd	r19, Z+1	; 0x01
     ca4:	d5 01       	movw	r26, r10
     ca6:	1d 96       	adiw	r26, 0x0d	; 13
     ca8:	8d 91       	ld	r24, X+
     caa:	9c 91       	ld	r25, X
     cac:	1e 97       	sbiw	r26, 0x0e	; 14
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <nwkRxTaskHandler+0x106>
     cb4:	99 c1       	rjmp	.+818    	; 0xfe8 <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     cb6:	c5 01       	movw	r24, r10
     cb8:	f4 dd       	rcall	.-1048   	; 0x8a2 <nwkRouteFrameReceived>
     cba:	f3 01       	movw	r30, r6
     cbc:	43 2d       	mov	r20, r3
     cbe:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     cc0:	63 2d       	mov	r22, r3
     cc2:	72 2d       	mov	r23, r2
     cc4:	5e 86       	std	Y+14, r5	; 0x0e
     cc6:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     cc8:	ad 85       	ldd	r26, Y+13	; 0x0d
     cca:	be 85       	ldd	r27, Y+14	; 0x0e
     ccc:	8c 91       	ld	r24, X
     cce:	88 23       	and	r24, r24
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <nwkRxTaskHandler+0x124>
     cd2:	6c c0       	rjmp	.+216    	; 0xdac <nwkRxTaskHandler+0x1fc>
     cd4:	d5 01       	movw	r26, r10
     cd6:	1d 96       	adiw	r26, 0x0d	; 13
     cd8:	2d 91       	ld	r18, X+
     cda:	3c 91       	ld	r19, X
     cdc:	1e 97       	sbiw	r26, 0x0e	; 14
     cde:	80 81       	ld	r24, Z
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	28 17       	cp	r18, r24
     ce4:	39 07       	cpc	r19, r25
     ce6:	09 f0       	breq	.+2      	; 0xcea <nwkRxTaskHandler+0x13a>
     ce8:	62 c0       	rjmp	.+196    	; 0xdae <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     cea:	f5 01       	movw	r30, r10
     cec:	94 85       	ldd	r25, Z+12	; 0x0c
     cee:	fa 01       	movw	r30, r20
     cf0:	ee 0f       	add	r30, r30
     cf2:	ff 1f       	adc	r31, r31
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	e4 0f       	add	r30, r20
     cfa:	f5 1f       	adc	r31, r21
     cfc:	ee 56       	subi	r30, 0x6E	; 110
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	82 81       	ldd	r24, Z+2	; 0x02
     d02:	89 1b       	sub	r24, r25

      if (diff < 8)
     d04:	88 30       	cpi	r24, 0x08	; 8
     d06:	c8 f5       	brcc	.+114    	; 0xd7a <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
     d08:	fa 01       	movw	r30, r20
     d0a:	ee 0f       	add	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	ee 0f       	add	r30, r30
     d10:	ff 1f       	adc	r31, r31
     d12:	e4 0f       	add	r30, r20
     d14:	f5 1f       	adc	r31, r21
     d16:	ee 56       	subi	r30, 0x6E	; 110
     d18:	f9 4f       	sbci	r31, 0xF9	; 249
     d1a:	93 81       	ldd	r25, Z+3	; 0x03
     d1c:	29 2f       	mov	r18, r25
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	08 2e       	mov	r0, r24
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <nwkRxTaskHandler+0x178>
     d24:	35 95       	asr	r19
     d26:	27 95       	ror	r18
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <nwkRxTaskHandler+0x174>
     d2c:	20 ff       	sbrs	r18, 0
     d2e:	12 c0       	rjmp	.+36     	; 0xd54 <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     d30:	d4 01       	movw	r26, r8
     d32:	2d 91       	ld	r18, X+
     d34:	3c 91       	ld	r19, X
     d36:	f5 01       	movw	r30, r10
     d38:	87 81       	ldd	r24, Z+7	; 0x07
     d3a:	90 85       	ldd	r25, Z+8	; 0x08
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	09 f0       	breq	.+2      	; 0xd44 <nwkRxTaskHandler+0x194>
     d42:	52 c1       	rjmp	.+676    	; 0xfe8 <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     d44:	63 85       	ldd	r22, Z+11	; 0x0b
     d46:	63 fb       	bst	r22, 3
     d48:	66 27       	eor	r22, r22
     d4a:	60 f9       	bld	r22, 0
     d4c:	87 85       	ldd	r24, Z+15	; 0x0f
     d4e:	90 89       	ldd	r25, Z+16	; 0x10
     d50:	a3 dd       	rcall	.-1210   	; 0x898 <nwkRouteRemove>
     d52:	4a c1       	rjmp	.+660    	; 0xfe8 <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     d54:	fa 01       	movw	r30, r20
     d56:	ee 0f       	add	r30, r30
     d58:	ff 1f       	adc	r31, r31
     d5a:	ee 0f       	add	r30, r30
     d5c:	ff 1f       	adc	r31, r31
     d5e:	e4 0f       	add	r30, r20
     d60:	f5 1f       	adc	r31, r21
     d62:	ee 56       	subi	r30, 0x6E	; 110
     d64:	f9 4f       	sbci	r31, 0xF9	; 249
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <nwkRxTaskHandler+0x1c0>
     d6c:	22 0f       	add	r18, r18
     d6e:	33 1f       	adc	r19, r19
     d70:	8a 95       	dec	r24
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <nwkRxTaskHandler+0x1bc>
     d74:	92 2b       	or	r25, r18
     d76:	93 83       	std	Z+3, r25	; 0x03
     d78:	3e c1       	rjmp	.+636    	; 0xff6 <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     d7a:	fa 01       	movw	r30, r20
     d7c:	ee 0f       	add	r30, r30
     d7e:	ff 1f       	adc	r31, r31
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e4 0f       	add	r30, r20
     d86:	f5 1f       	adc	r31, r21
     d88:	ee 56       	subi	r30, 0x6E	; 110
     d8a:	f9 4f       	sbci	r31, 0xF9	; 249
     d8c:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     d8e:	23 81       	ldd	r18, Z+3	; 0x03
     d90:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     d92:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     d94:	a9 01       	movw	r20, r18
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <nwkRxTaskHandler+0x1ec>
     d98:	44 0f       	add	r20, r20
     d9a:	55 1f       	adc	r21, r21
     d9c:	8a 95       	dec	r24
     d9e:	e2 f7       	brpl	.-8      	; 0xd98 <nwkRxTaskHandler+0x1e8>
     da0:	ca 01       	movw	r24, r20
     da2:	81 60       	ori	r24, 0x01	; 1
     da4:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     da6:	8f e1       	ldi	r24, 0x1F	; 31
     da8:	84 83       	std	Z+4, r24	; 0x04
     daa:	25 c1       	rjmp	.+586    	; 0xff6 <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     dac:	bf 01       	movw	r22, r30
     dae:	4f 5f       	subi	r20, 0xFF	; 255
     db0:	5f 4f       	sbci	r21, 0xFF	; 255
     db2:	8d 85       	ldd	r24, Y+13	; 0x0d
     db4:	9e 85       	ldd	r25, Y+14	; 0x0e
     db6:	05 96       	adiw	r24, 0x05	; 5
     db8:	9e 87       	std	Y+14, r25	; 0x0e
     dba:	8d 87       	std	Y+13, r24	; 0x0d
     dbc:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     dbe:	ee 15       	cp	r30, r14
     dc0:	ff 05       	cpc	r31, r15
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <nwkRxTaskHandler+0x216>
     dc4:	81 cf       	rjmp	.-254    	; 0xcc8 <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     dc6:	61 15       	cp	r22, r1
     dc8:	71 05       	cpc	r23, r1
     dca:	09 f4       	brne	.+2      	; 0xdce <nwkRxTaskHandler+0x21e>
     dcc:	0d c1       	rjmp	.+538    	; 0xfe8 <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     dce:	d5 01       	movw	r26, r10
     dd0:	1d 96       	adiw	r26, 0x0d	; 13
     dd2:	8d 91       	ld	r24, X+
     dd4:	9c 91       	ld	r25, X
     dd6:	1e 97       	sbiw	r26, 0x0e	; 14
     dd8:	fb 01       	movw	r30, r22
     dda:	91 83       	std	Z+1, r25	; 0x01
     ddc:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     dde:	1c 96       	adiw	r26, 0x0c	; 12
     de0:	8c 91       	ld	r24, X
     de2:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     de8:	8f e1       	ldi	r24, 0x1F	; 31
     dea:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     dec:	84 e8       	ldi	r24, 0x84	; 132
     dee:	96 e0       	ldi	r25, 0x06	; 6
     df0:	7f d4       	rcall	.+2302   	; 0x16f0 <SYS_TimerStart>
     df2:	01 c1       	rjmp	.+514    	; 0xff6 <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     df4:	d4 01       	movw	r26, r8
     df6:	2d 91       	ld	r18, X+
     df8:	3c 91       	ld	r19, X
     dfa:	f5 01       	movw	r30, r10
     dfc:	87 85       	ldd	r24, Z+15	; 0x0f
     dfe:	90 89       	ldd	r25, Z+16	; 0x10
     e00:	28 17       	cp	r18, r24
     e02:	39 07       	cpc	r19, r25
     e04:	81 f0       	breq	.+32     	; 0xe26 <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
     e06:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e08:	42 fd       	sbrc	r20, 2
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     e0c:	c5 01       	movw	r24, r10
     e0e:	e2 d1       	rcall	.+964    	; 0x11d4 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e10:	d4 01       	movw	r26, r8
     e12:	2d 91       	ld	r18, X+
     e14:	3c 91       	ld	r19, X
     e16:	f5 01       	movw	r30, r10
     e18:	87 85       	ldd	r24, Z+15	; 0x0f
     e1a:	90 89       	ldd	r25, Z+16	; 0x10
     e1c:	28 17       	cp	r18, r24
     e1e:	39 07       	cpc	r19, r25
     e20:	11 f0       	breq	.+4      	; 0xe26 <nwkRxTaskHandler+0x276>
     e22:	01 96       	adiw	r24, 0x01	; 1
     e24:	21 f4       	brne	.+8      	; 0xe2e <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     e26:	e2 e2       	ldi	r30, 0x22	; 34
     e28:	d5 01       	movw	r26, r10
     e2a:	ec 93       	st	X, r30
     e2c:	dd c0       	rjmp	.+442    	; 0xfe8 <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
     e2e:	d5 01       	movw	r26, r10
     e30:	17 96       	adiw	r26, 0x07	; 7
     e32:	8d 91       	ld	r24, X+
     e34:	9c 91       	ld	r25, X
     e36:	18 97       	sbiw	r26, 0x08	; 8
     e38:	28 17       	cp	r18, r24
     e3a:	39 07       	cpc	r19, r25
     e3c:	09 f0       	breq	.+2      	; 0xe40 <nwkRxTaskHandler+0x290>
     e3e:	d4 c0       	rjmp	.+424    	; 0xfe8 <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
     e40:	83 e2       	ldi	r24, 0x23	; 35
     e42:	8c 93       	st	X, r24
     e44:	d1 c0       	rjmp	.+418    	; 0xfe8 <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     e46:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     e4a:	f5 01       	movw	r30, r10
     e4c:	21 89       	ldd	r18, Z+17	; 0x11
     e4e:	22 95       	swap	r18
     e50:	2f 70       	andi	r18, 0x0F	; 15
     e52:	e2 2f       	mov	r30, r18
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e4 59       	subi	r30, 0x94	; 148
     e5c:	f8 4f       	sbci	r31, 0xF8	; 248
     e5e:	01 90       	ld	r0, Z+
     e60:	f0 81       	ld	r31, Z
     e62:	e0 2d       	mov	r30, r0
     e64:	30 97       	sbiw	r30, 0x00	; 0
     e66:	09 f4       	brne	.+2      	; 0xe6a <nwkRxTaskHandler+0x2ba>
     e68:	63 c0       	rjmp	.+198    	; 0xf30 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     e6a:	d5 01       	movw	r26, r10
     e6c:	1d 96       	adiw	r26, 0x0d	; 13
     e6e:	8d 91       	ld	r24, X+
     e70:	9c 91       	ld	r25, X
     e72:	1e 97       	sbiw	r26, 0x0e	; 14
     e74:	9a 83       	std	Y+2, r25	; 0x02
     e76:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     e78:	1f 96       	adiw	r26, 0x0f	; 15
     e7a:	4d 91       	ld	r20, X+
     e7c:	5c 91       	ld	r21, X
     e7e:	50 97       	sbiw	r26, 0x10	; 16
     e80:	5c 83       	std	Y+4, r21	; 0x04
     e82:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     e84:	51 96       	adiw	r26, 0x11	; 17
     e86:	3c 91       	ld	r19, X
     e88:	51 97       	sbiw	r26, 0x11	; 17
     e8a:	3f 70       	andi	r19, 0x0F	; 15
     e8c:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     e8e:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     e90:	af 57       	subi	r26, 0x7F	; 127
     e92:	bf 4f       	sbci	r27, 0xFF	; 255
     e94:	6d 91       	ld	r22, X+
     e96:	7c 91       	ld	r23, X
     e98:	79 87       	std	Y+9, r23	; 0x09
     e9a:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     e9c:	95 01       	movw	r18, r10
     e9e:	2e 5f       	subi	r18, 0xFE	; 254
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	26 1b       	sub	r18, r22
     ea4:	37 0b       	sbc	r19, r23
     ea6:	d5 01       	movw	r26, r10
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	3c 91       	ld	r19, X
     eac:	11 97       	sbiw	r26, 0x01	; 1
     eae:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     eb0:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     eb2:	ad 57       	subi	r26, 0x7D	; 125
     eb4:	bf 4f       	sbci	r27, 0xFF	; 255
     eb6:	2c 91       	ld	r18, X
     eb8:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	2c 91       	ld	r18, X
     ebe:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     ec0:	d5 01       	movw	r26, r10
     ec2:	1b 96       	adiw	r26, 0x0b	; 11
     ec4:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     ec6:	62 2f       	mov	r22, r18
     ec8:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     eca:	22 fd       	sbrc	r18, 2
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <nwkRxTaskHandler+0x322>
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <nwkRxTaskHandler+0x324>
     ed2:	30 e2       	ldi	r19, 0x20	; 32
     ed4:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     ed6:	23 fd       	sbrc	r18, 3
     ed8:	02 c0       	rjmp	.+4      	; 0xede <nwkRxTaskHandler+0x32e>
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	01 c0       	rjmp	.+2      	; 0xee0 <nwkRxTaskHandler+0x330>
     ede:	30 e4       	ldi	r19, 0x40	; 64
     ee0:	26 2f       	mov	r18, r22
     ee2:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     ee4:	4f 3f       	cpi	r20, 0xFF	; 255
     ee6:	5f 4f       	sbci	r21, 0xFF	; 255
     ee8:	11 f0       	breq	.+4      	; 0xeee <nwkRxTaskHandler+0x33e>
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	01 c0       	rjmp	.+2      	; 0xef0 <nwkRxTaskHandler+0x340>
     eee:	34 e0       	ldi	r19, 0x04	; 4
     ef0:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     ef2:	d5 01       	movw	r26, r10
     ef4:	19 96       	adiw	r26, 0x09	; 9
     ef6:	4d 91       	ld	r20, X+
     ef8:	5c 91       	ld	r21, X
     efa:	1a 97       	sbiw	r26, 0x0a	; 10
     efc:	84 17       	cp	r24, r20
     efe:	95 07       	cpc	r25, r21
     f00:	11 f0       	breq	.+4      	; 0xf06 <nwkRxTaskHandler+0x356>
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <nwkRxTaskHandler+0x358>
     f06:	98 e0       	ldi	r25, 0x08	; 8
     f08:	82 2f       	mov	r24, r18
     f0a:	89 2b       	or	r24, r25
     f0c:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     f0e:	d5 01       	movw	r26, r10
     f10:	15 96       	adiw	r26, 0x05	; 5
     f12:	2d 91       	ld	r18, X+
     f14:	3c 91       	ld	r19, X
     f16:	16 97       	sbiw	r26, 0x06	; 6
     f18:	2f 3f       	cpi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	11 f0       	breq	.+4      	; 0xf22 <nwkRxTaskHandler+0x372>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <nwkRxTaskHandler+0x374>
     f22:	9c 2d       	mov	r25, r12
     f24:	89 2b       	or	r24, r25
     f26:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     f28:	ce 01       	movw	r24, r28
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	19 95       	eicall
     f2e:	01 c0       	rjmp	.+2      	; 0xf32 <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     f30:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     f32:	f5 01       	movw	r30, r10
     f34:	93 85       	ldd	r25, Z+11	; 0x0b
     f36:	90 ff       	sbrs	r25, 0
    ack = false;
     f38:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     f3a:	d5 01       	movw	r26, r10
     f3c:	17 96       	adiw	r26, 0x07	; 7
     f3e:	2d 91       	ld	r18, X+
     f40:	3c 91       	ld	r19, X
     f42:	18 97       	sbiw	r26, 0x08	; 8
     f44:	2f 3f       	cpi	r18, 0xFF	; 255
     f46:	3f 4f       	sbci	r19, 0xFF	; 255
     f48:	69 f4       	brne	.+26     	; 0xf64 <nwkRxTaskHandler+0x3b4>
     f4a:	f4 01       	movw	r30, r8
     f4c:	40 81       	ld	r20, Z
     f4e:	51 81       	ldd	r21, Z+1	; 0x01
     f50:	d5 01       	movw	r26, r10
     f52:	1f 96       	adiw	r26, 0x0f	; 15
     f54:	2d 91       	ld	r18, X+
     f56:	3c 91       	ld	r19, X
     f58:	50 97       	sbiw	r26, 0x10	; 16
     f5a:	42 17       	cp	r20, r18
     f5c:	53 07       	cpc	r21, r19
     f5e:	11 f4       	brne	.+4      	; 0xf64 <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
     f60:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     f62:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     f64:	f5 01       	movw	r30, r10
     f66:	25 81       	ldd	r18, Z+5	; 0x05
     f68:	36 81       	ldd	r19, Z+6	; 0x06
     f6a:	2f 3f       	cpi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	a1 f1       	breq	.+104    	; 0xfd8 <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     f70:	d4 01       	movw	r26, r8
     f72:	2d 91       	ld	r18, X+
     f74:	3c 91       	ld	r19, X
     f76:	2f 3f       	cpi	r18, 0xFF	; 255
     f78:	3f 4f       	sbci	r19, 0xFF	; 255
     f7a:	71 f1       	breq	.+92     	; 0xfd8 <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
     f7c:	88 23       	and	r24, r24
     f7e:	61 f1       	breq	.+88     	; 0xfd8 <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     f80:	87 db       	rcall	.-2290   	; 0x690 <nwkFrameAlloc>
     f82:	8c 01       	movw	r16, r24
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	41 f1       	breq	.+80     	; 0xfd8 <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
     f88:	e5 db       	rcall	.-2102   	; 0x754 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     f8a:	f8 01       	movw	r30, r16
     f8c:	81 81       	ldd	r24, Z+1	; 0x01
     f8e:	8d 5f       	subi	r24, 0xFD	; 253
     f90:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     f92:	e9 57       	subi	r30, 0x79	; 121
     f94:	ff 4f       	sbci	r31, 0xFF	; 255
     f96:	11 82       	std	Z+1, r1	; 0x01
     f98:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     f9a:	d5 01       	movw	r26, r10
     f9c:	1b 96       	adiw	r26, 0x0b	; 11
     f9e:	8c 91       	ld	r24, X
     fa0:	1b 97       	sbiw	r26, 0x0b	; 11
     fa2:	86 95       	lsr	r24
     fa4:	81 70       	andi	r24, 0x01	; 1
     fa6:	f8 01       	movw	r30, r16
     fa8:	93 85       	ldd	r25, Z+11	; 0x0b
     faa:	80 fb       	bst	r24, 0
     fac:	91 f9       	bld	r25, 1
     fae:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     fb0:	1d 96       	adiw	r26, 0x0d	; 13
     fb2:	8d 91       	ld	r24, X+
     fb4:	9c 91       	ld	r25, X
     fb6:	1e 97       	sbiw	r26, 0x0e	; 14
     fb8:	90 8b       	std	Z+16, r25	; 0x10
     fba:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     fbc:	ef 57       	subi	r30, 0x7F	; 127
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	01 90       	ld	r0, Z+
     fc2:	f0 81       	ld	r31, Z
     fc4:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
     fc6:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
     fc8:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <nwkRxAckControl>
     fcc:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
     fce:	1c 96       	adiw	r26, 0x0c	; 12
     fd0:	8c 91       	ld	r24, X
     fd2:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
     fd4:	c8 01       	movw	r24, r16
     fd6:	b0 d0       	rcall	.+352    	; 0x1138 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     fd8:	d5 01       	movw	r26, r10
     fda:	dc 92       	st	X, r13
     fdc:	05 c0       	rjmp	.+10     	; 0xfe8 <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
     fde:	c5 01       	movw	r24, r10
     fe0:	15 dd       	rcall	.-1494   	; 0xa0c <nwkRouteFrame>
      } break;
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     fe4:	c5 01       	movw	r24, r10
     fe6:	8a db       	rcall	.-2284   	; 0x6fc <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     fe8:	c5 01       	movw	r24, r10
     fea:	92 db       	rcall	.-2268   	; 0x710 <nwkFrameNext>
     fec:	5c 01       	movw	r10, r24
     fee:	89 2b       	or	r24, r25
     ff0:	09 f0       	breq	.+2      	; 0xff4 <nwkRxTaskHandler+0x444>
     ff2:	1d ce       	rjmp	.-966    	; 0xc2e <nwkRxTaskHandler+0x7e>
     ff4:	07 c0       	rjmp	.+14     	; 0x1004 <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     ff6:	f5 01       	movw	r30, r10
     ff8:	87 81       	ldd	r24, Z+7	; 0x07
     ffa:	90 85       	ldd	r25, Z+8	; 0x08
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	09 f0       	breq	.+2      	; 0x1002 <nwkRxTaskHandler+0x452>
    1000:	07 cf       	rjmp	.-498    	; 0xe10 <nwkRxTaskHandler+0x260>
    1002:	f8 ce       	rjmp	.-528    	; 0xdf4 <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1004:	2e 96       	adiw	r28, 0x0e	; 14
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	8f 90       	pop	r8
    1028:	7f 90       	pop	r7
    102a:	6f 90       	pop	r6
    102c:	5f 90       	pop	r5
    102e:	4f 90       	pop	r4
    1030:	3f 90       	pop	r3
    1032:	2f 90       	pop	r2
    1034:	08 95       	ret

00001036 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	7c 01       	movw	r14, r24
    1042:	10 e0       	ldi	r17, 0x00	; 0
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	01 e0       	ldi	r16, 0x01	; 1
    104a:	c3 e1       	ldi	r28, 0x13	; 19
    104c:	13 c0       	rjmp	.+38     	; 0x1074 <nwkTxDelayTimerHandler+0x3e>
    104e:	fc 01       	movw	r30, r24
    1050:	20 81       	ld	r18, Z
    1052:	21 31       	cpi	r18, 0x11	; 17
    1054:	79 f4       	brne	.+30     	; 0x1074 <nwkTxDelayTimerHandler+0x3e>
    1056:	ec 57       	subi	r30, 0x7C	; 124
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	20 81       	ld	r18, Z
    105c:	31 81       	ldd	r19, Z+1	; 0x01
    105e:	21 50       	subi	r18, 0x01	; 1
    1060:	31 09       	sbc	r19, r1
    1062:	31 83       	std	Z+1, r19	; 0x01
    1064:	20 83       	st	Z, r18
    1066:	23 2b       	or	r18, r19
    1068:	21 f4       	brne	.+8      	; 0x1072 <nwkTxDelayTimerHandler+0x3c>
    106a:	fc 01       	movw	r30, r24
    106c:	c0 83       	st	Z, r28
    106e:	10 2f       	mov	r17, r16
    1070:	01 c0       	rjmp	.+2      	; 0x1074 <nwkTxDelayTimerHandler+0x3e>
    1072:	10 2f       	mov	r17, r16
    1074:	4d db       	rcall	.-2406   	; 0x710 <nwkFrameNext>
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	51 f7       	brne	.-44     	; 0x104e <nwkTxDelayTimerHandler+0x18>
    107a:	11 23       	and	r17, r17
    107c:	11 f0       	breq	.+4      	; 0x1082 <nwkTxDelayTimerHandler+0x4c>
    107e:	c7 01       	movw	r24, r14
    1080:	37 d3       	rcall	.+1646   	; 0x16f0 <SYS_TimerStart>
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	08 95       	ret

0000108e <nwkTxAckWaitTimerHandler>:
    108e:	ef 92       	push	r14
    1090:	ff 92       	push	r15
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
    109a:	7c 01       	movw	r14, r24
    109c:	10 e0       	ldi	r17, 0x00	; 0
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	01 e0       	ldi	r16, 0x01	; 1
    10a4:	d7 e1       	ldi	r29, 0x17	; 23
    10a6:	c0 e1       	ldi	r28, 0x10	; 16
    10a8:	16 c0       	rjmp	.+44     	; 0x10d6 <nwkTxAckWaitTimerHandler+0x48>
    10aa:	fc 01       	movw	r30, r24
    10ac:	20 81       	ld	r18, Z
    10ae:	26 31       	cpi	r18, 0x16	; 22
    10b0:	91 f4       	brne	.+36     	; 0x10d6 <nwkTxAckWaitTimerHandler+0x48>
    10b2:	ec 57       	subi	r30, 0x7C	; 124
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	20 81       	ld	r18, Z
    10b8:	31 81       	ldd	r19, Z+1	; 0x01
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	31 09       	sbc	r19, r1
    10be:	31 83       	std	Z+1, r19	; 0x01
    10c0:	20 83       	st	Z, r18
    10c2:	23 2b       	or	r18, r19
    10c4:	39 f4       	brne	.+14     	; 0x10d4 <nwkTxAckWaitTimerHandler+0x46>
    10c6:	fc 01       	movw	r30, r24
    10c8:	d0 83       	st	Z, r29
    10ca:	ed 57       	subi	r30, 0x7D	; 125
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	c0 83       	st	Z, r28
    10d0:	10 2f       	mov	r17, r16
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <nwkTxAckWaitTimerHandler+0x48>
    10d4:	10 2f       	mov	r17, r16
    10d6:	1c db       	rcall	.-2504   	; 0x710 <nwkFrameNext>
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	39 f7       	brne	.-50     	; 0x10aa <nwkTxAckWaitTimerHandler+0x1c>
    10dc:	11 23       	and	r17, r17
    10de:	11 f0       	breq	.+4      	; 0x10e4 <nwkTxAckWaitTimerHandler+0x56>
    10e0:	c7 01       	movw	r24, r14
    10e2:	06 d3       	rcall	.+1548   	; 0x16f0 <SYS_TimerStart>
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	ff 90       	pop	r15
    10ee:	ef 90       	pop	r14
    10f0:	08 95       	ret

000010f2 <nwkTxInit>:
    10f2:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <nwkTxPhyActiveFrame+0x1>
    10f6:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <nwkTxPhyActiveFrame>
    10fa:	e1 ed       	ldi	r30, 0xD1	; 209
    10fc:	f6 e0       	ldi	r31, 0x06	; 6
    10fe:	82 e3       	ldi	r24, 0x32	; 50
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	86 83       	std	Z+6, r24	; 0x06
    1108:	97 83       	std	Z+7, r25	; 0x07
    110a:	a0 87       	std	Z+8, r26	; 0x08
    110c:	b1 87       	std	Z+9, r27	; 0x09
    110e:	12 86       	std	Z+10, r1	; 0x0a
    1110:	87 e4       	ldi	r24, 0x47	; 71
    1112:	98 e0       	ldi	r25, 0x08	; 8
    1114:	94 87       	std	Z+12, r25	; 0x0c
    1116:	83 87       	std	Z+11, r24	; 0x0b
    1118:	e4 ec       	ldi	r30, 0xC4	; 196
    111a:	f6 e0       	ldi	r31, 0x06	; 6
    111c:	8a e0       	ldi	r24, 0x0A	; 10
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a0 e0       	ldi	r26, 0x00	; 0
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	86 83       	std	Z+6, r24	; 0x06
    1126:	97 83       	std	Z+7, r25	; 0x07
    1128:	a0 87       	std	Z+8, r26	; 0x08
    112a:	b1 87       	std	Z+9, r27	; 0x09
    112c:	12 86       	std	Z+10, r1	; 0x0a
    112e:	8b e1       	ldi	r24, 0x1B	; 27
    1130:	98 e0       	ldi	r25, 0x08	; 8
    1132:	94 87       	std	Z+12, r25	; 0x0c
    1134:	83 87       	std	Z+11, r24	; 0x0b
    1136:	08 95       	ret

00001138 <nwkTxFrame>:
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    113e:	fc 01       	movw	r30, r24
    1140:	ea 57       	subi	r30, 0x7A	; 122
    1142:	ff 4f       	sbci	r31, 0xFF	; 255
    1144:	80 81       	ld	r24, Z
    1146:	81 ff       	sbrs	r24, 1
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <nwkTxFrame+0x18>
    114a:	92 e1       	ldi	r25, 0x12	; 18
    114c:	98 83       	st	Y, r25
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <nwkTxFrame+0x1c>
    1150:	92 e1       	ldi	r25, 0x12	; 18
    1152:	98 83       	st	Y, r25
    1154:	fe 01       	movw	r30, r28
    1156:	ed 57       	subi	r30, 0x7D	; 125
    1158:	ff 4f       	sbci	r31, 0xFF	; 255
    115a:	10 82       	st	Z, r1
    115c:	80 ff       	sbrs	r24, 0
    115e:	05 c0       	rjmp	.+10     	; 0x116a <nwkTxFrame+0x32>
    1160:	2f ef       	ldi	r18, 0xFF	; 255
    1162:	3f ef       	ldi	r19, 0xFF	; 255
    1164:	3e 83       	std	Y+6, r19	; 0x06
    1166:	2d 83       	std	Y+5, r18	; 0x05
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <nwkTxFrame+0x3e>
    116a:	20 91 68 07 	lds	r18, 0x0768	; 0x800768 <nwkIb+0x2>
    116e:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <nwkIb+0x3>
    1172:	3e 83       	std	Y+6, r19	; 0x06
    1174:	2d 83       	std	Y+5, r18	; 0x05
    1176:	85 70       	andi	r24, 0x05	; 5
    1178:	19 f4       	brne	.+6      	; 0x1180 <nwkTxFrame+0x48>
    117a:	ce 01       	movw	r24, r28
    117c:	28 dc       	rcall	.-1968   	; 0x9ce <nwkRoutePrepareTx>
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <nwkTxFrame+0x50>
    1180:	8f 85       	ldd	r24, Y+15	; 0x0f
    1182:	98 89       	ldd	r25, Y+16	; 0x10
    1184:	98 87       	std	Y+8, r25	; 0x08
    1186:	8f 83       	std	Y+7, r24	; 0x07
    1188:	e6 e6       	ldi	r30, 0x66	; 102
    118a:	f7 e0       	ldi	r31, 0x07	; 7
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	9a 87       	std	Y+10, r25	; 0x0a
    1192:	89 87       	std	Y+9, r24	; 0x09
    1194:	85 81       	ldd	r24, Z+5	; 0x05
    1196:	8f 5f       	subi	r24, 0xFF	; 255
    1198:	85 83       	std	Z+5, r24	; 0x05
    119a:	8c 83       	std	Y+4, r24	; 0x04
    119c:	8f 81       	ldd	r24, Y+7	; 0x07
    119e:	98 85       	ldd	r25, Y+8	; 0x08
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	69 f4       	brne	.+26     	; 0x11be <nwkTxFrame+0x86>
    11a4:	81 e4       	ldi	r24, 0x41	; 65
    11a6:	98 e8       	ldi	r25, 0x88	; 136
    11a8:	9b 83       	std	Y+3, r25	; 0x03
    11aa:	8a 83       	std	Y+2, r24	; 0x02
    11ac:	d9 d3       	rcall	.+1970   	; 0x1960 <rand>
    11ae:	cc 57       	subi	r28, 0x7C	; 124
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	87 70       	andi	r24, 0x07	; 7
    11b4:	99 27       	eor	r25, r25
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	99 83       	std	Y+1, r25	; 0x01
    11ba:	88 83       	st	Y, r24
    11bc:	08 c0       	rjmp	.+16     	; 0x11ce <nwkTxFrame+0x96>
    11be:	81 e6       	ldi	r24, 0x61	; 97
    11c0:	98 e8       	ldi	r25, 0x88	; 136
    11c2:	9b 83       	std	Y+3, r25	; 0x03
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	cc 57       	subi	r28, 0x7C	; 124
    11c8:	df 4f       	sbci	r29, 0xFF	; 255
    11ca:	19 82       	std	Y+1, r1	; 0x01
    11cc:	18 82       	st	Y, r1
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <nwkTxBroadcastFrame>:
    11d4:	0f 93       	push	r16
    11d6:	1f 93       	push	r17
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	8c 01       	movw	r16, r24
    11de:	58 da       	rcall	.-2896   	; 0x690 <nwkFrameAlloc>
    11e0:	ec 01       	movw	r28, r24
    11e2:	89 2b       	or	r24, r25
    11e4:	a9 f1       	breq	.+106    	; 0x1250 <nwkTxBroadcastFrame+0x7c>
    11e6:	82 e1       	ldi	r24, 0x12	; 18
    11e8:	88 83       	st	Y, r24
    11ea:	f8 01       	movw	r30, r16
    11ec:	81 81       	ldd	r24, Z+1	; 0x01
    11ee:	89 83       	std	Y+1, r24	; 0x01
    11f0:	fe 01       	movw	r30, r28
    11f2:	ed 57       	subi	r30, 0x7D	; 125
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	10 82       	st	Z, r1
    11f8:	b3 d3       	rcall	.+1894   	; 0x1960 <rand>
    11fa:	fe 01       	movw	r30, r28
    11fc:	ec 57       	subi	r30, 0x7C	; 124
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	87 70       	andi	r24, 0x07	; 7
    1202:	99 27       	eor	r25, r25
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	33 96       	adiw	r30, 0x03	; 3
    120c:	11 82       	std	Z+1, r1	; 0x01
    120e:	10 82       	st	Z, r1
    1210:	f8 01       	movw	r30, r16
    1212:	41 81       	ldd	r20, Z+1	; 0x01
    1214:	50 e0       	ldi	r21, 0x00	; 0
    1216:	b8 01       	movw	r22, r16
    1218:	6e 5f       	subi	r22, 0xFE	; 254
    121a:	7f 4f       	sbci	r23, 0xFF	; 255
    121c:	ce 01       	movw	r24, r28
    121e:	02 96       	adiw	r24, 0x02	; 2
    1220:	ad d3       	rcall	.+1882   	; 0x197c <memcpy>
    1222:	81 e4       	ldi	r24, 0x41	; 65
    1224:	98 e8       	ldi	r25, 0x88	; 136
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	8a 83       	std	Y+2, r24	; 0x02
    122a:	8f ef       	ldi	r24, 0xFF	; 255
    122c:	9f ef       	ldi	r25, 0xFF	; 255
    122e:	98 87       	std	Y+8, r25	; 0x08
    1230:	8f 83       	std	Y+7, r24	; 0x07
    1232:	f8 01       	movw	r30, r16
    1234:	85 81       	ldd	r24, Z+5	; 0x05
    1236:	96 81       	ldd	r25, Z+6	; 0x06
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	e6 e6       	ldi	r30, 0x66	; 102
    123e:	f7 e0       	ldi	r31, 0x07	; 7
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	9a 87       	std	Y+10, r25	; 0x0a
    1246:	89 87       	std	Y+9, r24	; 0x09
    1248:	85 81       	ldd	r24, Z+5	; 0x05
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	85 83       	std	Z+5, r24	; 0x05
    124e:	8c 83       	std	Y+4, r24	; 0x04
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <nwkTxAckReceived>:
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	fc 01       	movw	r30, r24
    1260:	c7 81       	ldd	r28, Z+7	; 0x07
    1262:	d0 85       	ldd	r29, Z+8	; 0x08
    1264:	81 85       	ldd	r24, Z+9	; 0x09
    1266:	83 30       	cpi	r24, 0x03	; 3
    1268:	c1 f4       	brne	.+48     	; 0x129a <nwkTxAckReceived+0x40>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	10 c0       	rjmp	.+32     	; 0x1290 <nwkTxAckReceived+0x36>
    1270:	fc 01       	movw	r30, r24
    1272:	20 81       	ld	r18, Z
    1274:	26 31       	cpi	r18, 0x16	; 22
    1276:	61 f4       	brne	.+24     	; 0x1290 <nwkTxAckReceived+0x36>
    1278:	34 85       	ldd	r19, Z+12	; 0x0c
    127a:	29 81       	ldd	r18, Y+1	; 0x01
    127c:	32 13       	cpse	r19, r18
    127e:	08 c0       	rjmp	.+16     	; 0x1290 <nwkTxAckReceived+0x36>
    1280:	27 e1       	ldi	r18, 0x17	; 23
    1282:	20 83       	st	Z, r18
    1284:	2a 81       	ldd	r18, Y+2	; 0x02
    1286:	ea 57       	subi	r30, 0x7A	; 122
    1288:	ff 4f       	sbci	r31, 0xFF	; 255
    128a:	20 83       	st	Z, r18
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	06 c0       	rjmp	.+12     	; 0x129c <nwkTxAckReceived+0x42>
    1290:	3f da       	rcall	.-2946   	; 0x710 <nwkFrameNext>
    1292:	00 97       	sbiw	r24, 0x00	; 0
    1294:	69 f7       	brne	.-38     	; 0x1270 <nwkTxAckReceived+0x16>
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	01 c0       	rjmp	.+2      	; 0x129c <nwkTxAckReceived+0x42>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	08 95       	ret

000012a2 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    12a2:	e0 91 de 06 	lds	r30, 0x06DE	; 0x8006de <nwkTxPhyActiveFrame>
    12a6:	f0 91 df 06 	lds	r31, 0x06DF	; 0x8006df <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <PHY_DataConf+0x14>
    12ae:	48 f0       	brcs	.+18     	; 0x12c2 <PHY_DataConf+0x20>
    12b0:	82 30       	cpi	r24, 0x02	; 2
    12b2:	19 f0       	breq	.+6      	; 0x12ba <PHY_DataConf+0x18>
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    12b6:	80 e2       	ldi	r24, 0x20	; 32
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    12ba:	81 e2       	ldi	r24, 0x21	; 33
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	01 c0       	rjmp	.+2      	; 0x12c4 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    12c2:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    12c4:	df 01       	movw	r26, r30
    12c6:	ad 57       	subi	r26, 0x7D	; 125
    12c8:	bf 4f       	sbci	r27, 0xFF	; 255
    12ca:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    12cc:	85 e1       	ldi	r24, 0x15	; 21
    12ce:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    12d0:	10 92 df 06 	sts	0x06DF, r1	; 0x8006df <nwkTxPhyActiveFrame+0x1>
    12d4:	10 92 de 06 	sts	0x06DE, r1	; 0x8006de <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    12d8:	e6 e6       	ldi	r30, 0x66	; 102
    12da:	f7 e0       	ldi	r31, 0x07	; 7
    12dc:	86 a1       	ldd	r24, Z+38	; 0x26
    12de:	97 a1       	ldd	r25, Z+39	; 0x27
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	97 a3       	std	Z+39, r25	; 0x27
    12e4:	86 a3       	std	Z+38, r24	; 0x26
    12e6:	08 95       	ret

000012e8 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    12e8:	9f 92       	push	r9
    12ea:	af 92       	push	r10
    12ec:	bf 92       	push	r11
    12ee:	cf 92       	push	r12
    12f0:	df 92       	push	r13
    12f2:	ef 92       	push	r14
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    12fe:	c0 e0       	ldi	r28, 0x00	; 0
    1300:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1302:	0f 2e       	mov	r0, r31
    1304:	f4 e1       	ldi	r31, 0x14	; 20
    1306:	af 2e       	mov	r10, r31
    1308:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    130a:	06 e6       	ldi	r16, 0x66	; 102
    130c:	17 e0       	ldi	r17, 0x07	; 7
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    130e:	0f 2e       	mov	r0, r31
    1310:	f7 e1       	ldi	r31, 0x17	; 23
    1312:	df 2e       	mov	r13, r31
    1314:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1316:	0f 2e       	mov	r0, r31
    1318:	f6 e1       	ldi	r31, 0x16	; 22
    131a:	9f 2e       	mov	r9, r31
    131c:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    131e:	0f 2e       	mov	r0, r31
    1320:	f5 e1       	ldi	r31, 0x15	; 21
    1322:	ef 2e       	mov	r14, r31
    1324:	f1 2c       	mov	r15, r1
    1326:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1328:	0f 2e       	mov	r0, r31
    132a:	f3 e1       	ldi	r31, 0x13	; 19
    132c:	cf 2e       	mov	r12, r31
    132e:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1330:	0f 2e       	mov	r0, r31
    1332:	f1 e1       	ldi	r31, 0x11	; 17
    1334:	bf 2e       	mov	r11, r31
    1336:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1338:	60 c0       	rjmp	.+192    	; 0x13fa <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    133a:	88 81       	ld	r24, Y
    133c:	83 31       	cpi	r24, 0x13	; 19
    133e:	c1 f0       	breq	.+48     	; 0x1370 <nwkTxTaskHandler+0x88>
    1340:	18 f4       	brcc	.+6      	; 0x1348 <nwkTxTaskHandler+0x60>
    1342:	82 31       	cpi	r24, 0x12	; 18
    1344:	39 f0       	breq	.+14     	; 0x1354 <nwkTxTaskHandler+0x6c>
    1346:	59 c0       	rjmp	.+178    	; 0x13fa <nwkTxTaskHandler+0x112>
    1348:	85 31       	cpi	r24, 0x15	; 21
    134a:	49 f1       	breq	.+82     	; 0x139e <nwkTxTaskHandler+0xb6>
    134c:	87 31       	cpi	r24, 0x17	; 23
    134e:	09 f4       	brne	.+2      	; 0x1352 <nwkTxTaskHandler+0x6a>
    1350:	45 c0       	rjmp	.+138    	; 0x13dc <nwkTxTaskHandler+0xf4>
    1352:	53 c0       	rjmp	.+166    	; 0x13fa <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1354:	fe 01       	movw	r30, r28
    1356:	ec 57       	subi	r30, 0x7C	; 124
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	91 81       	ldd	r25, Z+1	; 0x01
    135e:	89 2b       	or	r24, r25
    1360:	29 f0       	breq	.+10     	; 0x136c <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1362:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1364:	84 ec       	ldi	r24, 0xC4	; 196
    1366:	96 e0       	ldi	r25, 0x06	; 6
    1368:	c3 d1       	rcall	.+902    	; 0x16f0 <SYS_TimerStart>
    136a:	47 c0       	rjmp	.+142    	; 0x13fa <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    136c:	c8 82       	st	Y, r12
    136e:	45 c0       	rjmp	.+138    	; 0x13fa <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1370:	80 91 de 06 	lds	r24, 0x06DE	; 0x8006de <nwkTxPhyActiveFrame>
    1374:	90 91 df 06 	lds	r25, 0x06DF	; 0x8006df <nwkTxPhyActiveFrame+0x1>
    1378:	89 2b       	or	r24, r25
    137a:	09 f0       	breq	.+2      	; 0x137e <nwkTxTaskHandler+0x96>
    137c:	3e c0       	rjmp	.+124    	; 0x13fa <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    137e:	d0 93 df 06 	sts	0x06DF, r29	; 0x8006df <nwkTxPhyActiveFrame+0x1>
    1382:	c0 93 de 06 	sts	0x06DE, r28	; 0x8006de <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1386:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1388:	69 81       	ldd	r22, Y+1	; 0x01
    138a:	ce 01       	movw	r24, r28
    138c:	02 96       	adiw	r24, 0x02	; 2
    138e:	7c d0       	rcall	.+248    	; 0x1488 <PHY_DataReq>
          nwkIb.lock++;
    1390:	f8 01       	movw	r30, r16
    1392:	86 a1       	ldd	r24, Z+38	; 0x26
    1394:	97 a1       	ldd	r25, Z+39	; 0x27
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	97 a3       	std	Z+39, r25	; 0x27
    139a:	86 a3       	std	Z+38, r24	; 0x26
    139c:	2e c0       	rjmp	.+92     	; 0x13fa <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    139e:	fe 01       	movw	r30, r28
    13a0:	ed 57       	subi	r30, 0x7D	; 125
    13a2:	ff 4f       	sbci	r31, 0xFF	; 255
    13a4:	80 81       	ld	r24, Z
    13a6:	81 11       	cpse	r24, r1
    13a8:	17 c0       	rjmp	.+46     	; 0x13d8 <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    13aa:	2d 85       	ldd	r18, Y+13	; 0x0d
    13ac:	3e 85       	ldd	r19, Y+14	; 0x0e
    13ae:	f8 01       	movw	r30, r16
    13b0:	80 81       	ld	r24, Z
    13b2:	91 81       	ldd	r25, Z+1	; 0x01
    13b4:	28 17       	cp	r18, r24
    13b6:	39 07       	cpc	r19, r25
    13b8:	69 f4       	brne	.+26     	; 0x13d4 <nwkTxTaskHandler+0xec>
    13ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    13bc:	80 ff       	sbrs	r24, 0
    13be:	0a c0       	rjmp	.+20     	; 0x13d4 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    13c0:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    13c2:	fe 01       	movw	r30, r28
    13c4:	ec 57       	subi	r30, 0x7C	; 124
    13c6:	ff 4f       	sbci	r31, 0xFF	; 255
    13c8:	f1 82       	std	Z+1, r15	; 0x01
    13ca:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    13cc:	81 ed       	ldi	r24, 0xD1	; 209
    13ce:	96 e0       	ldi	r25, 0x06	; 6
    13d0:	8f d1       	rcall	.+798    	; 0x16f0 <SYS_TimerStart>
    13d2:	13 c0       	rjmp	.+38     	; 0x13fa <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    13d4:	d8 82       	st	Y, r13
    13d6:	11 c0       	rjmp	.+34     	; 0x13fa <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    13d8:	d8 82       	st	Y, r13
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    13dc:	ce 01       	movw	r24, r28
    13de:	b0 da       	rcall	.-2720   	; 0x940 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    13e0:	fe 01       	movw	r30, r28
    13e2:	e9 57       	subi	r30, 0x79	; 121
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	01 90       	ld	r0, Z+
    13e8:	f0 81       	ld	r31, Z
    13ea:	e0 2d       	mov	r30, r0
    13ec:	30 97       	sbiw	r30, 0x00	; 0
    13ee:	19 f4       	brne	.+6      	; 0x13f6 <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    13f0:	ce 01       	movw	r24, r28
    13f2:	84 d9       	rcall	.-3320   	; 0x6fc <nwkFrameFree>
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    13f6:	ce 01       	movw	r24, r28
    13f8:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    13fa:	ce 01       	movw	r24, r28
    13fc:	89 d9       	rcall	.-3310   	; 0x710 <nwkFrameNext>
    13fe:	ec 01       	movw	r28, r24
    1400:	89 2b       	or	r24, r25
    1402:	09 f0       	breq	.+2      	; 0x1406 <nwkTxTaskHandler+0x11e>
    1404:	9a cf       	rjmp	.-204    	; 0x133a <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	1f 91       	pop	r17
    140c:	0f 91       	pop	r16
    140e:	ff 90       	pop	r15
    1410:	ef 90       	pop	r14
    1412:	df 90       	pop	r13
    1414:	cf 90       	pop	r12
    1416:	bf 90       	pop	r11
    1418:	af 90       	pop	r10
    141a:	9f 90       	pop	r9
    141c:	08 95       	ret

0000141e <phyTrxSetState>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    141e:	93 e0       	ldi	r25, 0x03	; 3
    1420:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1424:	e1 e4       	ldi	r30, 0x41	; 65
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	90 81       	ld	r25, Z
    142a:	9f 71       	andi	r25, 0x1F	; 31
    142c:	98 30       	cpi	r25, 0x08	; 8
    142e:	e1 f7       	brne	.-8      	; 0x1428 <phyTrxSetState+0xa>
    1430:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1434:	e1 e4       	ldi	r30, 0x41	; 65
    1436:	f1 e0       	ldi	r31, 0x01	; 1
    1438:	90 81       	ld	r25, Z
    143a:	9f 71       	andi	r25, 0x1F	; 31
    143c:	98 13       	cpse	r25, r24
    143e:	fc cf       	rjmp	.-8      	; 0x1438 <phyTrxSetState+0x1a>
    1440:	08 95       	ret

00001442 <phySetRxState>:
    1442:	88 e0       	ldi	r24, 0x08	; 8
    1444:	ec df       	rcall	.-40     	; 0x141e <phyTrxSetState>
    1446:	8f ef       	ldi	r24, 0xFF	; 255
    1448:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    144c:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <phyRxState>
    1450:	88 23       	and	r24, r24
    1452:	11 f0       	breq	.+4      	; 0x1458 <phySetRxState+0x16>
    1454:	86 e1       	ldi	r24, 0x16	; 22
    1456:	e3 cf       	rjmp	.-58     	; 0x141e <phyTrxSetState>
    1458:	08 95       	ret

0000145a <PHY_Init>:
    145a:	e9 e3       	ldi	r30, 0x39	; 57
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	80 81       	ld	r24, Z
    1460:	81 60       	ori	r24, 0x01	; 1
    1462:	80 83       	st	Z, r24
    1464:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <phyRxState>
    1468:	10 92 e0 06 	sts	0x06E0, r1	; 0x8006e0 <phyBand>
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <phyState>
    1472:	88 e0       	ldi	r24, 0x08	; 8
    1474:	d4 df       	rcall	.-88     	; 0x141e <phyTrxSetState>
    1476:	8b ee       	ldi	r24, 0xEB	; 235
    1478:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    147c:	ec e4       	ldi	r30, 0x4C	; 76
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	80 81       	ld	r24, Z
    1482:	80 68       	ori	r24, 0x80	; 128
    1484:	80 83       	st	Z, r24
    1486:	08 95       	ret

00001488 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	8c 01       	movw	r16, r24
    1490:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1492:	89 e1       	ldi	r24, 0x19	; 25
    1494:	c4 df       	rcall	.-120    	; 0x141e <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    149c:	82 e0       	ldi	r24, 0x02	; 2
    149e:	8c 0f       	add	r24, r28
    14a0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    14a4:	cc 23       	and	r28, r28
    14a6:	81 f0       	breq	.+32     	; 0x14c8 <PHY_DataReq+0x40>
    14a8:	f8 01       	movw	r30, r16
    14aa:	c1 50       	subi	r28, 0x01	; 1
    14ac:	2c 2f       	mov	r18, r28
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	c8 01       	movw	r24, r16
    14b6:	82 0f       	add	r24, r18
    14b8:	93 1f       	adc	r25, r19
    14ba:	a1 e8       	ldi	r26, 0x81	; 129
    14bc:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    14be:	21 91       	ld	r18, Z+
    14c0:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    14c2:	e8 17       	cp	r30, r24
    14c4:	f9 07       	cpc	r31, r25
    14c6:	d9 f7       	brne	.-10     	; 0x14be <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    14ce:	82 e0       	ldi	r24, 0x02	; 2
    14d0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    14dc:	1f 93       	push	r17
    14de:	cf 93       	push	r28
    14e0:	df 93       	push	r29
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <PHY_TaskHandler+0x8>
    14e4:	1f 92       	push	r1
    14e6:	1f 92       	push	r1
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    14ec:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <phyState>
    14f0:	82 30       	cpi	r24, 0x02	; 2
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <PHY_TaskHandler+0x1a>
    14f4:	65 c0       	rjmp	.+202    	; 0x15c0 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    14f6:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    14fa:	83 ff       	sbrs	r24, 3
    14fc:	3e c0       	rjmp	.+124    	; 0x157a <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    14fe:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1502:	6a 2f       	mov	r22, r26
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	ab 01       	movw	r20, r22
    1508:	4f 5f       	subi	r20, 0xFF	; 255
    150a:	5f 4f       	sbci	r21, 0xFF	; 255
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1512:	fc 01       	movw	r30, r24
    1514:	e0 58       	subi	r30, 0x80	; 128
    1516:	fe 4f       	sbci	r31, 0xFE	; 254
    1518:	30 81       	ld	r19, Z
    151a:	fc 01       	movw	r30, r24
    151c:	ee 51       	subi	r30, 0x1E	; 30
    151e:	f9 4f       	sbci	r31, 0xF9	; 249
    1520:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1522:	2f 5f       	subi	r18, 0xFF	; 255
    1524:	82 2f       	mov	r24, r18
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	84 17       	cp	r24, r20
    152a:	95 07       	cpc	r25, r21
    152c:	94 f3       	brlt	.-28     	; 0x1512 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    152e:	82 ee       	ldi	r24, 0xE2	; 226
    1530:	96 e0       	ldi	r25, 0x06	; 6
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1536:	a2 50       	subi	r26, 0x02	; 2
    1538:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    153a:	fb 01       	movw	r30, r22
    153c:	ee 51       	subi	r30, 0x1E	; 30
    153e:	f9 4f       	sbci	r31, 0xF9	; 249
    1540:	80 81       	ld	r24, Z
    1542:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1544:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    1548:	8a 55       	subi	r24, 0x5A	; 90
    154a:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	05 db       	rcall	.-2550   	; 0xb5c <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1552:	e1 e4       	ldi	r30, 0x41	; 65
    1554:	f1 e0       	ldi	r31, 0x01	; 1
    1556:	80 81       	ld	r24, Z
    1558:	8f 71       	andi	r24, 0x1F	; 31
    155a:	86 31       	cpi	r24, 0x16	; 22
    155c:	e1 f7       	brne	.-8      	; 0x1556 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    155e:	ef e4       	ldi	r30, 0x4F	; 79
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1568:	ec e4       	ldi	r30, 0x4C	; 76
    156a:	f1 e0       	ldi	r31, 0x01	; 1
    156c:	80 81       	ld	r24, Z
    156e:	8f 77       	andi	r24, 0x7F	; 127
    1570:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1572:	80 81       	ld	r24, Z
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	80 83       	st	Z, r24
    1578:	23 c0       	rjmp	.+70     	; 0x15c0 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    157a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    157e:	86 ff       	sbrs	r24, 6
    1580:	1f c0       	rjmp	.+62     	; 0x15c0 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1582:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1586:	8f 71       	andi	r24, 0x1F	; 31
    1588:	89 31       	cpi	r24, 0x19	; 25
    158a:	a9 f4       	brne	.+42     	; 0x15b6 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    158c:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1590:	12 95       	swap	r17
    1592:	16 95       	lsr	r17
    1594:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1596:	49 f0       	breq	.+18     	; 0x15aa <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1598:	13 30       	cpi	r17, 0x03	; 3
    159a:	21 f0       	breq	.+8      	; 0x15a4 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    159c:	15 30       	cpi	r17, 0x05	; 5
    159e:	21 f0       	breq	.+8      	; 0x15a8 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    15a0:	13 e0       	ldi	r17, 0x03	; 3
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    15a4:	11 e0       	ldi	r17, 0x01	; 1
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    15a8:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    15aa:	4b df       	rcall	.-362    	; 0x1442 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <phyState>

      PHY_DataConf(status);
    15b2:	81 2f       	mov	r24, r17
    15b4:	76 de       	rcall	.-788    	; 0x12a2 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    15b6:	ef e4       	ldi	r30, 0x4F	; 79
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	80 81       	ld	r24, Z
    15bc:	80 64       	ori	r24, 0x40	; 64
    15be:	80 83       	st	Z, r24
  }
}
    15c0:	0f 90       	pop	r0
    15c2:	0f 90       	pop	r0
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	08 95       	ret

000015d2 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    15d2:	0e 94 bb 00 	call	0x176	; 0x176 <HAL_Init>
  SYS_TimerInit();
    15d6:	6d d0       	rcall	.+218    	; 0x16b2 <SYS_TimerInit>
  PHY_Init();
    15d8:	40 df       	rcall	.-384    	; 0x145a <PHY_Init>
  NWK_Init();
    15da:	0c 94 2e 02 	jmp	0x45c	; 0x45c <NWK_Init>
    15de:	08 95       	ret

000015e0 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    15e0:	7d df       	rcall	.-262    	; 0x14dc <PHY_TaskHandler>
  NWK_TaskHandler();
    15e2:	0e 94 4e 02 	call	0x49c	; 0x49c <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    15e6:	8f c0       	rjmp	.+286    	; 0x1706 <SYS_TimerTaskHandler>
    15e8:	08 95       	ret

000015ea <placeTimer>:

      break;
    }
    prev = t;
  }
}
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	80 91 63 07 	lds	r24, 0x0763	; 0x800763 <timers>
    15f8:	90 91 64 07 	lds	r25, 0x0764	; 0x800764 <timers+0x1>
    15fc:	00 97       	sbiw	r24, 0x00	; 0
    15fe:	09 f4       	brne	.+2      	; 0x1602 <placeTimer+0x18>
    1600:	45 c0       	rjmp	.+138    	; 0x168c <placeTimer+0xa2>
    1602:	4e 81       	ldd	r20, Y+6	; 0x06
    1604:	5f 81       	ldd	r21, Y+7	; 0x07
    1606:	68 85       	ldd	r22, Y+8	; 0x08
    1608:	79 85       	ldd	r23, Y+9	; 0x09
    160a:	fc 01       	movw	r30, r24
    160c:	02 81       	ldd	r16, Z+2	; 0x02
    160e:	13 81       	ldd	r17, Z+3	; 0x03
    1610:	24 81       	ldd	r18, Z+4	; 0x04
    1612:	35 81       	ldd	r19, Z+5	; 0x05
    1614:	40 17       	cp	r20, r16
    1616:	51 07       	cpc	r21, r17
    1618:	62 07       	cpc	r22, r18
    161a:	73 07       	cpc	r23, r19
    161c:	60 f0       	brcs	.+24     	; 0x1636 <placeTimer+0x4c>
    161e:	dc 01       	movw	r26, r24
    1620:	17 c0       	rjmp	.+46     	; 0x1650 <placeTimer+0x66>
    1622:	02 81       	ldd	r16, Z+2	; 0x02
    1624:	13 81       	ldd	r17, Z+3	; 0x03
    1626:	24 81       	ldd	r18, Z+4	; 0x04
    1628:	35 81       	ldd	r19, Z+5	; 0x05
    162a:	40 17       	cp	r20, r16
    162c:	51 07       	cpc	r21, r17
    162e:	62 07       	cpc	r22, r18
    1630:	73 07       	cpc	r23, r19
    1632:	68 f4       	brcc	.+26     	; 0x164e <placeTimer+0x64>
    1634:	03 c0       	rjmp	.+6      	; 0x163c <placeTimer+0x52>
    1636:	fc 01       	movw	r30, r24
    1638:	a0 e0       	ldi	r26, 0x00	; 0
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	04 1b       	sub	r16, r20
    163e:	15 0b       	sbc	r17, r21
    1640:	26 0b       	sbc	r18, r22
    1642:	37 0b       	sbc	r19, r23
    1644:	02 83       	std	Z+2, r16	; 0x02
    1646:	13 83       	std	Z+3, r17	; 0x03
    1648:	24 83       	std	Z+4, r18	; 0x04
    164a:	35 83       	std	Z+5, r19	; 0x05
    164c:	0a c0       	rjmp	.+20     	; 0x1662 <placeTimer+0x78>
    164e:	df 01       	movw	r26, r30
    1650:	40 1b       	sub	r20, r16
    1652:	51 0b       	sbc	r21, r17
    1654:	62 0b       	sbc	r22, r18
    1656:	73 0b       	sbc	r23, r19
    1658:	ed 91       	ld	r30, X+
    165a:	fc 91       	ld	r31, X
    165c:	11 97       	sbiw	r26, 0x01	; 1
    165e:	30 97       	sbiw	r30, 0x00	; 0
    1660:	01 f7       	brne	.-64     	; 0x1622 <placeTimer+0x38>
    1662:	4a 83       	std	Y+2, r20	; 0x02
    1664:	5b 83       	std	Y+3, r21	; 0x03
    1666:	6c 83       	std	Y+4, r22	; 0x04
    1668:	7d 83       	std	Y+5, r23	; 0x05
    166a:	10 97       	sbiw	r26, 0x00	; 0
    166c:	41 f0       	breq	.+16     	; 0x167e <placeTimer+0x94>
    166e:	8d 91       	ld	r24, X+
    1670:	9c 91       	ld	r25, X
    1672:	11 97       	sbiw	r26, 0x01	; 1
    1674:	99 83       	std	Y+1, r25	; 0x01
    1676:	88 83       	st	Y, r24
    1678:	cd 93       	st	X+, r28
    167a:	dc 93       	st	X, r29
    167c:	15 c0       	rjmp	.+42     	; 0x16a8 <placeTimer+0xbe>
    167e:	99 83       	std	Y+1, r25	; 0x01
    1680:	88 83       	st	Y, r24
    1682:	d0 93 64 07 	sts	0x0764, r29	; 0x800764 <timers+0x1>
    1686:	c0 93 63 07 	sts	0x0763, r28	; 0x800763 <timers>
    168a:	0e c0       	rjmp	.+28     	; 0x16a8 <placeTimer+0xbe>
    168c:	19 82       	std	Y+1, r1	; 0x01
    168e:	18 82       	st	Y, r1
    1690:	8e 81       	ldd	r24, Y+6	; 0x06
    1692:	9f 81       	ldd	r25, Y+7	; 0x07
    1694:	a8 85       	ldd	r26, Y+8	; 0x08
    1696:	b9 85       	ldd	r27, Y+9	; 0x09
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	9b 83       	std	Y+3, r25	; 0x03
    169c:	ac 83       	std	Y+4, r26	; 0x04
    169e:	bd 83       	std	Y+5, r27	; 0x05
    16a0:	d0 93 64 07 	sts	0x0764, r29	; 0x800764 <timers+0x1>
    16a4:	c0 93 63 07 	sts	0x0763, r28	; 0x800763 <timers>
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <SYS_TimerInit>:
    16b2:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <timers+0x1>
    16b6:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <timers>
    16ba:	08 95       	ret

000016bc <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    16bc:	e0 91 63 07 	lds	r30, 0x0763	; 0x800763 <timers>
    16c0:	f0 91 64 07 	lds	r31, 0x0764	; 0x800764 <timers+0x1>
    16c4:	30 97       	sbiw	r30, 0x00	; 0
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <SYS_TimerStarted+0x28>
    if (t == timer)
    16c8:	e8 17       	cp	r30, r24
    16ca:	f9 07       	cpc	r31, r25
    16cc:	21 f4       	brne	.+8      	; 0x16d6 <SYS_TimerStarted+0x1a>
    16ce:	0c c0       	rjmp	.+24     	; 0x16e8 <SYS_TimerStarted+0x2c>
    16d0:	8e 17       	cp	r24, r30
    16d2:	9f 07       	cpc	r25, r31
    16d4:	59 f0       	breq	.+22     	; 0x16ec <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    16d6:	01 90       	ld	r0, Z+
    16d8:	f0 81       	ld	r31, Z
    16da:	e0 2d       	mov	r30, r0
    16dc:	30 97       	sbiw	r30, 0x00	; 0
    16de:	c1 f7       	brne	.-16     	; 0x16d0 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	08 95       	ret
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	08 95       	ret
    16ec:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    16ee:	08 95       	ret

000016f0 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    16f0:	cf 93       	push	r28
    16f2:	df 93       	push	r29
    16f4:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    16f6:	e2 df       	rcall	.-60     	; 0x16bc <SYS_TimerStarted>
    16f8:	81 11       	cpse	r24, r1
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <SYS_TimerStart+0x10>
    placeTimer(timer);
    16fc:	ce 01       	movw	r24, r28
    16fe:	75 df       	rcall	.-278    	; 0x15ea <placeTimer>
}
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	cf 93       	push	r28
    1710:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1712:	80 91 65 07 	lds	r24, 0x0765	; 0x800765 <halTimerIrqCount>
    1716:	88 23       	and	r24, r24
    1718:	09 f4       	brne	.+2      	; 0x171c <SYS_TimerTaskHandler+0x16>
    171a:	59 c0       	rjmp	.+178    	; 0x17ce <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    171c:	8f b7       	in	r24, 0x3f	; 63
    171e:	f8 94       	cli
    cnt = halTimerIrqCount;
    1720:	c0 90 65 07 	lds	r12, 0x0765	; 0x800765 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1724:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1728:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    172a:	d1 2c       	mov	r13, r1
    172c:	e1 2c       	mov	r14, r1
    172e:	f1 2c       	mov	r15, r1
    1730:	cc 0c       	add	r12, r12
    1732:	dd 1c       	adc	r13, r13
    1734:	ee 1c       	adc	r14, r14
    1736:	ff 1c       	adc	r15, r15
    1738:	d7 01       	movw	r26, r14
    173a:	c6 01       	movw	r24, r12
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	88 0f       	add	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	aa 1f       	adc	r26, r26
    174a:	bb 1f       	adc	r27, r27
    174c:	c8 0e       	add	r12, r24
    174e:	d9 1e       	adc	r13, r25
    1750:	ea 1e       	adc	r14, r26
    1752:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1754:	c0 91 63 07 	lds	r28, 0x0763	; 0x800763 <timers>
    1758:	d0 91 64 07 	lds	r29, 0x0764	; 0x800764 <timers+0x1>
    175c:	20 97       	sbiw	r28, 0x00	; 0
    175e:	b9 f1       	breq	.+110    	; 0x17ce <SYS_TimerTaskHandler+0xc8>
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	9b 81       	ldd	r25, Y+3	; 0x03
    1764:	ac 81       	ldd	r26, Y+4	; 0x04
    1766:	bd 81       	ldd	r27, Y+5	; 0x05
    1768:	c8 16       	cp	r12, r24
    176a:	d9 06       	cpc	r13, r25
    176c:	ea 06       	cpc	r14, r26
    176e:	fb 06       	cpc	r15, r27
    1770:	10 f1       	brcs	.+68     	; 0x17b6 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1772:	c8 1a       	sub	r12, r24
    1774:	d9 0a       	sbc	r13, r25
    1776:	ea 0a       	sbc	r14, r26
    1778:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    177a:	88 81       	ld	r24, Y
    177c:	99 81       	ldd	r25, Y+1	; 0x01
    177e:	90 93 64 07 	sts	0x0764, r25	; 0x800764 <timers+0x1>
    1782:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1786:	8a 85       	ldd	r24, Y+10	; 0x0a
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	11 f4       	brne	.+4      	; 0x1790 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    178c:	ce 01       	movw	r24, r28
    178e:	2d df       	rcall	.-422    	; 0x15ea <placeTimer>
    timer->handler(timer);
    1790:	eb 85       	ldd	r30, Y+11	; 0x0b
    1792:	fc 85       	ldd	r31, Y+12	; 0x0c
    1794:	ce 01       	movw	r24, r28
    1796:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1798:	c0 91 63 07 	lds	r28, 0x0763	; 0x800763 <timers>
    179c:	d0 91 64 07 	lds	r29, 0x0764	; 0x800764 <timers+0x1>
    17a0:	20 97       	sbiw	r28, 0x00	; 0
    17a2:	a9 f0       	breq	.+42     	; 0x17ce <SYS_TimerTaskHandler+0xc8>
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	ac 81       	ldd	r26, Y+4	; 0x04
    17aa:	bd 81       	ldd	r27, Y+5	; 0x05
    17ac:	c8 16       	cp	r12, r24
    17ae:	d9 06       	cpc	r13, r25
    17b0:	ea 06       	cpc	r14, r26
    17b2:	fb 06       	cpc	r15, r27
    17b4:	f0 f6       	brcc	.-68     	; 0x1772 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	9b 81       	ldd	r25, Y+3	; 0x03
    17ba:	ac 81       	ldd	r26, Y+4	; 0x04
    17bc:	bd 81       	ldd	r27, Y+5	; 0x05
    17be:	8c 19       	sub	r24, r12
    17c0:	9d 09       	sbc	r25, r13
    17c2:	ae 09       	sbc	r26, r14
    17c4:	bf 09       	sbc	r27, r15
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	9b 83       	std	Y+3, r25	; 0x03
    17ca:	ac 83       	std	Y+4, r26	; 0x04
    17cc:	bd 83       	std	Y+5, r27	; 0x05
}
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	08 95       	ret

000017dc <__floatunsisf>:
    17dc:	e8 94       	clt
    17de:	09 c0       	rjmp	.+18     	; 0x17f2 <__floatsisf+0x12>

000017e0 <__floatsisf>:
    17e0:	97 fb       	bst	r25, 7
    17e2:	3e f4       	brtc	.+14     	; 0x17f2 <__floatsisf+0x12>
    17e4:	90 95       	com	r25
    17e6:	80 95       	com	r24
    17e8:	70 95       	com	r23
    17ea:	61 95       	neg	r22
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	99 23       	and	r25, r25
    17f4:	a9 f0       	breq	.+42     	; 0x1820 <__floatsisf+0x40>
    17f6:	f9 2f       	mov	r31, r25
    17f8:	96 e9       	ldi	r25, 0x96	; 150
    17fa:	bb 27       	eor	r27, r27
    17fc:	93 95       	inc	r25
    17fe:	f6 95       	lsr	r31
    1800:	87 95       	ror	r24
    1802:	77 95       	ror	r23
    1804:	67 95       	ror	r22
    1806:	b7 95       	ror	r27
    1808:	f1 11       	cpse	r31, r1
    180a:	f8 cf       	rjmp	.-16     	; 0x17fc <__floatsisf+0x1c>
    180c:	fa f4       	brpl	.+62     	; 0x184c <__floatsisf+0x6c>
    180e:	bb 0f       	add	r27, r27
    1810:	11 f4       	brne	.+4      	; 0x1816 <__floatsisf+0x36>
    1812:	60 ff       	sbrs	r22, 0
    1814:	1b c0       	rjmp	.+54     	; 0x184c <__floatsisf+0x6c>
    1816:	6f 5f       	subi	r22, 0xFF	; 255
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	8f 4f       	sbci	r24, 0xFF	; 255
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	16 c0       	rjmp	.+44     	; 0x184c <__floatsisf+0x6c>
    1820:	88 23       	and	r24, r24
    1822:	11 f0       	breq	.+4      	; 0x1828 <__floatsisf+0x48>
    1824:	96 e9       	ldi	r25, 0x96	; 150
    1826:	11 c0       	rjmp	.+34     	; 0x184a <__floatsisf+0x6a>
    1828:	77 23       	and	r23, r23
    182a:	21 f0       	breq	.+8      	; 0x1834 <__floatsisf+0x54>
    182c:	9e e8       	ldi	r25, 0x8E	; 142
    182e:	87 2f       	mov	r24, r23
    1830:	76 2f       	mov	r23, r22
    1832:	05 c0       	rjmp	.+10     	; 0x183e <__floatsisf+0x5e>
    1834:	66 23       	and	r22, r22
    1836:	71 f0       	breq	.+28     	; 0x1854 <__floatsisf+0x74>
    1838:	96 e8       	ldi	r25, 0x86	; 134
    183a:	86 2f       	mov	r24, r22
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	60 e0       	ldi	r22, 0x00	; 0
    1840:	2a f0       	brmi	.+10     	; 0x184c <__floatsisf+0x6c>
    1842:	9a 95       	dec	r25
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	88 1f       	adc	r24, r24
    184a:	da f7       	brpl	.-10     	; 0x1842 <__floatsisf+0x62>
    184c:	88 0f       	add	r24, r24
    184e:	96 95       	lsr	r25
    1850:	87 95       	ror	r24
    1852:	97 f9       	bld	r25, 7
    1854:	08 95       	ret

00001856 <__udivmodsi4>:
    1856:	a1 e2       	ldi	r26, 0x21	; 33
    1858:	1a 2e       	mov	r1, r26
    185a:	aa 1b       	sub	r26, r26
    185c:	bb 1b       	sub	r27, r27
    185e:	fd 01       	movw	r30, r26
    1860:	0d c0       	rjmp	.+26     	; 0x187c <__udivmodsi4_ep>

00001862 <__udivmodsi4_loop>:
    1862:	aa 1f       	adc	r26, r26
    1864:	bb 1f       	adc	r27, r27
    1866:	ee 1f       	adc	r30, r30
    1868:	ff 1f       	adc	r31, r31
    186a:	a2 17       	cp	r26, r18
    186c:	b3 07       	cpc	r27, r19
    186e:	e4 07       	cpc	r30, r20
    1870:	f5 07       	cpc	r31, r21
    1872:	20 f0       	brcs	.+8      	; 0x187c <__udivmodsi4_ep>
    1874:	a2 1b       	sub	r26, r18
    1876:	b3 0b       	sbc	r27, r19
    1878:	e4 0b       	sbc	r30, r20
    187a:	f5 0b       	sbc	r31, r21

0000187c <__udivmodsi4_ep>:
    187c:	66 1f       	adc	r22, r22
    187e:	77 1f       	adc	r23, r23
    1880:	88 1f       	adc	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	1a 94       	dec	r1
    1886:	69 f7       	brne	.-38     	; 0x1862 <__udivmodsi4_loop>
    1888:	60 95       	com	r22
    188a:	70 95       	com	r23
    188c:	80 95       	com	r24
    188e:	90 95       	com	r25
    1890:	9b 01       	movw	r18, r22
    1892:	ac 01       	movw	r20, r24
    1894:	bd 01       	movw	r22, r26
    1896:	cf 01       	movw	r24, r30
    1898:	08 95       	ret

0000189a <__divmodsi4>:
    189a:	05 2e       	mov	r0, r21
    189c:	97 fb       	bst	r25, 7
    189e:	16 f4       	brtc	.+4      	; 0x18a4 <__divmodsi4+0xa>
    18a0:	00 94       	com	r0
    18a2:	0f d0       	rcall	.+30     	; 0x18c2 <__negsi2>
    18a4:	57 fd       	sbrc	r21, 7
    18a6:	05 d0       	rcall	.+10     	; 0x18b2 <__divmodsi4_neg2>
    18a8:	d6 df       	rcall	.-84     	; 0x1856 <__udivmodsi4>
    18aa:	07 fc       	sbrc	r0, 7
    18ac:	02 d0       	rcall	.+4      	; 0x18b2 <__divmodsi4_neg2>
    18ae:	46 f4       	brtc	.+16     	; 0x18c0 <__divmodsi4_exit>
    18b0:	08 c0       	rjmp	.+16     	; 0x18c2 <__negsi2>

000018b2 <__divmodsi4_neg2>:
    18b2:	50 95       	com	r21
    18b4:	40 95       	com	r20
    18b6:	30 95       	com	r19
    18b8:	21 95       	neg	r18
    18ba:	3f 4f       	sbci	r19, 0xFF	; 255
    18bc:	4f 4f       	sbci	r20, 0xFF	; 255
    18be:	5f 4f       	sbci	r21, 0xFF	; 255

000018c0 <__divmodsi4_exit>:
    18c0:	08 95       	ret

000018c2 <__negsi2>:
    18c2:	90 95       	com	r25
    18c4:	80 95       	com	r24
    18c6:	70 95       	com	r23
    18c8:	61 95       	neg	r22
    18ca:	7f 4f       	sbci	r23, 0xFF	; 255
    18cc:	8f 4f       	sbci	r24, 0xFF	; 255
    18ce:	9f 4f       	sbci	r25, 0xFF	; 255
    18d0:	08 95       	ret

000018d2 <do_rand>:
    18d2:	8f 92       	push	r8
    18d4:	9f 92       	push	r9
    18d6:	af 92       	push	r10
    18d8:	bf 92       	push	r11
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	ec 01       	movw	r28, r24
    18e8:	68 81       	ld	r22, Y
    18ea:	79 81       	ldd	r23, Y+1	; 0x01
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	9b 81       	ldd	r25, Y+3	; 0x03
    18f0:	61 15       	cp	r22, r1
    18f2:	71 05       	cpc	r23, r1
    18f4:	81 05       	cpc	r24, r1
    18f6:	91 05       	cpc	r25, r1
    18f8:	21 f4       	brne	.+8      	; 0x1902 <do_rand+0x30>
    18fa:	64 e2       	ldi	r22, 0x24	; 36
    18fc:	79 ed       	ldi	r23, 0xD9	; 217
    18fe:	8b e5       	ldi	r24, 0x5B	; 91
    1900:	97 e0       	ldi	r25, 0x07	; 7
    1902:	2d e1       	ldi	r18, 0x1D	; 29
    1904:	33 ef       	ldi	r19, 0xF3	; 243
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	c7 df       	rcall	.-114    	; 0x189a <__divmodsi4>
    190c:	49 01       	movw	r8, r18
    190e:	5a 01       	movw	r10, r20
    1910:	9b 01       	movw	r18, r22
    1912:	ac 01       	movw	r20, r24
    1914:	a7 ea       	ldi	r26, 0xA7	; 167
    1916:	b1 e4       	ldi	r27, 0x41	; 65
    1918:	3a d0       	rcall	.+116    	; 0x198e <__muluhisi3>
    191a:	6b 01       	movw	r12, r22
    191c:	7c 01       	movw	r14, r24
    191e:	ac ee       	ldi	r26, 0xEC	; 236
    1920:	b4 ef       	ldi	r27, 0xF4	; 244
    1922:	a5 01       	movw	r20, r10
    1924:	94 01       	movw	r18, r8
    1926:	3f d0       	rcall	.+126    	; 0x19a6 <__mulohisi3>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	8c 0d       	add	r24, r12
    192e:	9d 1d       	adc	r25, r13
    1930:	ae 1d       	adc	r26, r14
    1932:	bf 1d       	adc	r27, r15
    1934:	b7 ff       	sbrs	r27, 7
    1936:	03 c0       	rjmp	.+6      	; 0x193e <do_rand+0x6c>
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	a1 09       	sbc	r26, r1
    193c:	b0 48       	sbci	r27, 0x80	; 128
    193e:	88 83       	st	Y, r24
    1940:	99 83       	std	Y+1, r25	; 0x01
    1942:	aa 83       	std	Y+2, r26	; 0x02
    1944:	bb 83       	std	Y+3, r27	; 0x03
    1946:	9f 77       	andi	r25, 0x7F	; 127
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	08 95       	ret

0000195e <rand_r>:
    195e:	b9 cf       	rjmp	.-142    	; 0x18d2 <do_rand>

00001960 <rand>:
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	92 e0       	ldi	r25, 0x02	; 2
    1964:	b6 cf       	rjmp	.-148    	; 0x18d2 <do_rand>

00001966 <srand>:
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    196e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1972:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    1976:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    197a:	08 95       	ret

0000197c <memcpy>:
    197c:	fb 01       	movw	r30, r22
    197e:	dc 01       	movw	r26, r24
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <memcpy+0xa>
    1982:	01 90       	ld	r0, Z+
    1984:	0d 92       	st	X+, r0
    1986:	41 50       	subi	r20, 0x01	; 1
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	d8 f7       	brcc	.-10     	; 0x1982 <memcpy+0x6>
    198c:	08 95       	ret

0000198e <__muluhisi3>:
    198e:	0f d0       	rcall	.+30     	; 0x19ae <__umulhisi3>
    1990:	a5 9f       	mul	r26, r21
    1992:	90 0d       	add	r25, r0
    1994:	b4 9f       	mul	r27, r20
    1996:	90 0d       	add	r25, r0
    1998:	a4 9f       	mul	r26, r20
    199a:	80 0d       	add	r24, r0
    199c:	91 1d       	adc	r25, r1
    199e:	11 24       	eor	r1, r1
    19a0:	08 95       	ret

000019a2 <__mulshisi3>:
    19a2:	b7 ff       	sbrs	r27, 7
    19a4:	f4 cf       	rjmp	.-24     	; 0x198e <__muluhisi3>

000019a6 <__mulohisi3>:
    19a6:	f3 df       	rcall	.-26     	; 0x198e <__muluhisi3>
    19a8:	82 1b       	sub	r24, r18
    19aa:	93 0b       	sbc	r25, r19
    19ac:	08 95       	ret

000019ae <__umulhisi3>:
    19ae:	a2 9f       	mul	r26, r18
    19b0:	b0 01       	movw	r22, r0
    19b2:	b3 9f       	mul	r27, r19
    19b4:	c0 01       	movw	r24, r0
    19b6:	a3 9f       	mul	r26, r19
    19b8:	70 0d       	add	r23, r0
    19ba:	81 1d       	adc	r24, r1
    19bc:	11 24       	eor	r1, r1
    19be:	91 1d       	adc	r25, r1
    19c0:	b2 9f       	mul	r27, r18
    19c2:	70 0d       	add	r23, r0
    19c4:	81 1d       	adc	r24, r1
    19c6:	11 24       	eor	r1, r1
    19c8:	91 1d       	adc	r25, r1
    19ca:	08 95       	ret

000019cc <_exit>:
    19cc:	f8 94       	cli

000019ce <__stop_program>:
    19ce:	ff cf       	rjmp	.-2      	; 0x19ce <__stop_program>
