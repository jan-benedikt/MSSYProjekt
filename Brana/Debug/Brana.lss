
Brana.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  00001ac2  00001b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000590  0080020c  0080020c  00001b62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000064e5  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f52  00000000  00000000  00008531  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029ba  00000000  00000000  0000b483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a70  00000000  00000000  0000de40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001eb0  00000000  00000000  0000e8b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000266a  00000000  00000000  00010760  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  00012dca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	da c0       	rjmp	.+436    	; 0x1ea <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__vector_36>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e2 ec       	ldi	r30, 0xC2	; 194
     14c:	fa e1       	ldi	r31, 0x1A	; 26
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	ac 30       	cpi	r26, 0x0C	; 12
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	27 e0       	ldi	r18, 0x07	; 7
     160:	ac e0       	ldi	r26, 0x0C	; 12
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ac 39       	cpi	r26, 0x9C	; 156
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	7f d1       	rcall	.+766    	; 0x46e <main>
     170:	0c 94 5f 0d 	jmp	0x1abe	; 0x1abe <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     176:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	a8 95       	wdr
     17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     182:	88 61       	ori	r24, 0x18	; 24
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     18c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     18e:	e1 e6       	ldi	r30, 0x61	; 97
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	80 83       	st	Z, r24
  CLKPR = 0;
     196:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     198:	78 94       	sei

  HAL_TimerInit();
     19a:	01 c0       	rjmp	.+2      	; 0x19e <HAL_TimerInit>
     19c:	08 95       	ret

0000019e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     19e:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <halTimerIrqCount>
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	97 e2       	ldi	r25, 0x27	; 39
     1a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     1ae:	e1 ea       	ldi	r30, 0xA1	; 161
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	88 e0       	ldi	r24, 0x08	; 8
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
     1bc:	e2 e7       	ldi	r30, 0x72	; 114
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	80 83       	st	Z, r24
     1c6:	08 95       	ret

000001c8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
  halTimerIrqCount++;
     1d4:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <halTimerIrqCount>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <halTimerIrqCount>
}
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
  halSleepTimerEvent = true;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
}
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_37>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	8f 93       	push	r24
     218:	ef 93       	push	r30
     21a:	ff 93       	push	r31
  udrEmpty = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     222:	e9 ec       	ldi	r30, 0xC9	; 201
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8f 7d       	andi	r24, 0xDF	; 223
     22a:	80 83       	st	Z, r24
}
     22c:	ff 91       	pop	r31
     22e:	ef 91       	pop	r30
     230:	8f 91       	pop	r24
     232:	0f 90       	pop	r0
     234:	0b be       	out	0x3b, r0	; 59
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	0b b6       	in	r0, 0x3b	; 59
     24c:	0f 92       	push	r0
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     266:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  uint8_t byte = UDRx;
     26a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     26e:	8c 71       	andi	r24, 0x1C	; 28
     270:	59 f5       	brne	.+86     	; 0x2c8 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     272:	ef e0       	ldi	r30, 0x0F	; 15
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	46 81       	ldd	r20, Z+6	; 0x06
     278:	57 81       	ldd	r21, Z+7	; 0x07
     27a:	84 81       	ldd	r24, Z+4	; 0x04
     27c:	95 81       	ldd	r25, Z+5	; 0x05
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	11 f1       	breq	.+68     	; 0x2c8 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     284:	40 85       	ldd	r20, Z+8	; 0x08
     286:	51 85       	ldd	r21, Z+9	; 0x09
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	93 81       	ldd	r25, Z+3	; 0x03
     28c:	bc 01       	movw	r22, r24
     28e:	6f 5f       	subi	r22, 0xFF	; 255
     290:	7f 4f       	sbci	r23, 0xFF	; 255
     292:	73 83       	std	Z+3, r23	; 0x03
     294:	62 83       	std	Z+2, r22	; 0x02
     296:	da 01       	movw	r26, r20
     298:	a8 0f       	add	r26, r24
     29a:	b9 1f       	adc	r27, r25
     29c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     29e:	22 81       	ldd	r18, Z+2	; 0x02
     2a0:	33 81       	ldd	r19, Z+3	; 0x03
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	95 81       	ldd	r25, Z+5	; 0x05
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <__vector_36+0x74>
      rxFifo.tail = 0;
     2ac:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <rxFifo+0x3>
     2b0:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <rxFifo+0x2>
    rxFifo.bytes++;
     2b4:	ef e0       	ldi	r30, 0x0F	; 15
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	86 81       	ldd	r24, Z+6	; 0x06
     2ba:	97 81       	ldd	r25, Z+7	; 0x07
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	97 83       	std	Z+7, r25	; 0x07
     2c0:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0b be       	out	0x3b, r0	; 59
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <send>:
 */ 

#include "communication.h"

void send(uint16_t adresa, uint8_t endpoint, uint8_t *data, uint8_t delka){
	appDataReq.dstAddr = adresa;
     2ee:	e9 e1       	ldi	r30, 0x19	; 25
     2f0:	f2 e0       	ldi	r31, 0x02	; 2
     2f2:	96 83       	std	Z+6, r25	; 0x06
     2f4:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = endpoint;
     2f6:	67 83       	std	Z+7, r22	; 0x07
	appDataReq.srcEndpoint = endpoint;
     2f8:	60 87       	std	Z+8, r22	; 0x08
	appDataReq.data = data;
     2fa:	53 87       	std	Z+11, r21	; 0x0b
     2fc:	42 87       	std	Z+10, r20	; 0x0a
	appDataReq.size = delka;
     2fe:	24 87       	std	Z+12, r18	; 0x0c
	NWK_DataReq(&appDataReq);
     300:	cf 01       	movw	r24, r30
     302:	22 c1       	rjmp	.+580    	; 0x548 <NWK_DataReq>
     304:	08 95       	ret

00000306 <UART_SendChar>:
uint8_t UART_GetChar( void )
{
	while ( !(UCSR1A & (1<<RXC0)) )
	;
	return UDR1;
}
     306:	e8 ec       	ldi	r30, 0xC8	; 200
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	90 81       	ld	r25, Z
     30c:	95 ff       	sbrs	r25, 5
     30e:	fd cf       	rjmp	.-6      	; 0x30a <UART_SendChar+0x4>
     310:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     314:	08 95       	ret

00000316 <UART_Clc>:

void UART_Clc(){
	UART_SendChar(27);   // this is the escape
     316:	8b e1       	ldi	r24, 0x1B	; 27
     318:	f6 df       	rcall	.-20     	; 0x306 <UART_SendChar>
	UART_SendChar('[');
     31a:	8b e5       	ldi	r24, 0x5B	; 91
     31c:	f4 df       	rcall	.-24     	; 0x306 <UART_SendChar>
	UART_SendChar('2');
     31e:	82 e3       	ldi	r24, 0x32	; 50
     320:	f2 df       	rcall	.-28     	; 0x306 <UART_SendChar>
	UART_SendChar('J');  // uppercase J
     322:	8a e4       	ldi	r24, 0x4A	; 74
     324:	f0 cf       	rjmp	.-32     	; 0x306 <UART_SendChar>
     326:	08 95       	ret

00000328 <UART_SendString>:
void UART_HomePos(){
	UART_SendString("\033[H");
}

void UART_SendString(char *text)
{
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
	while (*text != 0x00)
     32e:	88 81       	ld	r24, Y
     330:	88 23       	and	r24, r24
     332:	29 f0       	breq	.+10     	; 0x33e <UART_SendString+0x16>
     334:	21 96       	adiw	r28, 0x01	; 1
	{
		UART_SendChar(*text);
     336:	e7 df       	rcall	.-50     	; 0x306 <UART_SendChar>
	UART_SendString("\033[H");
}

void UART_SendString(char *text)
{
	while (*text != 0x00)
     338:	89 91       	ld	r24, Y+
     33a:	81 11       	cpse	r24, r1
     33c:	fc cf       	rjmp	.-8      	; 0x336 <UART_SendString+0xe>
	{
		UART_SendChar(*text);
		text++;
	}
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	08 95       	ret

00000344 <UART_HomePos>:
	UART_SendChar('2');
	UART_SendChar('J');  // uppercase J
}

void UART_HomePos(){
	UART_SendString("\033[H");
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	ef cf       	rjmp	.-34     	; 0x328 <UART_SendString>
     34a:	08 95       	ret

0000034c <UART_init>:
 */ 
#include "UART.h"
#include <string.h>
#include <avr/interrupt.h>

void UART_init(int Baudrate){
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	00 d0       	rcall	.+0      	; 0x35a <UART_init+0xe>
     35a:	1f 92       	push	r1
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
	volatile double test=((8000000/16)/Baudrate)-1;
     360:	9c 01       	movw	r18, r24
     362:	99 0f       	add	r25, r25
     364:	44 0b       	sbc	r20, r20
     366:	55 0b       	sbc	r21, r21
     368:	60 e2       	ldi	r22, 0x20	; 32
     36a:	71 ea       	ldi	r23, 0xA1	; 161
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 c6 0c 	call	0x198c	; 0x198c <__divmodsi4>
     374:	69 01       	movw	r12, r18
     376:	7a 01       	movw	r14, r20
     378:	ca 01       	movw	r24, r20
     37a:	b9 01       	movw	r22, r18
     37c:	61 50       	subi	r22, 0x01	; 1
     37e:	71 09       	sbc	r23, r1
     380:	81 09       	sbc	r24, r1
     382:	91 09       	sbc	r25, r1
     384:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <__floatsisf>
     388:	69 83       	std	Y+1, r22	; 0x01
     38a:	7a 83       	std	Y+2, r23	; 0x02
     38c:	8b 83       	std	Y+3, r24	; 0x03
     38e:	9c 83       	std	Y+4, r25	; 0x04
	int ubrr=((F_CPU/16/Baudrate)-1);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	c8 1a       	sub	r12, r24
     394:	d1 08       	sbc	r13, r1
	UBRR1H = (uint8_t)(ubrr>>8);
     396:	d0 92 cd 00 	sts	0x00CD, r13	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
	UBRR1L = (uint8_t)ubrr;
     39a:	c0 92 cc 00 	sts	0x00CC, r12	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);// Povolit prijem/vydej
     39e:	e9 ec       	ldi	r30, 0xC9	; 201
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	88 e1       	ldi	r24, 0x18	; 24
     3a4:	80 83       	st	Z, r24
	UCSR1C = (1<<UCSZ01)|(1<<UCSZ00);// Async, Parity-Disabled, 1 Stop bit, 8 data bits
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>
	UCSR1B |= (1 << RXCIE1); //Povoleni preruseni pri prijmu
     3ac:	80 81       	ld	r24, Z
     3ae:	80 68       	ori	r24, 0x80	; 128
     3b0:	80 83       	st	Z, r24
	UART_Clc();
     3b2:	b1 df       	rcall	.-158    	; 0x316 <UART_Clc>
	UART_HomePos();
     3b4:	c7 df       	rcall	.-114    	; 0x344 <UART_HomePos>
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	cf 90       	pop	r12
     3ca:	08 95       	ret

000003cc <appTimerHandler>:
	return true;
}

static void appTimerHandler(SYS_Timer_t *timer)
{
	send(0x01, 1, 3, 1);
     3cc:	21 e0       	ldi	r18, 0x01	; 1
     3ce:	43 e0       	ldi	r20, 0x03	; 3
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	8a cf       	rjmp	.-236    	; 0x2ee <send>
     3da:	08 95       	ret

000003dc <funkceObsluhy>:

static SYS_Timer_t appTimer;

//obsluha prichozich ramcu
static bool funkceObsluhy (NWK_DataInd_t *ind)
{
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	8c 01       	movw	r16, r24

	for (int p = 0;p< ind->size;p++){
     3e6:	dc 01       	movw	r26, r24
     3e8:	19 96       	adiw	r26, 0x09	; 9
     3ea:	8c 91       	ld	r24, X
     3ec:	88 23       	and	r24, r24
     3ee:	99 f0       	breq	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     3f0:	c0 e0       	ldi	r28, 0x00	; 0
     3f2:	d0 e0       	ldi	r29, 0x00	; 0
		UART_SendString(ind->data[p]);
     3f4:	d8 01       	movw	r26, r16
     3f6:	17 96       	adiw	r26, 0x07	; 7
     3f8:	ed 91       	ld	r30, X+
     3fa:	fc 91       	ld	r31, X
     3fc:	18 97       	sbiw	r26, 0x08	; 8
     3fe:	ec 0f       	add	r30, r28
     400:	fd 1f       	adc	r31, r29
     402:	80 81       	ld	r24, Z
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	90 df       	rcall	.-224    	; 0x328 <UART_SendString>

//obsluha prichozich ramcu
static bool funkceObsluhy (NWK_DataInd_t *ind)
{

	for (int p = 0;p< ind->size;p++){
     408:	21 96       	adiw	r28, 0x01	; 1
     40a:	f8 01       	movw	r30, r16
     40c:	21 85       	ldd	r18, Z+9	; 0x09
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	c2 17       	cp	r28, r18
     412:	d3 07       	cpc	r29, r19
     414:	7c f3       	brlt	.-34     	; 0x3f4 <funkceObsluhy+0x18>
		UART_SendString(ind->data[p]);
	}
	
	UART_init(9600);
     416:	80 e8       	ldi	r24, 0x80	; 128
     418:	95 e2       	ldi	r25, 0x25	; 37
     41a:	98 df       	rcall	.-208    	; 0x34c <UART_init>
	UART_SendString("\r\n");
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	83 df       	rcall	.-250    	; 0x328 <UART_SendString>
	return true;
}
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	08 95       	ret

0000042e <appInit>:
	send(0x01, 1, 3, 1);
	(void)timer;
}

void appInit(){
	 NWK_SetAddr(APP_ADDR);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	47 d0       	rcall	.+142    	; 0x4c2 <NWK_SetAddr>
	 NWK_SetPanId(APP_PANID);
     434:	87 e6       	ldi	r24, 0x67	; 103
     436:	95 e4       	ldi	r25, 0x45	; 69
     438:	4b d0       	rcall	.+150    	; 0x4d0 <NWK_SetPanId>
	 PHY_SetChannel(APP_CHANNEL);
     43a:	8f e0       	ldi	r24, 0x0F	; 15
     43c:	0e 94 90 0a 	call	0x1520	; 0x1520 <PHY_SetChannel>
	 #ifdef PHY_AT86RF212
	 PHY_SetBand(APP_BAND);
	 PHY_SetModulation(APP_MODULATION);
	 #endif
	 PHY_SetRxState(true);
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	0e 94 8c 0a 	call	0x1518	; 0x1518 <PHY_SetRxState>
	
	NWK_OpenEndpoint(APP_ENDPOINT, funkceObsluhy);
     446:	6e ee       	ldi	r22, 0xEE	; 238
     448:	71 e0       	ldi	r23, 0x01	; 1
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	48 d0       	rcall	.+144    	; 0x4de <NWK_OpenEndpoint>
	
	  HAL_BoardInit();

	  appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     44e:	ea e2       	ldi	r30, 0x2A	; 42
     450:	f2 e0       	ldi	r31, 0x02	; 2
     452:	84 e1       	ldi	r24, 0x14	; 20
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	86 83       	std	Z+6, r24	; 0x06
     45c:	97 83       	std	Z+7, r25	; 0x07
     45e:	a0 87       	std	Z+8, r26	; 0x08
     460:	b1 87       	std	Z+9, r27	; 0x09
	  appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     462:	12 86       	std	Z+10, r1	; 0x0a
	  appTimer.handler = appTimerHandler;
     464:	86 ee       	ldi	r24, 0xE6	; 230
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	94 87       	std	Z+12, r25	; 0x0c
     46a:	83 87       	std	Z+11, r24	; 0x0b
     46c:	08 95       	ret

0000046e <main>:
	}
}

int main(void)
{	
	UART_init(9600);
     46e:	80 e8       	ldi	r24, 0x80	; 128
     470:	95 e2       	ldi	r25, 0x25	; 37
     472:	6c df       	rcall	.-296    	; 0x34c <UART_init>
	SYS_Init();
     474:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <SYS_Init>
	appInit();
     478:	da df       	rcall	.-76     	; 0x42e <appInit>
	switch (appState)
	{
		case APP_STATE_INITIAL:
		{
			UART_SendString(appDataReq.data);
			appState = APP_STATE_IDLE;
     47a:	c1 e0       	ldi	r28, 0x01	; 1
	UART_init(9600);
	SYS_Init();
	appInit();
	while (1)
	{
		SYS_TaskHandler();
     47c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <SYS_TaskHandler>
	  appTimer.handler = appTimerHandler;
}

static void APP_TaskHandler(void)
{
	switch (appState)
     480:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <appState>
     484:	81 11       	cpse	r24, r1
     486:	fa cf       	rjmp	.-12     	; 0x47c <main+0xe>
	{
		case APP_STATE_INITIAL:
		{
			UART_SendString(appDataReq.data);
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	4d df       	rcall	.-358    	; 0x328 <UART_SendString>
			appState = APP_STATE_IDLE;
     48e:	c0 93 37 02 	sts	0x0237, r28	; 0x800237 <appState>
     492:	f4 cf       	rjmp	.-24     	; 0x47c <main+0xe>

00000494 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     494:	e4 e7       	ldi	r30, 0x74	; 116
     496:	f7 e0       	ldi	r31, 0x07	; 7
     498:	14 82       	std	Z+4, r1	; 0x04
     49a:	15 82       	std	Z+5, r1	; 0x05
     49c:	11 82       	std	Z+1, r1	; 0x01
     49e:	10 82       	st	Z, r1
     4a0:	17 a2       	std	Z+39, r1	; 0x27
     4a2:	16 a2       	std	Z+38, r1	; 0x26
     4a4:	ea e7       	ldi	r30, 0x7A	; 122
     4a6:	f7 e0       	ldi	r31, 0x07	; 7
     4a8:	8a e9       	ldi	r24, 0x9A	; 154
     4aa:	97 e0       	ldi	r25, 0x07	; 7
     4ac:	11 92       	st	Z+, r1
     4ae:	11 92       	st	Z+, r1
     4b0:	e8 17       	cp	r30, r24
     4b2:	f9 07       	cpc	r31, r25
     4b4:	d9 f7       	brne	.-10     	; 0x4ac <NWK_Init+0x18>
     4b6:	47 d6       	rcall	.+3214   	; 0x1146 <nwkTxInit>
     4b8:	5e d3       	rcall	.+1724   	; 0xb76 <nwkRxInit>
     4ba:	0d d1       	rcall	.+538    	; 0x6d6 <nwkFrameInit>
     4bc:	40 d0       	rcall	.+128    	; 0x53e <nwkDataReqInit>
     4be:	88 c1       	rjmp	.+784    	; 0x7d0 <nwkRouteInit>
     4c0:	08 95       	ret

000004c2 <NWK_SetAddr>:
     4c2:	90 93 75 07 	sts	0x0775, r25	; 0x800775 <nwkIb+0x1>
     4c6:	80 93 74 07 	sts	0x0774, r24	; 0x800774 <nwkIb>
     4ca:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <PHY_SetShortAddr>
     4ce:	08 95       	ret

000004d0 <NWK_SetPanId>:
     4d0:	90 93 77 07 	sts	0x0777, r25	; 0x800777 <nwkIb+0x3>
     4d4:	80 93 76 07 	sts	0x0776, r24	; 0x800776 <nwkIb+0x2>
     4d8:	0c 94 94 0a 	jmp	0x1528	; 0x1528 <PHY_SetPanId>
     4dc:	08 95       	ret

000004de <NWK_OpenEndpoint>:
     4de:	e8 2f       	mov	r30, r24
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ee 0f       	add	r30, r30
     4e4:	ff 1f       	adc	r31, r31
     4e6:	e6 58       	subi	r30, 0x86	; 134
     4e8:	f8 4f       	sbci	r31, 0xF8	; 248
     4ea:	71 83       	std	Z+1, r23	; 0x01
     4ec:	60 83       	st	Z, r22
     4ee:	08 95       	ret

000004f0 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     4f0:	89 d3       	rcall	.+1810   	; 0xc04 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     4f2:	24 d7       	rcall	.+3656   	; 0x133c <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     4f4:	4d c0       	rjmp	.+154    	; 0x590 <nwkDataReqTaskHandler>
     4f6:	08 95       	ret

000004f8 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     4f8:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <nwkDataReqQueue>
     4fc:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <nwkDataReqQueue+0x1>
     500:	30 97       	sbiw	r30, 0x00	; 0
     502:	d9 f0       	breq	.+54     	; 0x53a <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     504:	22 81       	ldd	r18, Z+2	; 0x02
     506:	33 81       	ldd	r19, Z+3	; 0x03
     508:	28 17       	cp	r18, r24
     50a:	39 07       	cpc	r19, r25
     50c:	89 f4       	brne	.+34     	; 0x530 <nwkDataReqTxConf+0x38>
     50e:	05 c0       	rjmp	.+10     	; 0x51a <nwkDataReqTxConf+0x22>
     510:	22 81       	ldd	r18, Z+2	; 0x02
     512:	33 81       	ldd	r19, Z+3	; 0x03
     514:	28 17       	cp	r18, r24
     516:	39 07       	cpc	r19, r25
     518:	59 f4       	brne	.+22     	; 0x530 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     51a:	dc 01       	movw	r26, r24
     51c:	ad 57       	subi	r26, 0x7D	; 125
     51e:	bf 4f       	sbci	r27, 0xFF	; 255
     520:	2c 91       	ld	r18, X
     522:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     524:	13 96       	adiw	r26, 0x03	; 3
     526:	2c 91       	ld	r18, X
     528:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     52a:	22 e0       	ldi	r18, 0x02	; 2
     52c:	24 83       	std	Z+4, r18	; 0x04
      break;
     52e:	05 c0       	rjmp	.+10     	; 0x53a <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     530:	01 90       	ld	r0, Z+
     532:	f0 81       	ld	r31, Z
     534:	e0 2d       	mov	r30, r0
     536:	30 97       	sbiw	r30, 0x00	; 0
     538:	59 f7       	brne	.-42     	; 0x510 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     53a:	0a c1       	rjmp	.+532    	; 0x750 <nwkFrameFree>
     53c:	08 95       	ret

0000053e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     53e:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <nwkDataReqQueue+0x1>
     542:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <nwkDataReqQueue>
     546:	08 95       	ret

00000548 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     548:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     54a:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     54c:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     54e:	13 82       	std	Z+3, r1	; 0x03
     550:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     552:	a4 e7       	ldi	r26, 0x74	; 116
     554:	b7 e0       	ldi	r27, 0x07	; 7
     556:	96 96       	adiw	r26, 0x26	; 38
     558:	8d 91       	ld	r24, X+
     55a:	9c 91       	ld	r25, X
     55c:	97 97       	sbiw	r26, 0x27	; 39
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	97 96       	adiw	r26, 0x27	; 39
     562:	9c 93       	st	X, r25
     564:	8e 93       	st	-X, r24
     566:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     568:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <nwkDataReqQueue>
     56c:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <nwkDataReqQueue+0x1>
     570:	00 97       	sbiw	r24, 0x00	; 0
     572:	39 f4       	brne	.+14     	; 0x582 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     574:	11 82       	std	Z+1, r1	; 0x01
     576:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     578:	f0 93 39 02 	sts	0x0239, r31	; 0x800239 <nwkDataReqQueue+0x1>
     57c:	e0 93 38 02 	sts	0x0238, r30	; 0x800238 <nwkDataReqQueue>
     580:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     582:	91 83       	std	Z+1, r25	; 0x01
     584:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     586:	f0 93 39 02 	sts	0x0239, r31	; 0x800239 <nwkDataReqQueue+0x1>
     58a:	e0 93 38 02 	sts	0x0238, r30	; 0x800238 <nwkDataReqQueue>
     58e:	08 95       	ret

00000590 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     590:	0f 93       	push	r16
     592:	1f 93       	push	r17
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     598:	e0 91 38 02 	lds	r30, 0x0238	; 0x800238 <nwkDataReqQueue>
     59c:	f0 91 39 02 	lds	r31, 0x0239	; 0x800239 <nwkDataReqQueue+0x1>
     5a0:	30 97       	sbiw	r30, 0x00	; 0
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <nwkDataReqTaskHandler+0x16>
     5a4:	93 c0       	rjmp	.+294    	; 0x6cc <nwkDataReqTaskHandler+0x13c>
     5a6:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     5a8:	8c 81       	ldd	r24, Y+4	; 0x04
     5aa:	88 23       	and	r24, r24
     5ac:	21 f0       	breq	.+8      	; 0x5b6 <nwkDataReqTaskHandler+0x26>
     5ae:	82 30       	cpi	r24, 0x02	; 2
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <nwkDataReqTaskHandler+0x24>
     5b2:	66 c0       	rjmp	.+204    	; 0x680 <nwkDataReqTaskHandler+0xf0>
     5b4:	85 c0       	rjmp	.+266    	; 0x6c0 <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     5b6:	96 d0       	rcall	.+300    	; 0x6e4 <nwkFrameAlloc>
     5b8:	8c 01       	movw	r16, r24
     5ba:	00 97       	sbiw	r24, 0x00	; 0
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     5c2:	8f 87       	std	Y+15, r24	; 0x0f
     5c4:	83 c0       	rjmp	.+262    	; 0x6cc <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     5c6:	9b 83       	std	Y+3, r25	; 0x03
     5c8:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     5ce:	f8 01       	movw	r30, r16
     5d0:	e9 57       	subi	r30, 0x79	; 121
     5d2:	ff 4f       	sbci	r31, 0xFF	; 255
     5d4:	8c e7       	ldi	r24, 0x7C	; 124
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	91 83       	std	Z+1, r25	; 0x01
     5da:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	89 85       	ldd	r24, Y+9	; 0x09
     5e0:	82 fb       	bst	r24, 2
     5e2:	88 27       	eor	r24, r24
     5e4:	80 f9       	bld	r24, 0
     5e6:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     5e8:	99 85       	ldd	r25, Y+9	; 0x09
     5ea:	d8 01       	movw	r26, r16
     5ec:	1b 96       	adiw	r26, 0x0b	; 11
     5ee:	8c 91       	ld	r24, X
     5f0:	1b 97       	sbiw	r26, 0x0b	; 11
     5f2:	90 fb       	bst	r25, 0
     5f4:	80 f9       	bld	r24, 0
     5f6:	1b 96       	adiw	r26, 0x0b	; 11
     5f8:	8c 93       	st	X, r24
     5fa:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     5fc:	99 85       	ldd	r25, Y+9	; 0x09
     5fe:	93 fb       	bst	r25, 3
     600:	99 27       	eor	r25, r25
     602:	90 f9       	bld	r25, 0
     604:	90 fb       	bst	r25, 0
     606:	82 f9       	bld	r24, 2
     608:	1b 96       	adiw	r26, 0x0b	; 11
     60a:	8c 93       	st	X, r24
     60c:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     60e:	e4 e7       	ldi	r30, 0x74	; 116
     610:	f7 e0       	ldi	r31, 0x07	; 7
     612:	84 81       	ldd	r24, Z+4	; 0x04
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	84 83       	std	Z+4, r24	; 0x04
     618:	1c 96       	adiw	r26, 0x0c	; 12
     61a:	8c 93       	st	X, r24
     61c:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     61e:	80 81       	ld	r24, Z
     620:	91 81       	ldd	r25, Z+1	; 0x01
     622:	1e 96       	adiw	r26, 0x0e	; 14
     624:	9c 93       	st	X, r25
     626:	8e 93       	st	-X, r24
     628:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     62a:	8d 81       	ldd	r24, Y+5	; 0x05
     62c:	9e 81       	ldd	r25, Y+6	; 0x06
     62e:	50 96       	adiw	r26, 0x10	; 16
     630:	9c 93       	st	X, r25
     632:	8e 93       	st	-X, r24
     634:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     636:	88 85       	ldd	r24, Y+8	; 0x08
     638:	98 2f       	mov	r25, r24
     63a:	9f 70       	andi	r25, 0x0F	; 15
     63c:	51 96       	adiw	r26, 0x11	; 17
     63e:	8c 91       	ld	r24, X
     640:	51 97       	sbiw	r26, 0x11	; 17
     642:	80 7f       	andi	r24, 0xF0	; 240
     644:	89 2b       	or	r24, r25
     646:	51 96       	adiw	r26, 0x11	; 17
     648:	8c 93       	st	X, r24
     64a:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     64c:	9f 81       	ldd	r25, Y+7	; 0x07
     64e:	92 95       	swap	r25
     650:	90 7f       	andi	r25, 0xF0	; 240
     652:	8f 70       	andi	r24, 0x0F	; 15
     654:	89 2b       	or	r24, r25
     656:	51 96       	adiw	r26, 0x11	; 17
     658:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     65a:	f8 01       	movw	r30, r16
     65c:	ef 57       	subi	r30, 0x7F	; 127
     65e:	ff 4f       	sbci	r31, 0xFF	; 255
     660:	4c 85       	ldd	r20, Y+12	; 0x0c
     662:	50 e0       	ldi	r21, 0x00	; 0
     664:	6a 85       	ldd	r22, Y+10	; 0x0a
     666:	7b 85       	ldd	r23, Y+11	; 0x0b
     668:	80 81       	ld	r24, Z
     66a:	91 81       	ldd	r25, Z+1	; 0x01
     66c:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <memcpy>
  frame->size += req->size;
     670:	f8 01       	movw	r30, r16
     672:	91 81       	ldd	r25, Z+1	; 0x01
     674:	8c 85       	ldd	r24, Y+12	; 0x0c
     676:	89 0f       	add	r24, r25
     678:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     67a:	c8 01       	movw	r24, r16
     67c:	87 d5       	rcall	.+2830   	; 0x118c <nwkTxFrame>
     67e:	26 c0       	rjmp	.+76     	; 0x6cc <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     680:	ce 17       	cp	r28, r30
     682:	df 07       	cpc	r29, r31
     684:	41 f4       	brne	.+16     	; 0x696 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     686:	88 81       	ld	r24, Y
     688:	99 81       	ldd	r25, Y+1	; 0x01
     68a:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <nwkDataReqQueue+0x1>
     68e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nwkDataReqQueue>
     692:	0a c0       	rjmp	.+20     	; 0x6a8 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     694:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     696:	80 81       	ld	r24, Z
     698:	91 81       	ldd	r25, Z+1	; 0x01
     69a:	c8 17       	cp	r28, r24
     69c:	d9 07       	cpc	r29, r25
     69e:	d1 f7       	brne	.-12     	; 0x694 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     6a0:	88 81       	ld	r24, Y
     6a2:	99 81       	ldd	r25, Y+1	; 0x01
     6a4:	91 83       	std	Z+1, r25	; 0x01
     6a6:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     6a8:	e4 e7       	ldi	r30, 0x74	; 116
     6aa:	f7 e0       	ldi	r31, 0x07	; 7
     6ac:	86 a1       	ldd	r24, Z+38	; 0x26
     6ae:	97 a1       	ldd	r25, Z+39	; 0x27
     6b0:	01 97       	sbiw	r24, 0x01	; 1
     6b2:	97 a3       	std	Z+39, r25	; 0x27
     6b4:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     6b6:	ed 85       	ldd	r30, Y+13	; 0x0d
     6b8:	fe 85       	ldd	r31, Y+14	; 0x0e
     6ba:	ce 01       	movw	r24, r28
     6bc:	19 95       	eicall
     6be:	06 c0       	rjmp	.+12     	; 0x6cc <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6c0:	09 90       	ld	r0, Y+
     6c2:	d8 81       	ld	r29, Y
     6c4:	c0 2d       	mov	r28, r0
     6c6:	20 97       	sbiw	r28, 0x00	; 0
     6c8:	09 f0       	breq	.+2      	; 0x6cc <nwkDataReqTaskHandler+0x13c>
     6ca:	6e cf       	rjmp	.-292    	; 0x5a8 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     6d6:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <nwkFrameFrames>
     6da:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <nwkFrameFrames+0x89>
     6de:	10 92 4c 03 	sts	0x034C, r1	; 0x80034c <nwkFrameFrames+0x112>
     6e2:	08 95       	ret

000006e4 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     6e4:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <nwkFrameFrames>
     6e8:	88 23       	and	r24, r24
     6ea:	71 f0       	breq	.+28     	; 0x708 <nwkFrameAlloc+0x24>
     6ec:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <nwkFrameFrames+0x89>
     6f0:	88 23       	and	r24, r24
     6f2:	39 f0       	breq	.+14     	; 0x702 <nwkFrameAlloc+0x1e>
     6f4:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <nwkFrameFrames+0x112>
     6f8:	81 11       	cpse	r24, r1
     6fa:	27 c0       	rjmp	.+78     	; 0x74a <nwkFrameAlloc+0x66>
     6fc:	82 e0       	ldi	r24, 0x02	; 2
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	05 c0       	rjmp	.+10     	; 0x70c <nwkFrameAlloc+0x28>
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	02 c0       	rjmp	.+4      	; 0x70c <nwkFrameAlloc+0x28>
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     70c:	49 e8       	ldi	r20, 0x89	; 137
     70e:	48 9f       	mul	r20, r24
     710:	90 01       	movw	r18, r0
     712:	49 9f       	mul	r20, r25
     714:	30 0d       	add	r19, r0
     716:	11 24       	eor	r1, r1
     718:	c9 01       	movw	r24, r18
     71a:	86 5c       	subi	r24, 0xC6	; 198
     71c:	9d 4f       	sbci	r25, 0xFD	; 253
     71e:	fc 01       	movw	r30, r24
     720:	11 92       	st	Z+, r1
     722:	4a 95       	dec	r20
     724:	e9 f7       	brne	.-6      	; 0x720 <nwkFrameAlloc+0x3c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     726:	40 e1       	ldi	r20, 0x10	; 16
     728:	fc 01       	movw	r30, r24
     72a:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     72c:	ef 57       	subi	r30, 0x7F	; 127
     72e:	ff 4f       	sbci	r31, 0xFF	; 255
     730:	24 5b       	subi	r18, 0xB4	; 180
     732:	3d 4f       	sbci	r19, 0xFD	; 253
     734:	31 83       	std	Z+1, r19	; 0x01
     736:	20 83       	st	Z, r18
      nwkIb.lock++;
     738:	e4 e7       	ldi	r30, 0x74	; 116
     73a:	f7 e0       	ldi	r31, 0x07	; 7
     73c:	26 a1       	ldd	r18, Z+38	; 0x26
     73e:	37 a1       	ldd	r19, Z+39	; 0x27
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	3f 4f       	sbci	r19, 0xFF	; 255
     744:	37 a3       	std	Z+39, r19	; 0x27
     746:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     748:	08 95       	ret
    }
  }
  return NULL;
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
}
     74e:	08 95       	ret

00000750 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     750:	fc 01       	movw	r30, r24
     752:	10 82       	st	Z, r1
  nwkIb.lock--;
     754:	e4 e7       	ldi	r30, 0x74	; 116
     756:	f7 e0       	ldi	r31, 0x07	; 7
     758:	86 a1       	ldd	r24, Z+38	; 0x26
     75a:	97 a1       	ldd	r25, Z+39	; 0x27
     75c:	01 97       	sbiw	r24, 0x01	; 1
     75e:	97 a3       	std	Z+39, r25	; 0x27
     760:	86 a3       	std	Z+38, r24	; 0x26
     762:	08 95       	ret

00000764 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	41 f0       	breq	.+16     	; 0x778 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     768:	fc 01       	movw	r30, r24
     76a:	e7 57       	subi	r30, 0x77	; 119
     76c:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	e5 3d       	cpi	r30, 0xD5	; 213
     772:	f8 07       	cpc	r31, r24
     774:	18 f0       	brcs	.+6      	; 0x77c <nwkFrameNext+0x18>
     776:	15 c0       	rjmp	.+42     	; 0x7a2 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     778:	ea e3       	ldi	r30, 0x3A	; 58
     77a:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     77c:	80 81       	ld	r24, Z
     77e:	88 23       	and	r24, r24
     780:	39 f0       	breq	.+14     	; 0x790 <nwkFrameNext+0x2c>
     782:	03 c0       	rjmp	.+6      	; 0x78a <nwkFrameNext+0x26>
     784:	80 81       	ld	r24, Z
     786:	88 23       	and	r24, r24
     788:	19 f0       	breq	.+6      	; 0x790 <nwkFrameNext+0x2c>
      return frame;
     78a:	8e 2f       	mov	r24, r30
     78c:	9f 2f       	mov	r25, r31
     78e:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     790:	e7 57       	subi	r30, 0x77	; 119
     792:	ff 4f       	sbci	r31, 0xFF	; 255
     794:	83 e0       	ldi	r24, 0x03	; 3
     796:	e5 3d       	cpi	r30, 0xD5	; 213
     798:	f8 07       	cpc	r31, r24
     79a:	a0 f3       	brcs	.-24     	; 0x784 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	08 95       	ret
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
}
     7a6:	08 95       	ret

000007a8 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     7a8:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     7aa:	dc 01       	movw	r26, r24
     7ac:	ad 57       	subi	r26, 0x7D	; 125
     7ae:	bf 4f       	sbci	r27, 0xFF	; 255
     7b0:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     7b2:	a4 e7       	ldi	r26, 0x74	; 116
     7b4:	b7 e0       	ldi	r27, 0x07	; 7
     7b6:	14 96       	adiw	r26, 0x04	; 4
     7b8:	9c 91       	ld	r25, X
     7ba:	14 97       	sbiw	r26, 0x04	; 4
     7bc:	9f 5f       	subi	r25, 0xFF	; 255
     7be:	14 96       	adiw	r26, 0x04	; 4
     7c0:	9c 93       	st	X, r25
     7c2:	14 97       	sbiw	r26, 0x04	; 4
     7c4:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     7c6:	8d 91       	ld	r24, X+
     7c8:	9c 91       	ld	r25, X
     7ca:	96 87       	std	Z+14, r25	; 0x0e
     7cc:	85 87       	std	Z+13, r24	; 0x0d
     7ce:	08 95       	ret

000007d0 <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     7d0:	aa ed       	ldi	r26, 0xDA	; 218
     7d2:	b3 e0       	ldi	r27, 0x03	; 3
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	4f ef       	ldi	r20, 0xFF	; 255
     7da:	5f ef       	ldi	r21, 0xFF	; 255
     7dc:	fd 01       	movw	r30, r26
     7de:	34 97       	sbiw	r30, 0x04	; 4
     7e0:	51 83       	std	Z+1, r21	; 0x01
     7e2:	40 83       	st	Z, r20
     7e4:	fc 01       	movw	r30, r24
     7e6:	ee 0f       	add	r30, r30
     7e8:	ff 1f       	adc	r31, r31
     7ea:	ee 0f       	add	r30, r30
     7ec:	ff 1f       	adc	r31, r31
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e8 1b       	sub	r30, r24
     7f4:	f9 0b       	sbc	r31, r25
     7f6:	eb 52       	subi	r30, 0x2B	; 43
     7f8:	fc 4f       	sbci	r31, 0xFC	; 252
     7fa:	20 81       	ld	r18, Z
     7fc:	2e 7f       	andi	r18, 0xFE	; 254
     7fe:	20 83       	st	Z, r18
     800:	1c 92       	st	X, r1
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	17 96       	adiw	r26, 0x07	; 7
     806:	84 36       	cpi	r24, 0x64	; 100
     808:	91 05       	cpc	r25, r1
     80a:	41 f7       	brne	.-48     	; 0x7dc <nwkRouteInit+0xc>
     80c:	08 95       	ret

0000080e <NWK_RouteFindEntry>:
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	e6 ed       	ldi	r30, 0xD6	; 214
     818:	f3 e0       	ldi	r31, 0x03	; 3
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	06 2f       	mov	r16, r22
     820:	10 e0       	ldi	r17, 0x00	; 0
     822:	40 81       	ld	r20, Z
     824:	51 81       	ldd	r21, Z+1	; 0x01
     826:	48 17       	cp	r20, r24
     828:	59 07       	cpc	r21, r25
     82a:	b1 f4       	brne	.+44     	; 0x858 <NWK_RouteFindEntry+0x4a>
     82c:	d9 01       	movw	r26, r18
     82e:	aa 0f       	add	r26, r26
     830:	bb 1f       	adc	r27, r27
     832:	aa 0f       	add	r26, r26
     834:	bb 1f       	adc	r27, r27
     836:	aa 0f       	add	r26, r26
     838:	bb 1f       	adc	r27, r27
     83a:	a2 1b       	sub	r26, r18
     83c:	b3 0b       	sbc	r27, r19
     83e:	ab 52       	subi	r26, 0x2B	; 43
     840:	bc 4f       	sbci	r27, 0xFC	; 252
     842:	4c 91       	ld	r20, X
     844:	46 95       	lsr	r20
     846:	41 70       	andi	r20, 0x01	; 1
     848:	c4 2f       	mov	r28, r20
     84a:	40 e0       	ldi	r20, 0x00	; 0
     84c:	d4 2f       	mov	r29, r20
     84e:	c0 17       	cp	r28, r16
     850:	d1 07       	cpc	r29, r17
     852:	11 f4       	brne	.+4      	; 0x858 <NWK_RouteFindEntry+0x4a>
     854:	cd 01       	movw	r24, r26
     856:	08 c0       	rjmp	.+16     	; 0x868 <NWK_RouteFindEntry+0x5a>
     858:	2f 5f       	subi	r18, 0xFF	; 255
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	37 96       	adiw	r30, 0x07	; 7
     85e:	24 36       	cpi	r18, 0x64	; 100
     860:	31 05       	cpc	r19, r1
     862:	f9 f6       	brne	.-66     	; 0x822 <NWK_RouteFindEntry+0x14>
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	08 95       	ret

00000872 <NWK_RouteNewEntry>:
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ea ed       	ldi	r30, 0xDA	; 218
     878:	f3 e0       	ldi	r31, 0x03	; 3
     87a:	26 e9       	ldi	r18, 0x96	; 150
     87c:	36 e0       	ldi	r19, 0x06	; 6
     87e:	c0 e0       	ldi	r28, 0x00	; 0
     880:	d0 e0       	ldi	r29, 0x00	; 0
     882:	df 01       	movw	r26, r30
     884:	15 97       	sbiw	r26, 0x05	; 5
     886:	8c 91       	ld	r24, X
     888:	80 fd       	sbrc	r24, 0
     88a:	0b c0       	rjmp	.+22     	; 0x8a2 <NWK_RouteNewEntry+0x30>
     88c:	80 81       	ld	r24, Z
     88e:	88 23       	and	r24, r24
     890:	69 f0       	breq	.+26     	; 0x8ac <NWK_RouteNewEntry+0x3a>
     892:	20 97       	sbiw	r28, 0x00	; 0
     894:	29 f0       	breq	.+10     	; 0x8a0 <NWK_RouteNewEntry+0x2e>
     896:	9d 81       	ldd	r25, Y+5	; 0x05
     898:	89 17       	cp	r24, r25
     89a:	18 f4       	brcc	.+6      	; 0x8a2 <NWK_RouteNewEntry+0x30>
     89c:	ed 01       	movw	r28, r26
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <NWK_RouteNewEntry+0x30>
     8a0:	ed 01       	movw	r28, r26
     8a2:	37 96       	adiw	r30, 0x07	; 7
     8a4:	e2 17       	cp	r30, r18
     8a6:	f3 07       	cpc	r31, r19
     8a8:	61 f7       	brne	.-40     	; 0x882 <NWK_RouteNewEntry+0x10>
     8aa:	de 01       	movw	r26, r28
     8ac:	8c 91       	ld	r24, X
     8ae:	8d 70       	andi	r24, 0x0D	; 13
     8b0:	80 63       	ori	r24, 0x30	; 48
     8b2:	8c 93       	st	X, r24
     8b4:	80 e8       	ldi	r24, 0x80	; 128
     8b6:	15 96       	adiw	r26, 0x05	; 5
     8b8:	8c 93       	st	X, r24
     8ba:	15 97       	sbiw	r26, 0x05	; 5
     8bc:	cd 01       	movw	r24, r26
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	08 95       	ret

000008c4 <NWK_RouteFreeEntry>:
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	80 fd       	sbrc	r24, 0
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <NWK_RouteFreeEntry+0x12>
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	9f ef       	ldi	r25, 0xFF	; 255
     8d0:	92 83       	std	Z+2, r25	; 0x02
     8d2:	81 83       	std	Z+1, r24	; 0x01
     8d4:	15 82       	std	Z+5, r1	; 0x05
     8d6:	08 95       	ret

000008d8 <NWK_RouteNextHop>:
     8d8:	9a df       	rcall	.-204    	; 0x80e <NWK_RouteFindEntry>
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	21 f0       	breq	.+8      	; 0x8e6 <NWK_RouteNextHop+0xe>
     8de:	fc 01       	movw	r30, r24
     8e0:	83 81       	ldd	r24, Z+3	; 0x03
     8e2:	94 81       	ldd	r25, Z+4	; 0x04
     8e4:	08 95       	ret
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	08 95       	ret

000008ec <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     8ec:	90 df       	rcall	.-224    	; 0x80e <NWK_RouteFindEntry>
  if (entry)
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
     8f2:	e8 cf       	rjmp	.-48     	; 0x8c4 <NWK_RouteFreeEntry>
     8f4:	08 95       	ret

000008f6 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     900:	01 85       	ldd	r16, Z+9	; 0x09
     902:	12 85       	ldd	r17, Z+10	; 0x0a
     904:	11 23       	and	r17, r17
     906:	2c f4       	brge	.+10     	; 0x912 <nwkRouteFrameReceived+0x1c>
     908:	85 85       	ldd	r24, Z+13	; 0x0d
     90a:	96 85       	ldd	r25, Z+14	; 0x0e
     90c:	08 17       	cp	r16, r24
     90e:	19 07       	cpc	r17, r25
     910:	e1 f5       	brne	.+120    	; 0x98a <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     912:	85 81       	ldd	r24, Z+5	; 0x05
     914:	96 81       	ldd	r25, Z+6	; 0x06
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	c1 f1       	breq	.+112    	; 0x98a <nwkRouteFrameReceived+0x94>
     91a:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	85 85       	ldd	r24, Z+13	; 0x0d
     920:	96 85       	ldd	r25, Z+14	; 0x0e
     922:	75 df       	rcall	.-278    	; 0x80e <NWK_RouteFindEntry>
     924:	fc 01       	movw	r30, r24

  if (entry)
     926:	89 2b       	or	r24, r25
     928:	a1 f0       	breq	.+40     	; 0x952 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     92a:	8f 81       	ldd	r24, Y+7	; 0x07
     92c:	98 85       	ldd	r25, Y+8	; 0x08
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	f9 f4       	brne	.+62     	; 0x970 <nwkRouteFrameReceived+0x7a>
     932:	20 91 74 07 	lds	r18, 0x0774	; 0x800774 <nwkIb>
     936:	30 91 75 07 	lds	r19, 0x0775	; 0x800775 <nwkIb+0x1>
     93a:	8f 85       	ldd	r24, Y+15	; 0x0f
     93c:	98 89       	ldd	r25, Y+16	; 0x10
     93e:	28 17       	cp	r18, r24
     940:	39 07       	cpc	r19, r25
     942:	b1 f4       	brne	.+44     	; 0x970 <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     944:	14 83       	std	Z+4, r17	; 0x04
     946:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     948:	80 81       	ld	r24, Z
     94a:	8f 70       	andi	r24, 0x0F	; 15
     94c:	80 63       	ori	r24, 0x30	; 48
     94e:	80 83       	st	Z, r24
     950:	0a c0       	rjmp	.+20     	; 0x966 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     952:	8f df       	rcall	.-226    	; 0x872 <NWK_RouteNewEntry>
     954:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     956:	8d 85       	ldd	r24, Y+13	; 0x0d
     958:	9e 85       	ldd	r25, Y+14	; 0x0e
     95a:	92 83       	std	Z+2, r25	; 0x02
     95c:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     95e:	89 85       	ldd	r24, Y+9	; 0x09
     960:	9a 85       	ldd	r25, Y+10	; 0x0a
     962:	94 83       	std	Z+4, r25	; 0x04
     964:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     966:	cd 57       	subi	r28, 0x7D	; 125
     968:	df 4f       	sbci	r29, 0xFF	; 255
     96a:	88 81       	ld	r24, Y
     96c:	86 83       	std	Z+6, r24	; 0x06
     96e:	0d c0       	rjmp	.+26     	; 0x98a <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     970:	83 81       	ldd	r24, Z+3	; 0x03
     972:	94 81       	ldd	r25, Z+4	; 0x04
     974:	08 17       	cp	r16, r24
     976:	19 07       	cpc	r17, r25
     978:	b1 f3       	breq	.-20     	; 0x966 <nwkRouteFrameReceived+0x70>
     97a:	de 01       	movw	r26, r28
     97c:	ad 57       	subi	r26, 0x7D	; 125
     97e:	bf 4f       	sbci	r27, 0xFF	; 255
     980:	9c 91       	ld	r25, X
     982:	86 81       	ldd	r24, Z+6	; 0x06
     984:	89 17       	cp	r24, r25
     986:	f0 f2       	brcs	.-68     	; 0x944 <nwkRouteFrameReceived+0x4e>
     988:	ee cf       	rjmp	.-36     	; 0x966 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	08 95       	ret

00000994 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     99a:	87 85       	ldd	r24, Z+15	; 0x0f
     99c:	90 89       	ldd	r25, Z+16	; 0x10
     99e:	8f 3f       	cpi	r24, 0xFF	; 255
     9a0:	2f ef       	ldi	r18, 0xFF	; 255
     9a2:	92 07       	cpc	r25, r18
     9a4:	d9 f1       	breq	.+118    	; 0xa1c <nwkRouteFrameSent+0x88>
     9a6:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     9a8:	63 85       	ldd	r22, Z+11	; 0x0b
     9aa:	63 fb       	bst	r22, 3
     9ac:	66 27       	eor	r22, r22
     9ae:	60 f9       	bld	r22, 0
     9b0:	2e df       	rcall	.-420    	; 0x80e <NWK_RouteFindEntry>
     9b2:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     9b4:	89 2b       	or	r24, r25
     9b6:	91 f1       	breq	.+100    	; 0xa1c <nwkRouteFrameSent+0x88>
     9b8:	8c 91       	ld	r24, X
     9ba:	80 fd       	sbrc	r24, 0
     9bc:	2f c0       	rjmp	.+94     	; 0xa1c <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     9be:	fe 01       	movw	r30, r28
     9c0:	ed 57       	subi	r30, 0x7D	; 125
     9c2:	ff 4f       	sbci	r31, 0xFF	; 255
     9c4:	80 81       	ld	r24, Z
     9c6:	81 11       	cpse	r24, r1
     9c8:	19 c0       	rjmp	.+50     	; 0x9fc <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     9ca:	8c 91       	ld	r24, X
     9cc:	8f 70       	andi	r24, 0x0F	; 15
     9ce:	80 63       	ori	r24, 0x30	; 48
     9d0:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     9d2:	15 96       	adiw	r26, 0x05	; 5
     9d4:	8c 91       	ld	r24, X
     9d6:	15 97       	sbiw	r26, 0x05	; 5
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	15 96       	adiw	r26, 0x05	; 5
     9dc:	8c 93       	st	X, r24
     9de:	8f 3f       	cpi	r24, 0xFF	; 255
     9e0:	e9 f4       	brne	.+58     	; 0xa1c <nwkRouteFrameSent+0x88>
     9e2:	ea ed       	ldi	r30, 0xDA	; 218
     9e4:	f3 e0       	ldi	r31, 0x03	; 3
     9e6:	26 e9       	ldi	r18, 0x96	; 150
     9e8:	36 e0       	ldi	r19, 0x06	; 6
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     9ea:	80 81       	ld	r24, Z
     9ec:	86 95       	lsr	r24
     9ee:	8f 5f       	subi	r24, 0xFF	; 255
     9f0:	80 83       	st	Z, r24
     9f2:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     9f4:	e2 17       	cp	r30, r18
     9f6:	f3 07       	cpc	r31, r19
     9f8:	c1 f7       	brne	.-16     	; 0x9ea <nwkRouteFrameSent+0x56>
     9fa:	10 c0       	rjmp	.+32     	; 0xa1c <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     9fc:	9c 91       	ld	r25, X
     9fe:	89 2f       	mov	r24, r25
     a00:	82 95       	swap	r24
     a02:	8f 70       	andi	r24, 0x0F	; 15
     a04:	81 5f       	subi	r24, 0xF1	; 241
     a06:	8f 70       	andi	r24, 0x0F	; 15
     a08:	28 2f       	mov	r18, r24
     a0a:	22 95       	swap	r18
     a0c:	20 7f       	andi	r18, 0xF0	; 240
     a0e:	9f 70       	andi	r25, 0x0F	; 15
     a10:	92 2b       	or	r25, r18
     a12:	9c 93       	st	X, r25
     a14:	81 11       	cpse	r24, r1
     a16:	02 c0       	rjmp	.+4      	; 0xa1c <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     a18:	cd 01       	movw	r24, r26
     a1a:	54 df       	rcall	.-344    	; 0x8c4 <NWK_RouteFreeEntry>
  }
}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     a28:	87 85       	ldd	r24, Z+15	; 0x0f
     a2a:	90 89       	ldd	r25, Z+16	; 0x10
     a2c:	8f 3f       	cpi	r24, 0xFF	; 255
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	92 07       	cpc	r25, r18
     a32:	29 f4       	brne	.+10     	; 0xa3e <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	90 87       	std	Z+8, r25	; 0x08
     a3a:	87 83       	std	Z+7, r24	; 0x07
     a3c:	0e c0       	rjmp	.+28     	; 0xa5a <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     a3e:	23 85       	ldd	r18, Z+11	; 0x0b
     a40:	22 ff       	sbrs	r18, 2
     a42:	03 c0       	rjmp	.+6      	; 0xa4a <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     a44:	90 87       	std	Z+8, r25	; 0x08
     a46:	87 83       	std	Z+7, r24	; 0x07
     a48:	08 c0       	rjmp	.+16     	; 0xa5a <nwkRoutePrepareTx+0x38>
     a4a:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     a4c:	63 85       	ldd	r22, Z+11	; 0x0b
     a4e:	63 fb       	bst	r22, 3
     a50:	66 27       	eor	r22, r22
     a52:	60 f9       	bld	r22, 0
     a54:	41 df       	rcall	.-382    	; 0x8d8 <NWK_RouteNextHop>
     a56:	98 87       	std	Y+8, r25	; 0x08
     a58:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     a60:	af 92       	push	r10
     a62:	bf 92       	push	r11
     a64:	cf 92       	push	r12
     a66:	df 92       	push	r13
     a68:	ef 92       	push	r14
     a6a:	ff 92       	push	r15
     a6c:	1f 93       	push	r17
     a6e:	cf 93       	push	r28
     a70:	df 93       	push	r29
     a72:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     a74:	1b 85       	ldd	r17, Y+11	; 0x0b
     a76:	13 fb       	bst	r17, 3
     a78:	11 27       	eor	r17, r17
     a7a:	10 f9       	bld	r17, 0
     a7c:	cf 84       	ldd	r12, Y+15	; 0x0f
     a7e:	d8 88       	ldd	r13, Y+16	; 0x10
     a80:	61 2f       	mov	r22, r17
     a82:	c6 01       	movw	r24, r12
     a84:	29 df       	rcall	.-430    	; 0x8d8 <NWK_RouteNextHop>
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	59 f0       	breq	.+22     	; 0xaa0 <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     a8a:	fe 01       	movw	r30, r28
     a8c:	e9 57       	subi	r30, 0x79	; 121
     a8e:	ff 4f       	sbci	r31, 0xFF	; 255
     a90:	11 82       	std	Z+1, r1	; 0x01
     a92:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     a94:	31 97       	sbiw	r30, 0x01	; 1
     a96:	82 e0       	ldi	r24, 0x02	; 2
     a98:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     a9a:	ce 01       	movw	r24, r28
     a9c:	77 d3       	rcall	.+1774   	; 0x118c <nwkTxFrame>
     a9e:	22 c0       	rjmp	.+68     	; 0xae4 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     aa0:	ad 84       	ldd	r10, Y+13	; 0x0d
     aa2:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     aa4:	1f de       	rcall	.-962    	; 0x6e4 <nwkFrameAlloc>
     aa6:	7c 01       	movw	r14, r24
     aa8:	00 97       	sbiw	r24, 0x00	; 0
     aaa:	d1 f0       	breq	.+52     	; 0xae0 <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     aac:	7d de       	rcall	.-774    	; 0x7a8 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     aae:	f7 01       	movw	r30, r14
     ab0:	81 81       	ldd	r24, Z+1	; 0x01
     ab2:	8a 5f       	subi	r24, 0xFA	; 250
     ab4:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     ab6:	e9 57       	subi	r30, 0x79	; 121
     ab8:	ff 4f       	sbci	r31, 0xFF	; 255
     aba:	11 82       	std	Z+1, r1	; 0x01
     abc:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     abe:	f7 01       	movw	r30, r14
     ac0:	b0 8a       	std	Z+16, r11	; 0x10
     ac2:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     ac4:	ef 57       	subi	r30, 0x7F	; 127
     ac6:	ff 4f       	sbci	r31, 0xFF	; 255
     ac8:	01 90       	ld	r0, Z+
     aca:	f0 81       	ld	r31, Z
     acc:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 83       	st	Z, r24
  command->srcAddr = src;
     ad2:	b2 82       	std	Z+2, r11	; 0x02
     ad4:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     ad6:	d4 82       	std	Z+4, r13	; 0x04
     ad8:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
     ada:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
     adc:	c7 01       	movw	r24, r14
     ade:	56 d3       	rcall	.+1708   	; 0x118c <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     ae0:	ce 01       	movw	r24, r28
     ae2:	36 de       	rcall	.-916    	; 0x750 <nwkFrameFree>
  }
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	ff 90       	pop	r15
     aec:	ef 90       	pop	r14
     aee:	df 90       	pop	r13
     af0:	cf 90       	pop	r12
     af2:	bf 90       	pop	r11
     af4:	af 90       	pop	r10
     af6:	08 95       	ret

00000af8 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     af8:	dc 01       	movw	r26, r24
     afa:	17 96       	adiw	r26, 0x07	; 7
     afc:	ed 91       	ld	r30, X+
     afe:	fc 91       	ld	r31, X
     b00:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     b02:	19 96       	adiw	r26, 0x09	; 9
     b04:	8c 91       	ld	r24, X
     b06:	86 30       	cpi	r24, 0x06	; 6
     b08:	31 f4       	brne	.+12     	; 0xb16 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     b0a:	65 81       	ldd	r22, Z+5	; 0x05
     b0c:	83 81       	ldd	r24, Z+3	; 0x03
     b0e:	94 81       	ldd	r25, Z+4	; 0x04
     b10:	ed de       	rcall	.-550    	; 0x8ec <nwkRouteRemove>

  return true;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     b16:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     b18:	08 95       	ret

00000b1a <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     b1a:	dc 01       	movw	r26, r24
     b1c:	19 96       	adiw	r26, 0x09	; 9
     b1e:	2c 91       	ld	r18, X
     b20:	19 97       	sbiw	r26, 0x09	; 9
     b22:	22 23       	and	r18, r18
     b24:	71 f0       	breq	.+28     	; 0xb42 <nwkRxServiceDataInd+0x28>
     b26:	17 96       	adiw	r26, 0x07	; 7
     b28:	ed 91       	ld	r30, X+
     b2a:	fc 91       	ld	r31, X
     b2c:	18 97       	sbiw	r26, 0x08	; 8
     b2e:	20 81       	ld	r18, Z
     b30:	22 23       	and	r18, r18
     b32:	19 f0       	breq	.+6      	; 0xb3a <nwkRxServiceDataInd+0x20>
     b34:	21 30       	cpi	r18, 0x01	; 1
     b36:	19 f0       	breq	.+6      	; 0xb3e <nwkRxServiceDataInd+0x24>
     b38:	06 c0       	rjmp	.+12     	; 0xb46 <nwkRxServiceDataInd+0x2c>
     b3a:	b9 c3       	rjmp	.+1906   	; 0x12ae <nwkTxAckReceived>
     b3c:	08 95       	ret
     b3e:	dc cf       	rjmp	.-72     	; 0xaf8 <nwkRouteErrorReceived>
     b40:	08 95       	ret
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	08 95       	ret
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret

00000b4a <nwkRxDuplicateRejectionTimerHandler>:
     b4a:	bc 01       	movw	r22, r24
     b4c:	e3 ea       	ldi	r30, 0xA3	; 163
     b4e:	f6 e0       	ldi	r31, 0x06	; 6
     b50:	25 ed       	ldi	r18, 0xD5	; 213
     b52:	36 e0       	ldi	r19, 0x06	; 6
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	51 e0       	ldi	r21, 0x01	; 1
     b58:	90 81       	ld	r25, Z
     b5a:	99 23       	and	r25, r25
     b5c:	19 f0       	breq	.+6      	; 0xb64 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     b5e:	91 50       	subi	r25, 0x01	; 1
     b60:	90 83       	st	Z, r25
     b62:	45 2f       	mov	r20, r21
     b64:	35 96       	adiw	r30, 0x05	; 5
     b66:	e2 17       	cp	r30, r18
     b68:	f3 07       	cpc	r31, r19
     b6a:	b1 f7       	brne	.-20     	; 0xb58 <nwkRxDuplicateRejectionTimerHandler+0xe>
     b6c:	44 23       	and	r20, r20
     b6e:	11 f0       	breq	.+4      	; 0xb74 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     b70:	cb 01       	movw	r24, r22
     b72:	37 c6       	rjmp	.+3182   	; 0x17e2 <SYS_TimerStart>
     b74:	08 95       	ret

00000b76 <nwkRxInit>:
     b76:	e3 ea       	ldi	r30, 0xA3	; 163
     b78:	f6 e0       	ldi	r31, 0x06	; 6
     b7a:	85 ed       	ldi	r24, 0xD5	; 213
     b7c:	96 e0       	ldi	r25, 0x06	; 6
     b7e:	10 82       	st	Z, r1
     b80:	35 96       	adiw	r30, 0x05	; 5
     b82:	e8 17       	cp	r30, r24
     b84:	f9 07       	cpc	r31, r25
     b86:	d9 f7       	brne	.-10     	; 0xb7e <nwkRxInit+0x8>
     b88:	e1 e9       	ldi	r30, 0x91	; 145
     b8a:	f6 e0       	ldi	r31, 0x06	; 6
     b8c:	84 e6       	ldi	r24, 0x64	; 100
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	97 83       	std	Z+7, r25	; 0x07
     b98:	a0 87       	std	Z+8, r26	; 0x08
     b9a:	b1 87       	std	Z+9, r27	; 0x09
     b9c:	12 86       	std	Z+10, r1	; 0x0a
     b9e:	85 ea       	ldi	r24, 0xA5	; 165
     ba0:	95 e0       	ldi	r25, 0x05	; 5
     ba2:	94 87       	std	Z+12, r25	; 0x0c
     ba4:	83 87       	std	Z+11, r24	; 0x0b
     ba6:	6d e8       	ldi	r22, 0x8D	; 141
     ba8:	75 e0       	ldi	r23, 0x05	; 5
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	98 cc       	rjmp	.-1744   	; 0x4de <NWK_OpenEndpoint>
     bae:	08 95       	ret

00000bb0 <PHY_DataInd>:
     bb0:	cf 93       	push	r28
     bb2:	df 93       	push	r29
     bb4:	dc 01       	movw	r26, r24
     bb6:	ed 91       	ld	r30, X+
     bb8:	fc 91       	ld	r31, X
     bba:	11 97       	sbiw	r26, 0x01	; 1
     bbc:	21 81       	ldd	r18, Z+1	; 0x01
     bbe:	28 38       	cpi	r18, 0x88	; 136
     bc0:	f1 f4       	brne	.+60     	; 0xbfe <PHY_DataInd+0x4e>
     bc2:	20 81       	ld	r18, Z
     bc4:	2f 7d       	andi	r18, 0xDF	; 223
     bc6:	21 34       	cpi	r18, 0x41	; 65
     bc8:	d1 f4       	brne	.+52     	; 0xbfe <PHY_DataInd+0x4e>
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	2c 91       	ld	r18, X
     bce:	20 31       	cpi	r18, 0x10	; 16
     bd0:	b0 f0       	brcs	.+44     	; 0xbfe <PHY_DataInd+0x4e>
     bd2:	ec 01       	movw	r28, r24
     bd4:	87 dd       	rcall	.-1266   	; 0x6e4 <nwkFrameAlloc>
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	91 f0       	breq	.+36     	; 0xbfe <PHY_DataInd+0x4e>
     bda:	20 e2       	ldi	r18, 0x20	; 32
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
     be0:	2a 81       	ldd	r18, Y+2	; 0x02
     be2:	21 83       	std	Z+1, r18	; 0x01
     be4:	2b 81       	ldd	r18, Y+3	; 0x03
     be6:	ed 57       	subi	r30, 0x7D	; 125
     be8:	ff 4f       	sbci	r31, 0xFF	; 255
     bea:	20 83       	st	Z, r18
     bec:	2c 81       	ldd	r18, Y+4	; 0x04
     bee:	31 96       	adiw	r30, 0x01	; 1
     bf0:	20 83       	st	Z, r18
     bf2:	4a 81       	ldd	r20, Y+2	; 0x02
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	68 81       	ld	r22, Y
     bf8:	79 81       	ldd	r23, Y+1	; 0x01
     bfa:	02 96       	adiw	r24, 0x02	; 2
     bfc:	38 d7       	rcall	.+3696   	; 0x1a6e <memcpy>
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	08 95       	ret

00000c04 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     c04:	2f 92       	push	r2
     c06:	3f 92       	push	r3
     c08:	4f 92       	push	r4
     c0a:	5f 92       	push	r5
     c0c:	6f 92       	push	r6
     c0e:	7f 92       	push	r7
     c10:	8f 92       	push	r8
     c12:	9f 92       	push	r9
     c14:	af 92       	push	r10
     c16:	bf 92       	push	r11
     c18:	cf 92       	push	r12
     c1a:	df 92       	push	r13
     c1c:	ef 92       	push	r14
     c1e:	ff 92       	push	r15
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	2e 97       	sbiw	r28, 0x0e	; 14
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	f8 94       	cli
     c32:	de bf       	out	0x3e, r29	; 62
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     c3c:	0f 2e       	mov	r0, r31
     c3e:	f4 e2       	ldi	r31, 0x24	; 36
     c40:	df 2e       	mov	r13, r31
     c42:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     c44:	0f 2e       	mov	r0, r31
     c46:	f4 e7       	ldi	r31, 0x74	; 116
     c48:	8f 2e       	mov	r8, r31
     c4a:	f7 e0       	ldi	r31, 0x07	; 7
     c4c:	9f 2e       	mov	r9, r31
     c4e:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     c50:	68 94       	set
     c52:	cc 24       	eor	r12, r12
     c54:	c4 f8       	bld	r12, 4
     c56:	0f 2e       	mov	r0, r31
     c58:	f3 ea       	ldi	r31, 0xA3	; 163
     c5a:	4f 2e       	mov	r4, r31
     c5c:	f6 e0       	ldi	r31, 0x06	; 6
     c5e:	5f 2e       	mov	r5, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	0f 2e       	mov	r0, r31
     c64:	ff e9       	ldi	r31, 0x9F	; 159
     c66:	6f 2e       	mov	r6, r31
     c68:	f6 e0       	ldi	r31, 0x06	; 6
     c6a:	7f 2e       	mov	r7, r31
     c6c:	f0 2d       	mov	r31, r0
     c6e:	0f 2e       	mov	r0, r31
     c70:	f1 ed       	ldi	r31, 0xD1	; 209
     c72:	ef 2e       	mov	r14, r31
     c74:	f6 e0       	ldi	r31, 0x06	; 6
     c76:	ff 2e       	mov	r15, r31
     c78:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     c7a:	31 2c       	mov	r3, r1
     c7c:	21 2c       	mov	r2, r1
     c7e:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     c80:	dd c1       	rjmp	.+954    	; 0x103c <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
     c82:	d5 01       	movw	r26, r10
     c84:	8c 91       	ld	r24, X
     c86:	82 32       	cpi	r24, 0x22	; 34
     c88:	09 f4       	brne	.+2      	; 0xc8c <nwkRxTaskHandler+0x88>
     c8a:	07 c1       	rjmp	.+526    	; 0xe9a <nwkRxTaskHandler+0x296>
     c8c:	18 f4       	brcc	.+6      	; 0xc94 <nwkRxTaskHandler+0x90>
     c8e:	80 32       	cpi	r24, 0x20	; 32
     c90:	41 f0       	breq	.+16     	; 0xca2 <nwkRxTaskHandler+0x9e>
     c92:	d4 c1       	rjmp	.+936    	; 0x103c <nwkRxTaskHandler+0x438>
     c94:	83 32       	cpi	r24, 0x23	; 35
     c96:	09 f4       	brne	.+2      	; 0xc9a <nwkRxTaskHandler+0x96>
     c98:	cc c1       	rjmp	.+920    	; 0x1032 <nwkRxTaskHandler+0x42e>
     c9a:	84 32       	cpi	r24, 0x24	; 36
     c9c:	09 f4       	brne	.+2      	; 0xca0 <nwkRxTaskHandler+0x9c>
     c9e:	cc c1       	rjmp	.+920    	; 0x1038 <nwkRxTaskHandler+0x434>
     ca0:	cd c1       	rjmp	.+922    	; 0x103c <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ca2:	f5 01       	movw	r30, r10
     ca4:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     ca6:	83 85       	ldd	r24, Z+11	; 0x0b
     ca8:	98 2f       	mov	r25, r24
     caa:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     cac:	09 f0       	breq	.+2      	; 0xcb0 <nwkRxTaskHandler+0xac>
     cae:	c6 c1       	rjmp	.+908    	; 0x103c <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     cb0:	25 81       	ldd	r18, Z+5	; 0x05
     cb2:	36 81       	ldd	r19, Z+6	; 0x06
     cb4:	2f 3f       	cpi	r18, 0xFF	; 255
     cb6:	3f 4f       	sbci	r19, 0xFF	; 255
     cb8:	91 f4       	brne	.+36     	; 0xcde <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     cba:	d5 01       	movw	r26, r10
     cbc:	1f 96       	adiw	r26, 0x0f	; 15
     cbe:	8d 91       	ld	r24, X+
     cc0:	9c 91       	ld	r25, X
     cc2:	50 97       	sbiw	r26, 0x10	; 16
     cc4:	f4 01       	movw	r30, r8
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	19 f0       	breq	.+6      	; 0xcd6 <nwkRxTaskHandler+0xd2>
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <nwkRxTaskHandler+0xd2>
     cd4:	b3 c1       	rjmp	.+870    	; 0x103c <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     cd6:	e2 e2       	ldi	r30, 0x22	; 34
     cd8:	d5 01       	movw	r26, r10
     cda:	ec 93       	st	X, r30
     cdc:	af c1       	rjmp	.+862    	; 0x103c <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     cde:	d5 01       	movw	r26, r10
     ce0:	1f 96       	adiw	r26, 0x0f	; 15
     ce2:	2d 91       	ld	r18, X+
     ce4:	3c 91       	ld	r19, X
     ce6:	50 97       	sbiw	r26, 0x10	; 16
     ce8:	2f 3f       	cpi	r18, 0xFF	; 255
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
     cec:	11 f4       	brne	.+4      	; 0xcf2 <nwkRxTaskHandler+0xee>
     cee:	80 fd       	sbrc	r24, 0
     cf0:	a5 c1       	rjmp	.+842    	; 0x103c <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     cf2:	f4 01       	movw	r30, r8
     cf4:	20 81       	ld	r18, Z
     cf6:	31 81       	ldd	r19, Z+1	; 0x01
     cf8:	d5 01       	movw	r26, r10
     cfa:	1d 96       	adiw	r26, 0x0d	; 13
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	1e 97       	sbiw	r26, 0x0e	; 14
     d02:	28 17       	cp	r18, r24
     d04:	39 07       	cpc	r19, r25
     d06:	09 f4       	brne	.+2      	; 0xd0a <nwkRxTaskHandler+0x106>
     d08:	99 c1       	rjmp	.+818    	; 0x103c <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     d0a:	c5 01       	movw	r24, r10
     d0c:	f4 dd       	rcall	.-1048   	; 0x8f6 <nwkRouteFrameReceived>
     d0e:	f3 01       	movw	r30, r6
     d10:	43 2d       	mov	r20, r3
     d12:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     d14:	63 2d       	mov	r22, r3
     d16:	72 2d       	mov	r23, r2
     d18:	5e 86       	std	Y+14, r5	; 0x0e
     d1a:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     d1c:	ad 85       	ldd	r26, Y+13	; 0x0d
     d1e:	be 85       	ldd	r27, Y+14	; 0x0e
     d20:	8c 91       	ld	r24, X
     d22:	88 23       	and	r24, r24
     d24:	09 f4       	brne	.+2      	; 0xd28 <nwkRxTaskHandler+0x124>
     d26:	6c c0       	rjmp	.+216    	; 0xe00 <nwkRxTaskHandler+0x1fc>
     d28:	d5 01       	movw	r26, r10
     d2a:	1d 96       	adiw	r26, 0x0d	; 13
     d2c:	2d 91       	ld	r18, X+
     d2e:	3c 91       	ld	r19, X
     d30:	1e 97       	sbiw	r26, 0x0e	; 14
     d32:	80 81       	ld	r24, Z
     d34:	91 81       	ldd	r25, Z+1	; 0x01
     d36:	28 17       	cp	r18, r24
     d38:	39 07       	cpc	r19, r25
     d3a:	09 f0       	breq	.+2      	; 0xd3e <nwkRxTaskHandler+0x13a>
     d3c:	62 c0       	rjmp	.+196    	; 0xe02 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     d3e:	f5 01       	movw	r30, r10
     d40:	94 85       	ldd	r25, Z+12	; 0x0c
     d42:	fa 01       	movw	r30, r20
     d44:	ee 0f       	add	r30, r30
     d46:	ff 1f       	adc	r31, r31
     d48:	ee 0f       	add	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	e4 0f       	add	r30, r20
     d4e:	f5 1f       	adc	r31, r21
     d50:	e1 56       	subi	r30, 0x61	; 97
     d52:	f9 4f       	sbci	r31, 0xF9	; 249
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	89 1b       	sub	r24, r25

      if (diff < 8)
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	c8 f5       	brcc	.+114    	; 0xdce <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
     d5c:	fa 01       	movw	r30, r20
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	ee 0f       	add	r30, r30
     d64:	ff 1f       	adc	r31, r31
     d66:	e4 0f       	add	r30, r20
     d68:	f5 1f       	adc	r31, r21
     d6a:	e1 56       	subi	r30, 0x61	; 97
     d6c:	f9 4f       	sbci	r31, 0xF9	; 249
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	29 2f       	mov	r18, r25
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	08 2e       	mov	r0, r24
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <nwkRxTaskHandler+0x178>
     d78:	35 95       	asr	r19
     d7a:	27 95       	ror	r18
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <nwkRxTaskHandler+0x174>
     d80:	20 ff       	sbrs	r18, 0
     d82:	12 c0       	rjmp	.+36     	; 0xda8 <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     d84:	d4 01       	movw	r26, r8
     d86:	2d 91       	ld	r18, X+
     d88:	3c 91       	ld	r19, X
     d8a:	f5 01       	movw	r30, r10
     d8c:	87 81       	ldd	r24, Z+7	; 0x07
     d8e:	90 85       	ldd	r25, Z+8	; 0x08
     d90:	28 17       	cp	r18, r24
     d92:	39 07       	cpc	r19, r25
     d94:	09 f0       	breq	.+2      	; 0xd98 <nwkRxTaskHandler+0x194>
     d96:	52 c1       	rjmp	.+676    	; 0x103c <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     d98:	63 85       	ldd	r22, Z+11	; 0x0b
     d9a:	63 fb       	bst	r22, 3
     d9c:	66 27       	eor	r22, r22
     d9e:	60 f9       	bld	r22, 0
     da0:	87 85       	ldd	r24, Z+15	; 0x0f
     da2:	90 89       	ldd	r25, Z+16	; 0x10
     da4:	a3 dd       	rcall	.-1210   	; 0x8ec <nwkRouteRemove>
     da6:	4a c1       	rjmp	.+660    	; 0x103c <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     da8:	fa 01       	movw	r30, r20
     daa:	ee 0f       	add	r30, r30
     dac:	ff 1f       	adc	r31, r31
     dae:	ee 0f       	add	r30, r30
     db0:	ff 1f       	adc	r31, r31
     db2:	e4 0f       	add	r30, r20
     db4:	f5 1f       	adc	r31, r21
     db6:	e1 56       	subi	r30, 0x61	; 97
     db8:	f9 4f       	sbci	r31, 0xF9	; 249
     dba:	21 e0       	ldi	r18, 0x01	; 1
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <nwkRxTaskHandler+0x1c0>
     dc0:	22 0f       	add	r18, r18
     dc2:	33 1f       	adc	r19, r19
     dc4:	8a 95       	dec	r24
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <nwkRxTaskHandler+0x1bc>
     dc8:	92 2b       	or	r25, r18
     dca:	93 83       	std	Z+3, r25	; 0x03
     dcc:	3e c1       	rjmp	.+636    	; 0x104a <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     dce:	fa 01       	movw	r30, r20
     dd0:	ee 0f       	add	r30, r30
     dd2:	ff 1f       	adc	r31, r31
     dd4:	ee 0f       	add	r30, r30
     dd6:	ff 1f       	adc	r31, r31
     dd8:	e4 0f       	add	r30, r20
     dda:	f5 1f       	adc	r31, r21
     ddc:	e1 56       	subi	r30, 0x61	; 97
     dde:	f9 4f       	sbci	r31, 0xF9	; 249
     de0:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     de2:	23 81       	ldd	r18, Z+3	; 0x03
     de4:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     de6:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     de8:	a9 01       	movw	r20, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <nwkRxTaskHandler+0x1ec>
     dec:	44 0f       	add	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	8a 95       	dec	r24
     df2:	e2 f7       	brpl	.-8      	; 0xdec <nwkRxTaskHandler+0x1e8>
     df4:	ca 01       	movw	r24, r20
     df6:	81 60       	ori	r24, 0x01	; 1
     df8:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     dfa:	8f e1       	ldi	r24, 0x1F	; 31
     dfc:	84 83       	std	Z+4, r24	; 0x04
     dfe:	25 c1       	rjmp	.+586    	; 0x104a <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     e00:	bf 01       	movw	r22, r30
     e02:	4f 5f       	subi	r20, 0xFF	; 255
     e04:	5f 4f       	sbci	r21, 0xFF	; 255
     e06:	8d 85       	ldd	r24, Y+13	; 0x0d
     e08:	9e 85       	ldd	r25, Y+14	; 0x0e
     e0a:	05 96       	adiw	r24, 0x05	; 5
     e0c:	9e 87       	std	Y+14, r25	; 0x0e
     e0e:	8d 87       	std	Y+13, r24	; 0x0d
     e10:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     e12:	ee 15       	cp	r30, r14
     e14:	ff 05       	cpc	r31, r15
     e16:	09 f0       	breq	.+2      	; 0xe1a <nwkRxTaskHandler+0x216>
     e18:	81 cf       	rjmp	.-254    	; 0xd1c <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     e1a:	61 15       	cp	r22, r1
     e1c:	71 05       	cpc	r23, r1
     e1e:	09 f4       	brne	.+2      	; 0xe22 <nwkRxTaskHandler+0x21e>
     e20:	0d c1       	rjmp	.+538    	; 0x103c <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     e22:	d5 01       	movw	r26, r10
     e24:	1d 96       	adiw	r26, 0x0d	; 13
     e26:	8d 91       	ld	r24, X+
     e28:	9c 91       	ld	r25, X
     e2a:	1e 97       	sbiw	r26, 0x0e	; 14
     e2c:	fb 01       	movw	r30, r22
     e2e:	91 83       	std	Z+1, r25	; 0x01
     e30:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     e32:	1c 96       	adiw	r26, 0x0c	; 12
     e34:	8c 91       	ld	r24, X
     e36:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     e3c:	8f e1       	ldi	r24, 0x1F	; 31
     e3e:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     e40:	81 e9       	ldi	r24, 0x91	; 145
     e42:	96 e0       	ldi	r25, 0x06	; 6
     e44:	ce d4       	rcall	.+2460   	; 0x17e2 <SYS_TimerStart>
     e46:	01 c1       	rjmp	.+514    	; 0x104a <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e48:	d4 01       	movw	r26, r8
     e4a:	2d 91       	ld	r18, X+
     e4c:	3c 91       	ld	r19, X
     e4e:	f5 01       	movw	r30, r10
     e50:	87 85       	ldd	r24, Z+15	; 0x0f
     e52:	90 89       	ldd	r25, Z+16	; 0x10
     e54:	28 17       	cp	r18, r24
     e56:	39 07       	cpc	r19, r25
     e58:	81 f0       	breq	.+32     	; 0xe7a <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
     e5a:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e5c:	42 fd       	sbrc	r20, 2
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     e60:	c5 01       	movw	r24, r10
     e62:	e2 d1       	rcall	.+964    	; 0x1228 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e64:	d4 01       	movw	r26, r8
     e66:	2d 91       	ld	r18, X+
     e68:	3c 91       	ld	r19, X
     e6a:	f5 01       	movw	r30, r10
     e6c:	87 85       	ldd	r24, Z+15	; 0x0f
     e6e:	90 89       	ldd	r25, Z+16	; 0x10
     e70:	28 17       	cp	r18, r24
     e72:	39 07       	cpc	r19, r25
     e74:	11 f0       	breq	.+4      	; 0xe7a <nwkRxTaskHandler+0x276>
     e76:	01 96       	adiw	r24, 0x01	; 1
     e78:	21 f4       	brne	.+8      	; 0xe82 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     e7a:	e2 e2       	ldi	r30, 0x22	; 34
     e7c:	d5 01       	movw	r26, r10
     e7e:	ec 93       	st	X, r30
     e80:	dd c0       	rjmp	.+442    	; 0x103c <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
     e82:	d5 01       	movw	r26, r10
     e84:	17 96       	adiw	r26, 0x07	; 7
     e86:	8d 91       	ld	r24, X+
     e88:	9c 91       	ld	r25, X
     e8a:	18 97       	sbiw	r26, 0x08	; 8
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	09 f0       	breq	.+2      	; 0xe94 <nwkRxTaskHandler+0x290>
     e92:	d4 c0       	rjmp	.+424    	; 0x103c <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
     e94:	83 e2       	ldi	r24, 0x23	; 35
     e96:	8c 93       	st	X, r24
     e98:	d1 c0       	rjmp	.+418    	; 0x103c <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     e9a:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     e9e:	f5 01       	movw	r30, r10
     ea0:	21 89       	ldd	r18, Z+17	; 0x11
     ea2:	22 95       	swap	r18
     ea4:	2f 70       	andi	r18, 0x0F	; 15
     ea6:	e2 2f       	mov	r30, r18
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e6 58       	subi	r30, 0x86	; 134
     eb0:	f8 4f       	sbci	r31, 0xF8	; 248
     eb2:	01 90       	ld	r0, Z+
     eb4:	f0 81       	ld	r31, Z
     eb6:	e0 2d       	mov	r30, r0
     eb8:	30 97       	sbiw	r30, 0x00	; 0
     eba:	09 f4       	brne	.+2      	; 0xebe <nwkRxTaskHandler+0x2ba>
     ebc:	63 c0       	rjmp	.+198    	; 0xf84 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     ebe:	d5 01       	movw	r26, r10
     ec0:	1d 96       	adiw	r26, 0x0d	; 13
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	1e 97       	sbiw	r26, 0x0e	; 14
     ec8:	9a 83       	std	Y+2, r25	; 0x02
     eca:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     ecc:	1f 96       	adiw	r26, 0x0f	; 15
     ece:	4d 91       	ld	r20, X+
     ed0:	5c 91       	ld	r21, X
     ed2:	50 97       	sbiw	r26, 0x10	; 16
     ed4:	5c 83       	std	Y+4, r21	; 0x04
     ed6:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     ed8:	51 96       	adiw	r26, 0x11	; 17
     eda:	3c 91       	ld	r19, X
     edc:	51 97       	sbiw	r26, 0x11	; 17
     ede:	3f 70       	andi	r19, 0x0F	; 15
     ee0:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     ee2:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     ee4:	af 57       	subi	r26, 0x7F	; 127
     ee6:	bf 4f       	sbci	r27, 0xFF	; 255
     ee8:	6d 91       	ld	r22, X+
     eea:	7c 91       	ld	r23, X
     eec:	79 87       	std	Y+9, r23	; 0x09
     eee:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     ef0:	95 01       	movw	r18, r10
     ef2:	2e 5f       	subi	r18, 0xFE	; 254
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	26 1b       	sub	r18, r22
     ef8:	37 0b       	sbc	r19, r23
     efa:	d5 01       	movw	r26, r10
     efc:	11 96       	adiw	r26, 0x01	; 1
     efe:	3c 91       	ld	r19, X
     f00:	11 97       	sbiw	r26, 0x01	; 1
     f02:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     f04:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     f06:	ad 57       	subi	r26, 0x7D	; 125
     f08:	bf 4f       	sbci	r27, 0xFF	; 255
     f0a:	2c 91       	ld	r18, X
     f0c:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     f0e:	11 96       	adiw	r26, 0x01	; 1
     f10:	2c 91       	ld	r18, X
     f12:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     f14:	d5 01       	movw	r26, r10
     f16:	1b 96       	adiw	r26, 0x0b	; 11
     f18:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     f1a:	62 2f       	mov	r22, r18
     f1c:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     f1e:	22 fd       	sbrc	r18, 2
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <nwkRxTaskHandler+0x322>
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <nwkRxTaskHandler+0x324>
     f26:	30 e2       	ldi	r19, 0x20	; 32
     f28:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     f2a:	23 fd       	sbrc	r18, 3
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <nwkRxTaskHandler+0x32e>
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	01 c0       	rjmp	.+2      	; 0xf34 <nwkRxTaskHandler+0x330>
     f32:	30 e4       	ldi	r19, 0x40	; 64
     f34:	26 2f       	mov	r18, r22
     f36:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     f38:	4f 3f       	cpi	r20, 0xFF	; 255
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	11 f0       	breq	.+4      	; 0xf42 <nwkRxTaskHandler+0x33e>
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	01 c0       	rjmp	.+2      	; 0xf44 <nwkRxTaskHandler+0x340>
     f42:	34 e0       	ldi	r19, 0x04	; 4
     f44:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     f46:	d5 01       	movw	r26, r10
     f48:	19 96       	adiw	r26, 0x09	; 9
     f4a:	4d 91       	ld	r20, X+
     f4c:	5c 91       	ld	r21, X
     f4e:	1a 97       	sbiw	r26, 0x0a	; 10
     f50:	84 17       	cp	r24, r20
     f52:	95 07       	cpc	r25, r21
     f54:	11 f0       	breq	.+4      	; 0xf5a <nwkRxTaskHandler+0x356>
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	01 c0       	rjmp	.+2      	; 0xf5c <nwkRxTaskHandler+0x358>
     f5a:	98 e0       	ldi	r25, 0x08	; 8
     f5c:	82 2f       	mov	r24, r18
     f5e:	89 2b       	or	r24, r25
     f60:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     f62:	d5 01       	movw	r26, r10
     f64:	15 96       	adiw	r26, 0x05	; 5
     f66:	2d 91       	ld	r18, X+
     f68:	3c 91       	ld	r19, X
     f6a:	16 97       	sbiw	r26, 0x06	; 6
     f6c:	2f 3f       	cpi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	11 f0       	breq	.+4      	; 0xf76 <nwkRxTaskHandler+0x372>
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	01 c0       	rjmp	.+2      	; 0xf78 <nwkRxTaskHandler+0x374>
     f76:	9c 2d       	mov	r25, r12
     f78:	89 2b       	or	r24, r25
     f7a:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     f7c:	ce 01       	movw	r24, r28
     f7e:	01 96       	adiw	r24, 0x01	; 1
     f80:	19 95       	eicall
     f82:	01 c0       	rjmp	.+2      	; 0xf86 <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     f84:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     f86:	f5 01       	movw	r30, r10
     f88:	93 85       	ldd	r25, Z+11	; 0x0b
     f8a:	90 ff       	sbrs	r25, 0
    ack = false;
     f8c:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     f8e:	d5 01       	movw	r26, r10
     f90:	17 96       	adiw	r26, 0x07	; 7
     f92:	2d 91       	ld	r18, X+
     f94:	3c 91       	ld	r19, X
     f96:	18 97       	sbiw	r26, 0x08	; 8
     f98:	2f 3f       	cpi	r18, 0xFF	; 255
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	69 f4       	brne	.+26     	; 0xfb8 <nwkRxTaskHandler+0x3b4>
     f9e:	f4 01       	movw	r30, r8
     fa0:	40 81       	ld	r20, Z
     fa2:	51 81       	ldd	r21, Z+1	; 0x01
     fa4:	d5 01       	movw	r26, r10
     fa6:	1f 96       	adiw	r26, 0x0f	; 15
     fa8:	2d 91       	ld	r18, X+
     faa:	3c 91       	ld	r19, X
     fac:	50 97       	sbiw	r26, 0x10	; 16
     fae:	42 17       	cp	r20, r18
     fb0:	53 07       	cpc	r21, r19
     fb2:	11 f4       	brne	.+4      	; 0xfb8 <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
     fb4:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     fb6:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     fb8:	f5 01       	movw	r30, r10
     fba:	25 81       	ldd	r18, Z+5	; 0x05
     fbc:	36 81       	ldd	r19, Z+6	; 0x06
     fbe:	2f 3f       	cpi	r18, 0xFF	; 255
     fc0:	3f 4f       	sbci	r19, 0xFF	; 255
     fc2:	a1 f1       	breq	.+104    	; 0x102c <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     fc4:	d4 01       	movw	r26, r8
     fc6:	2d 91       	ld	r18, X+
     fc8:	3c 91       	ld	r19, X
     fca:	2f 3f       	cpi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	71 f1       	breq	.+92     	; 0x102c <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
     fd0:	88 23       	and	r24, r24
     fd2:	61 f1       	breq	.+88     	; 0x102c <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     fd4:	87 db       	rcall	.-2290   	; 0x6e4 <nwkFrameAlloc>
     fd6:	8c 01       	movw	r16, r24
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	41 f1       	breq	.+80     	; 0x102c <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
     fdc:	e5 db       	rcall	.-2102   	; 0x7a8 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     fde:	f8 01       	movw	r30, r16
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	8d 5f       	subi	r24, 0xFD	; 253
     fe4:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     fe6:	e9 57       	subi	r30, 0x79	; 121
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	11 82       	std	Z+1, r1	; 0x01
     fec:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     fee:	d5 01       	movw	r26, r10
     ff0:	1b 96       	adiw	r26, 0x0b	; 11
     ff2:	8c 91       	ld	r24, X
     ff4:	1b 97       	sbiw	r26, 0x0b	; 11
     ff6:	86 95       	lsr	r24
     ff8:	81 70       	andi	r24, 0x01	; 1
     ffa:	f8 01       	movw	r30, r16
     ffc:	93 85       	ldd	r25, Z+11	; 0x0b
     ffe:	80 fb       	bst	r24, 0
    1000:	91 f9       	bld	r25, 1
    1002:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    1004:	1d 96       	adiw	r26, 0x0d	; 13
    1006:	8d 91       	ld	r24, X+
    1008:	9c 91       	ld	r25, X
    100a:	1e 97       	sbiw	r26, 0x0e	; 14
    100c:	90 8b       	std	Z+16, r25	; 0x10
    100e:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    1010:	ef 57       	subi	r30, 0x7F	; 127
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    101a:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    101c:	80 91 9e 06 	lds	r24, 0x069E	; 0x80069e <nwkRxAckControl>
    1020:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1022:	1c 96       	adiw	r26, 0x0c	; 12
    1024:	8c 91       	ld	r24, X
    1026:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    1028:	c8 01       	movw	r24, r16
    102a:	b0 d0       	rcall	.+352    	; 0x118c <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    102c:	d5 01       	movw	r26, r10
    102e:	dc 92       	st	X, r13
    1030:	05 c0       	rjmp	.+10     	; 0x103c <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    1032:	c5 01       	movw	r24, r10
    1034:	15 dd       	rcall	.-1494   	; 0xa60 <nwkRouteFrame>
      } break;
    1036:	02 c0       	rjmp	.+4      	; 0x103c <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1038:	c5 01       	movw	r24, r10
    103a:	8a db       	rcall	.-2284   	; 0x750 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    103c:	c5 01       	movw	r24, r10
    103e:	92 db       	rcall	.-2268   	; 0x764 <nwkFrameNext>
    1040:	5c 01       	movw	r10, r24
    1042:	89 2b       	or	r24, r25
    1044:	09 f0       	breq	.+2      	; 0x1048 <nwkRxTaskHandler+0x444>
    1046:	1d ce       	rjmp	.-966    	; 0xc82 <nwkRxTaskHandler+0x7e>
    1048:	07 c0       	rjmp	.+14     	; 0x1058 <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    104a:	f5 01       	movw	r30, r10
    104c:	87 81       	ldd	r24, Z+7	; 0x07
    104e:	90 85       	ldd	r25, Z+8	; 0x08
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	09 f0       	breq	.+2      	; 0x1056 <nwkRxTaskHandler+0x452>
    1054:	07 cf       	rjmp	.-498    	; 0xe64 <nwkRxTaskHandler+0x260>
    1056:	f8 ce       	rjmp	.-528    	; 0xe48 <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1058:	2e 96       	adiw	r28, 0x0e	; 14
    105a:	0f b6       	in	r0, 0x3f	; 63
    105c:	f8 94       	cli
    105e:	de bf       	out	0x3e, r29	; 62
    1060:	0f be       	out	0x3f, r0	; 63
    1062:	cd bf       	out	0x3d, r28	; 61
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	7f 90       	pop	r7
    107e:	6f 90       	pop	r6
    1080:	5f 90       	pop	r5
    1082:	4f 90       	pop	r4
    1084:	3f 90       	pop	r3
    1086:	2f 90       	pop	r2
    1088:	08 95       	ret

0000108a <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	cf 93       	push	r28
    1094:	7c 01       	movw	r14, r24
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	01 e0       	ldi	r16, 0x01	; 1
    109e:	c3 e1       	ldi	r28, 0x13	; 19
    10a0:	13 c0       	rjmp	.+38     	; 0x10c8 <nwkTxDelayTimerHandler+0x3e>
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 81       	ld	r18, Z
    10a6:	21 31       	cpi	r18, 0x11	; 17
    10a8:	79 f4       	brne	.+30     	; 0x10c8 <nwkTxDelayTimerHandler+0x3e>
    10aa:	ec 57       	subi	r30, 0x7C	; 124
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	20 81       	ld	r18, Z
    10b0:	31 81       	ldd	r19, Z+1	; 0x01
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	31 09       	sbc	r19, r1
    10b6:	31 83       	std	Z+1, r19	; 0x01
    10b8:	20 83       	st	Z, r18
    10ba:	23 2b       	or	r18, r19
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <nwkTxDelayTimerHandler+0x3c>
    10be:	fc 01       	movw	r30, r24
    10c0:	c0 83       	st	Z, r28
    10c2:	10 2f       	mov	r17, r16
    10c4:	01 c0       	rjmp	.+2      	; 0x10c8 <nwkTxDelayTimerHandler+0x3e>
    10c6:	10 2f       	mov	r17, r16
    10c8:	4d db       	rcall	.-2406   	; 0x764 <nwkFrameNext>
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	51 f7       	brne	.-44     	; 0x10a2 <nwkTxDelayTimerHandler+0x18>
    10ce:	11 23       	and	r17, r17
    10d0:	11 f0       	breq	.+4      	; 0x10d6 <nwkTxDelayTimerHandler+0x4c>
    10d2:	c7 01       	movw	r24, r14
    10d4:	86 d3       	rcall	.+1804   	; 0x17e2 <SYS_TimerStart>
    10d6:	cf 91       	pop	r28
    10d8:	1f 91       	pop	r17
    10da:	0f 91       	pop	r16
    10dc:	ff 90       	pop	r15
    10de:	ef 90       	pop	r14
    10e0:	08 95       	ret

000010e2 <nwkTxAckWaitTimerHandler>:
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	7c 01       	movw	r14, r24
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	01 e0       	ldi	r16, 0x01	; 1
    10f8:	d7 e1       	ldi	r29, 0x17	; 23
    10fa:	c0 e1       	ldi	r28, 0x10	; 16
    10fc:	16 c0       	rjmp	.+44     	; 0x112a <nwkTxAckWaitTimerHandler+0x48>
    10fe:	fc 01       	movw	r30, r24
    1100:	20 81       	ld	r18, Z
    1102:	26 31       	cpi	r18, 0x16	; 22
    1104:	91 f4       	brne	.+36     	; 0x112a <nwkTxAckWaitTimerHandler+0x48>
    1106:	ec 57       	subi	r30, 0x7C	; 124
    1108:	ff 4f       	sbci	r31, 0xFF	; 255
    110a:	20 81       	ld	r18, Z
    110c:	31 81       	ldd	r19, Z+1	; 0x01
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	31 09       	sbc	r19, r1
    1112:	31 83       	std	Z+1, r19	; 0x01
    1114:	20 83       	st	Z, r18
    1116:	23 2b       	or	r18, r19
    1118:	39 f4       	brne	.+14     	; 0x1128 <nwkTxAckWaitTimerHandler+0x46>
    111a:	fc 01       	movw	r30, r24
    111c:	d0 83       	st	Z, r29
    111e:	ed 57       	subi	r30, 0x7D	; 125
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	c0 83       	st	Z, r28
    1124:	10 2f       	mov	r17, r16
    1126:	01 c0       	rjmp	.+2      	; 0x112a <nwkTxAckWaitTimerHandler+0x48>
    1128:	10 2f       	mov	r17, r16
    112a:	1c db       	rcall	.-2504   	; 0x764 <nwkFrameNext>
    112c:	00 97       	sbiw	r24, 0x00	; 0
    112e:	39 f7       	brne	.-50     	; 0x10fe <nwkTxAckWaitTimerHandler+0x1c>
    1130:	11 23       	and	r17, r17
    1132:	11 f0       	breq	.+4      	; 0x1138 <nwkTxAckWaitTimerHandler+0x56>
    1134:	c7 01       	movw	r24, r14
    1136:	55 d3       	rcall	.+1706   	; 0x17e2 <SYS_TimerStart>
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	08 95       	ret

00001146 <nwkTxInit>:
    1146:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <nwkTxPhyActiveFrame+0x1>
    114a:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <nwkTxPhyActiveFrame>
    114e:	ee ed       	ldi	r30, 0xDE	; 222
    1150:	f6 e0       	ldi	r31, 0x06	; 6
    1152:	82 e3       	ldi	r24, 0x32	; 50
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	86 83       	std	Z+6, r24	; 0x06
    115c:	97 83       	std	Z+7, r25	; 0x07
    115e:	a0 87       	std	Z+8, r26	; 0x08
    1160:	b1 87       	std	Z+9, r27	; 0x09
    1162:	12 86       	std	Z+10, r1	; 0x0a
    1164:	81 e7       	ldi	r24, 0x71	; 113
    1166:	98 e0       	ldi	r25, 0x08	; 8
    1168:	94 87       	std	Z+12, r25	; 0x0c
    116a:	83 87       	std	Z+11, r24	; 0x0b
    116c:	e1 ed       	ldi	r30, 0xD1	; 209
    116e:	f6 e0       	ldi	r31, 0x06	; 6
    1170:	8a e0       	ldi	r24, 0x0A	; 10
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	a0 e0       	ldi	r26, 0x00	; 0
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	86 83       	std	Z+6, r24	; 0x06
    117a:	97 83       	std	Z+7, r25	; 0x07
    117c:	a0 87       	std	Z+8, r26	; 0x08
    117e:	b1 87       	std	Z+9, r27	; 0x09
    1180:	12 86       	std	Z+10, r1	; 0x0a
    1182:	85 e4       	ldi	r24, 0x45	; 69
    1184:	98 e0       	ldi	r25, 0x08	; 8
    1186:	94 87       	std	Z+12, r25	; 0x0c
    1188:	83 87       	std	Z+11, r24	; 0x0b
    118a:	08 95       	ret

0000118c <nwkTxFrame>:
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	ec 01       	movw	r28, r24
    1192:	fc 01       	movw	r30, r24
    1194:	ea 57       	subi	r30, 0x7A	; 122
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	80 81       	ld	r24, Z
    119a:	81 ff       	sbrs	r24, 1
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <nwkTxFrame+0x18>
    119e:	92 e1       	ldi	r25, 0x12	; 18
    11a0:	98 83       	st	Y, r25
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <nwkTxFrame+0x1c>
    11a4:	92 e1       	ldi	r25, 0x12	; 18
    11a6:	98 83       	st	Y, r25
    11a8:	fe 01       	movw	r30, r28
    11aa:	ed 57       	subi	r30, 0x7D	; 125
    11ac:	ff 4f       	sbci	r31, 0xFF	; 255
    11ae:	10 82       	st	Z, r1
    11b0:	80 ff       	sbrs	r24, 0
    11b2:	05 c0       	rjmp	.+10     	; 0x11be <nwkTxFrame+0x32>
    11b4:	2f ef       	ldi	r18, 0xFF	; 255
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	3e 83       	std	Y+6, r19	; 0x06
    11ba:	2d 83       	std	Y+5, r18	; 0x05
    11bc:	06 c0       	rjmp	.+12     	; 0x11ca <nwkTxFrame+0x3e>
    11be:	20 91 76 07 	lds	r18, 0x0776	; 0x800776 <nwkIb+0x2>
    11c2:	30 91 77 07 	lds	r19, 0x0777	; 0x800777 <nwkIb+0x3>
    11c6:	3e 83       	std	Y+6, r19	; 0x06
    11c8:	2d 83       	std	Y+5, r18	; 0x05
    11ca:	85 70       	andi	r24, 0x05	; 5
    11cc:	19 f4       	brne	.+6      	; 0x11d4 <nwkTxFrame+0x48>
    11ce:	ce 01       	movw	r24, r28
    11d0:	28 dc       	rcall	.-1968   	; 0xa22 <nwkRoutePrepareTx>
    11d2:	04 c0       	rjmp	.+8      	; 0x11dc <nwkTxFrame+0x50>
    11d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d6:	98 89       	ldd	r25, Y+16	; 0x10
    11d8:	98 87       	std	Y+8, r25	; 0x08
    11da:	8f 83       	std	Y+7, r24	; 0x07
    11dc:	e4 e7       	ldi	r30, 0x74	; 116
    11de:	f7 e0       	ldi	r31, 0x07	; 7
    11e0:	80 81       	ld	r24, Z
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	9a 87       	std	Y+10, r25	; 0x0a
    11e6:	89 87       	std	Y+9, r24	; 0x09
    11e8:	85 81       	ldd	r24, Z+5	; 0x05
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	85 83       	std	Z+5, r24	; 0x05
    11ee:	8c 83       	std	Y+4, r24	; 0x04
    11f0:	8f 81       	ldd	r24, Y+7	; 0x07
    11f2:	98 85       	ldd	r25, Y+8	; 0x08
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	69 f4       	brne	.+26     	; 0x1212 <nwkTxFrame+0x86>
    11f8:	81 e4       	ldi	r24, 0x41	; 65
    11fa:	98 e8       	ldi	r25, 0x88	; 136
    11fc:	9b 83       	std	Y+3, r25	; 0x03
    11fe:	8a 83       	std	Y+2, r24	; 0x02
    1200:	28 d4       	rcall	.+2128   	; 0x1a52 <rand>
    1202:	cc 57       	subi	r28, 0x7C	; 124
    1204:	df 4f       	sbci	r29, 0xFF	; 255
    1206:	87 70       	andi	r24, 0x07	; 7
    1208:	99 27       	eor	r25, r25
    120a:	01 96       	adiw	r24, 0x01	; 1
    120c:	99 83       	std	Y+1, r25	; 0x01
    120e:	88 83       	st	Y, r24
    1210:	08 c0       	rjmp	.+16     	; 0x1222 <nwkTxFrame+0x96>
    1212:	81 e6       	ldi	r24, 0x61	; 97
    1214:	98 e8       	ldi	r25, 0x88	; 136
    1216:	9b 83       	std	Y+3, r25	; 0x03
    1218:	8a 83       	std	Y+2, r24	; 0x02
    121a:	cc 57       	subi	r28, 0x7C	; 124
    121c:	df 4f       	sbci	r29, 0xFF	; 255
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	18 82       	st	Y, r1
    1222:	df 91       	pop	r29
    1224:	cf 91       	pop	r28
    1226:	08 95       	ret

00001228 <nwkTxBroadcastFrame>:
    1228:	0f 93       	push	r16
    122a:	1f 93       	push	r17
    122c:	cf 93       	push	r28
    122e:	df 93       	push	r29
    1230:	8c 01       	movw	r16, r24
    1232:	58 da       	rcall	.-2896   	; 0x6e4 <nwkFrameAlloc>
    1234:	ec 01       	movw	r28, r24
    1236:	89 2b       	or	r24, r25
    1238:	a9 f1       	breq	.+106    	; 0x12a4 <nwkTxBroadcastFrame+0x7c>
    123a:	82 e1       	ldi	r24, 0x12	; 18
    123c:	88 83       	st	Y, r24
    123e:	f8 01       	movw	r30, r16
    1240:	81 81       	ldd	r24, Z+1	; 0x01
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	fe 01       	movw	r30, r28
    1246:	ed 57       	subi	r30, 0x7D	; 125
    1248:	ff 4f       	sbci	r31, 0xFF	; 255
    124a:	10 82       	st	Z, r1
    124c:	02 d4       	rcall	.+2052   	; 0x1a52 <rand>
    124e:	fe 01       	movw	r30, r28
    1250:	ec 57       	subi	r30, 0x7C	; 124
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	87 70       	andi	r24, 0x07	; 7
    1256:	99 27       	eor	r25, r25
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	80 83       	st	Z, r24
    125e:	33 96       	adiw	r30, 0x03	; 3
    1260:	11 82       	std	Z+1, r1	; 0x01
    1262:	10 82       	st	Z, r1
    1264:	f8 01       	movw	r30, r16
    1266:	41 81       	ldd	r20, Z+1	; 0x01
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	b8 01       	movw	r22, r16
    126c:	6e 5f       	subi	r22, 0xFE	; 254
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	ce 01       	movw	r24, r28
    1272:	02 96       	adiw	r24, 0x02	; 2
    1274:	fc d3       	rcall	.+2040   	; 0x1a6e <memcpy>
    1276:	81 e4       	ldi	r24, 0x41	; 65
    1278:	98 e8       	ldi	r25, 0x88	; 136
    127a:	9b 83       	std	Y+3, r25	; 0x03
    127c:	8a 83       	std	Y+2, r24	; 0x02
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	9f ef       	ldi	r25, 0xFF	; 255
    1282:	98 87       	std	Y+8, r25	; 0x08
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	f8 01       	movw	r30, r16
    1288:	85 81       	ldd	r24, Z+5	; 0x05
    128a:	96 81       	ldd	r25, Z+6	; 0x06
    128c:	9e 83       	std	Y+6, r25	; 0x06
    128e:	8d 83       	std	Y+5, r24	; 0x05
    1290:	e4 e7       	ldi	r30, 0x74	; 116
    1292:	f7 e0       	ldi	r31, 0x07	; 7
    1294:	80 81       	ld	r24, Z
    1296:	91 81       	ldd	r25, Z+1	; 0x01
    1298:	9a 87       	std	Y+10, r25	; 0x0a
    129a:	89 87       	std	Y+9, r24	; 0x09
    129c:	85 81       	ldd	r24, Z+5	; 0x05
    129e:	8f 5f       	subi	r24, 0xFF	; 255
    12a0:	85 83       	std	Z+5, r24	; 0x05
    12a2:	8c 83       	std	Y+4, r24	; 0x04
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <nwkTxAckReceived>:
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	fc 01       	movw	r30, r24
    12b4:	c7 81       	ldd	r28, Z+7	; 0x07
    12b6:	d0 85       	ldd	r29, Z+8	; 0x08
    12b8:	81 85       	ldd	r24, Z+9	; 0x09
    12ba:	83 30       	cpi	r24, 0x03	; 3
    12bc:	c1 f4       	brne	.+48     	; 0x12ee <nwkTxAckReceived+0x40>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	10 c0       	rjmp	.+32     	; 0x12e4 <nwkTxAckReceived+0x36>
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 81       	ld	r18, Z
    12c8:	26 31       	cpi	r18, 0x16	; 22
    12ca:	61 f4       	brne	.+24     	; 0x12e4 <nwkTxAckReceived+0x36>
    12cc:	34 85       	ldd	r19, Z+12	; 0x0c
    12ce:	29 81       	ldd	r18, Y+1	; 0x01
    12d0:	32 13       	cpse	r19, r18
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <nwkTxAckReceived+0x36>
    12d4:	27 e1       	ldi	r18, 0x17	; 23
    12d6:	20 83       	st	Z, r18
    12d8:	2a 81       	ldd	r18, Y+2	; 0x02
    12da:	ea 57       	subi	r30, 0x7A	; 122
    12dc:	ff 4f       	sbci	r31, 0xFF	; 255
    12de:	20 83       	st	Z, r18
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	06 c0       	rjmp	.+12     	; 0x12f0 <nwkTxAckReceived+0x42>
    12e4:	3f da       	rcall	.-2946   	; 0x764 <nwkFrameNext>
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	69 f7       	brne	.-38     	; 0x12c4 <nwkTxAckReceived+0x16>
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <nwkTxAckReceived+0x42>
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    12f6:	e0 91 eb 06 	lds	r30, 0x06EB	; 0x8006eb <nwkTxPhyActiveFrame>
    12fa:	f0 91 ec 06 	lds	r31, 0x06EC	; 0x8006ec <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	21 f0       	breq	.+8      	; 0x130a <PHY_DataConf+0x14>
    1302:	48 f0       	brcs	.+18     	; 0x1316 <PHY_DataConf+0x20>
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	19 f0       	breq	.+6      	; 0x130e <PHY_DataConf+0x18>
    1308:	04 c0       	rjmp	.+8      	; 0x1312 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	05 c0       	rjmp	.+10     	; 0x1318 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    130e:	81 e2       	ldi	r24, 0x21	; 33
    1310:	03 c0       	rjmp	.+6      	; 0x1318 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	01 c0       	rjmp	.+2      	; 0x1318 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1316:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1318:	df 01       	movw	r26, r30
    131a:	ad 57       	subi	r26, 0x7D	; 125
    131c:	bf 4f       	sbci	r27, 0xFF	; 255
    131e:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1320:	85 e1       	ldi	r24, 0x15	; 21
    1322:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1324:	10 92 ec 06 	sts	0x06EC, r1	; 0x8006ec <nwkTxPhyActiveFrame+0x1>
    1328:	10 92 eb 06 	sts	0x06EB, r1	; 0x8006eb <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    132c:	e4 e7       	ldi	r30, 0x74	; 116
    132e:	f7 e0       	ldi	r31, 0x07	; 7
    1330:	86 a1       	ldd	r24, Z+38	; 0x26
    1332:	97 a1       	ldd	r25, Z+39	; 0x27
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	97 a3       	std	Z+39, r25	; 0x27
    1338:	86 a3       	std	Z+38, r24	; 0x26
    133a:	08 95       	ret

0000133c <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    133c:	9f 92       	push	r9
    133e:	af 92       	push	r10
    1340:	bf 92       	push	r11
    1342:	cf 92       	push	r12
    1344:	df 92       	push	r13
    1346:	ef 92       	push	r14
    1348:	ff 92       	push	r15
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1352:	c0 e0       	ldi	r28, 0x00	; 0
    1354:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1356:	0f 2e       	mov	r0, r31
    1358:	f4 e1       	ldi	r31, 0x14	; 20
    135a:	af 2e       	mov	r10, r31
    135c:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    135e:	04 e7       	ldi	r16, 0x74	; 116
    1360:	17 e0       	ldi	r17, 0x07	; 7
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1362:	0f 2e       	mov	r0, r31
    1364:	f7 e1       	ldi	r31, 0x17	; 23
    1366:	df 2e       	mov	r13, r31
    1368:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    136a:	0f 2e       	mov	r0, r31
    136c:	f6 e1       	ldi	r31, 0x16	; 22
    136e:	9f 2e       	mov	r9, r31
    1370:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1372:	0f 2e       	mov	r0, r31
    1374:	f5 e1       	ldi	r31, 0x15	; 21
    1376:	ef 2e       	mov	r14, r31
    1378:	f1 2c       	mov	r15, r1
    137a:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    137c:	0f 2e       	mov	r0, r31
    137e:	f3 e1       	ldi	r31, 0x13	; 19
    1380:	cf 2e       	mov	r12, r31
    1382:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1384:	0f 2e       	mov	r0, r31
    1386:	f1 e1       	ldi	r31, 0x11	; 17
    1388:	bf 2e       	mov	r11, r31
    138a:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    138c:	60 c0       	rjmp	.+192    	; 0x144e <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    138e:	88 81       	ld	r24, Y
    1390:	83 31       	cpi	r24, 0x13	; 19
    1392:	c1 f0       	breq	.+48     	; 0x13c4 <nwkTxTaskHandler+0x88>
    1394:	18 f4       	brcc	.+6      	; 0x139c <nwkTxTaskHandler+0x60>
    1396:	82 31       	cpi	r24, 0x12	; 18
    1398:	39 f0       	breq	.+14     	; 0x13a8 <nwkTxTaskHandler+0x6c>
    139a:	59 c0       	rjmp	.+178    	; 0x144e <nwkTxTaskHandler+0x112>
    139c:	85 31       	cpi	r24, 0x15	; 21
    139e:	49 f1       	breq	.+82     	; 0x13f2 <nwkTxTaskHandler+0xb6>
    13a0:	87 31       	cpi	r24, 0x17	; 23
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <nwkTxTaskHandler+0x6a>
    13a4:	45 c0       	rjmp	.+138    	; 0x1430 <nwkTxTaskHandler+0xf4>
    13a6:	53 c0       	rjmp	.+166    	; 0x144e <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    13a8:	fe 01       	movw	r30, r28
    13aa:	ec 57       	subi	r30, 0x7C	; 124
    13ac:	ff 4f       	sbci	r31, 0xFF	; 255
    13ae:	80 81       	ld	r24, Z
    13b0:	91 81       	ldd	r25, Z+1	; 0x01
    13b2:	89 2b       	or	r24, r25
    13b4:	29 f0       	breq	.+10     	; 0x13c0 <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    13b6:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    13b8:	81 ed       	ldi	r24, 0xD1	; 209
    13ba:	96 e0       	ldi	r25, 0x06	; 6
    13bc:	12 d2       	rcall	.+1060   	; 0x17e2 <SYS_TimerStart>
    13be:	47 c0       	rjmp	.+142    	; 0x144e <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    13c0:	c8 82       	st	Y, r12
    13c2:	45 c0       	rjmp	.+138    	; 0x144e <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    13c4:	80 91 eb 06 	lds	r24, 0x06EB	; 0x8006eb <nwkTxPhyActiveFrame>
    13c8:	90 91 ec 06 	lds	r25, 0x06EC	; 0x8006ec <nwkTxPhyActiveFrame+0x1>
    13cc:	89 2b       	or	r24, r25
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <nwkTxTaskHandler+0x96>
    13d0:	3e c0       	rjmp	.+124    	; 0x144e <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    13d2:	d0 93 ec 06 	sts	0x06EC, r29	; 0x8006ec <nwkTxPhyActiveFrame+0x1>
    13d6:	c0 93 eb 06 	sts	0x06EB, r28	; 0x8006eb <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    13da:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    13dc:	69 81       	ldd	r22, Y+1	; 0x01
    13de:	ce 01       	movw	r24, r28
    13e0:	02 96       	adiw	r24, 0x02	; 2
    13e2:	cb d0       	rcall	.+406    	; 0x157a <PHY_DataReq>
          nwkIb.lock++;
    13e4:	f8 01       	movw	r30, r16
    13e6:	86 a1       	ldd	r24, Z+38	; 0x26
    13e8:	97 a1       	ldd	r25, Z+39	; 0x27
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	97 a3       	std	Z+39, r25	; 0x27
    13ee:	86 a3       	std	Z+38, r24	; 0x26
    13f0:	2e c0       	rjmp	.+92     	; 0x144e <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    13f2:	fe 01       	movw	r30, r28
    13f4:	ed 57       	subi	r30, 0x7D	; 125
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	80 81       	ld	r24, Z
    13fa:	81 11       	cpse	r24, r1
    13fc:	17 c0       	rjmp	.+46     	; 0x142c <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    13fe:	2d 85       	ldd	r18, Y+13	; 0x0d
    1400:	3e 85       	ldd	r19, Y+14	; 0x0e
    1402:	f8 01       	movw	r30, r16
    1404:	80 81       	ld	r24, Z
    1406:	91 81       	ldd	r25, Z+1	; 0x01
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	69 f4       	brne	.+26     	; 0x1428 <nwkTxTaskHandler+0xec>
    140e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1410:	80 ff       	sbrs	r24, 0
    1412:	0a c0       	rjmp	.+20     	; 0x1428 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1414:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1416:	fe 01       	movw	r30, r28
    1418:	ec 57       	subi	r30, 0x7C	; 124
    141a:	ff 4f       	sbci	r31, 0xFF	; 255
    141c:	f1 82       	std	Z+1, r15	; 0x01
    141e:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1420:	8e ed       	ldi	r24, 0xDE	; 222
    1422:	96 e0       	ldi	r25, 0x06	; 6
    1424:	de d1       	rcall	.+956    	; 0x17e2 <SYS_TimerStart>
    1426:	13 c0       	rjmp	.+38     	; 0x144e <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1428:	d8 82       	st	Y, r13
    142a:	11 c0       	rjmp	.+34     	; 0x144e <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    142c:	d8 82       	st	Y, r13
    142e:	0f c0       	rjmp	.+30     	; 0x144e <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    1430:	ce 01       	movw	r24, r28
    1432:	b0 da       	rcall	.-2720   	; 0x994 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1434:	fe 01       	movw	r30, r28
    1436:	e9 57       	subi	r30, 0x79	; 121
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	01 90       	ld	r0, Z+
    143c:	f0 81       	ld	r31, Z
    143e:	e0 2d       	mov	r30, r0
    1440:	30 97       	sbiw	r30, 0x00	; 0
    1442:	19 f4       	brne	.+6      	; 0x144a <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    1444:	ce 01       	movw	r24, r28
    1446:	84 d9       	rcall	.-3320   	; 0x750 <nwkFrameFree>
    1448:	02 c0       	rjmp	.+4      	; 0x144e <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    144a:	ce 01       	movw	r24, r28
    144c:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    144e:	ce 01       	movw	r24, r28
    1450:	89 d9       	rcall	.-3310   	; 0x764 <nwkFrameNext>
    1452:	ec 01       	movw	r28, r24
    1454:	89 2b       	or	r24, r25
    1456:	09 f0       	breq	.+2      	; 0x145a <nwkTxTaskHandler+0x11e>
    1458:	9a cf       	rjmp	.-204    	; 0x138e <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	0f 91       	pop	r16
    1462:	ff 90       	pop	r15
    1464:	ef 90       	pop	r14
    1466:	df 90       	pop	r13
    1468:	cf 90       	pop	r12
    146a:	bf 90       	pop	r11
    146c:	af 90       	pop	r10
    146e:	9f 90       	pop	r9
    1470:	08 95       	ret

00001472 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1472:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <phyBand>
    1476:	98 2f       	mov	r25, r24
    1478:	9f 70       	andi	r25, 0x0F	; 15
    147a:	e4 e5       	ldi	r30, 0x54	; 84
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	80 81       	ld	r24, Z
    1480:	80 7f       	andi	r24, 0xF0	; 240
    1482:	89 2b       	or	r24, r25
    1484:	80 83       	st	Z, r24
    1486:	80 91 ed 06 	lds	r24, 0x06ED	; 0x8006ed <phyBand>
    148a:	88 23       	and	r24, r24
    148c:	29 f0       	breq	.+10     	; 0x1498 <phySetChannel+0x26>
    148e:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <phyChannel>
    1492:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1496:	08 95       	ret
    1498:	80 91 ee 06 	lds	r24, 0x06EE	; 0x8006ee <phyChannel>
    149c:	98 2f       	mov	r25, r24
    149e:	9f 71       	andi	r25, 0x1F	; 31
    14a0:	e8 e4       	ldi	r30, 0x48	; 72
    14a2:	f1 e0       	ldi	r31, 0x01	; 1
    14a4:	80 81       	ld	r24, Z
    14a6:	80 7e       	andi	r24, 0xE0	; 224
    14a8:	89 2b       	or	r24, r25
    14aa:	80 83       	st	Z, r24
    14ac:	08 95       	ret

000014ae <phyTrxSetState>:
    14ae:	93 e0       	ldi	r25, 0x03	; 3
    14b0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    14b4:	e1 e4       	ldi	r30, 0x41	; 65
    14b6:	f1 e0       	ldi	r31, 0x01	; 1
    14b8:	90 81       	ld	r25, Z
    14ba:	9f 71       	andi	r25, 0x1F	; 31
    14bc:	98 30       	cpi	r25, 0x08	; 8
    14be:	e1 f7       	brne	.-8      	; 0x14b8 <phyTrxSetState+0xa>
    14c0:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    14c4:	e1 e4       	ldi	r30, 0x41	; 65
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	90 81       	ld	r25, Z
    14ca:	9f 71       	andi	r25, 0x1F	; 31
    14cc:	98 13       	cpse	r25, r24
    14ce:	fc cf       	rjmp	.-8      	; 0x14c8 <phyTrxSetState+0x1a>
    14d0:	08 95       	ret

000014d2 <phySetRxState>:
    14d2:	88 e0       	ldi	r24, 0x08	; 8
    14d4:	ec df       	rcall	.-40     	; 0x14ae <phyTrxSetState>
    14d6:	8f ef       	ldi	r24, 0xFF	; 255
    14d8:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    14dc:	80 91 ef 06 	lds	r24, 0x06EF	; 0x8006ef <phyRxState>
    14e0:	88 23       	and	r24, r24
    14e2:	11 f0       	breq	.+4      	; 0x14e8 <phySetRxState+0x16>
    14e4:	86 e1       	ldi	r24, 0x16	; 22
    14e6:	e3 cf       	rjmp	.-58     	; 0x14ae <phyTrxSetState>
    14e8:	08 95       	ret

000014ea <PHY_Init>:
    14ea:	e9 e3       	ldi	r30, 0x39	; 57
    14ec:	f1 e0       	ldi	r31, 0x01	; 1
    14ee:	80 81       	ld	r24, Z
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	80 83       	st	Z, r24
    14f4:	10 92 ef 06 	sts	0x06EF, r1	; 0x8006ef <phyRxState>
    14f8:	10 92 ed 06 	sts	0x06ED, r1	; 0x8006ed <phyBand>
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <phyState>
    1502:	88 e0       	ldi	r24, 0x08	; 8
    1504:	d4 df       	rcall	.-88     	; 0x14ae <phyTrxSetState>
    1506:	8b ee       	ldi	r24, 0xEB	; 235
    1508:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    150c:	ec e4       	ldi	r30, 0x4C	; 76
    150e:	f1 e0       	ldi	r31, 0x01	; 1
    1510:	80 81       	ld	r24, Z
    1512:	80 68       	ori	r24, 0x80	; 128
    1514:	80 83       	st	Z, r24
    1516:	08 95       	ret

00001518 <PHY_SetRxState>:
    1518:	80 93 ef 06 	sts	0x06EF, r24	; 0x8006ef <phyRxState>
    151c:	da cf       	rjmp	.-76     	; 0x14d2 <phySetRxState>
    151e:	08 95       	ret

00001520 <PHY_SetChannel>:
    1520:	80 93 ee 06 	sts	0x06EE, r24	; 0x8006ee <phyChannel>
    1524:	a6 cf       	rjmp	.-180    	; 0x1472 <phySetChannel>
    1526:	08 95       	ret

00001528 <PHY_SetPanId>:
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	1f 92       	push	r1
    152e:	1f 92       	push	r1
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <PHY_SetShortAddr>:
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	1f 92       	push	r1
    1552:	1f 92       	push	r1
    1554:	cd b7       	in	r28, 0x3d	; 61
    1556:	de b7       	in	r29, 0x3e	; 62
    1558:	9a 83       	std	Y+2, r25	; 0x02
    155a:	89 83       	std	Y+1, r24	; 0x01
    155c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    1566:	9a 81       	ldd	r25, Y+2	; 0x02
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	89 0f       	add	r24, r25
    156c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	df 91       	pop	r29
    1576:	cf 91       	pop	r28
    1578:	08 95       	ret

0000157a <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	8c 01       	movw	r16, r24
    1582:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1584:	89 e1       	ldi	r24, 0x19	; 25
    1586:	93 df       	rcall	.-218    	; 0x14ae <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    158e:	82 e0       	ldi	r24, 0x02	; 2
    1590:	8c 0f       	add	r24, r28
    1592:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    1596:	cc 23       	and	r28, r28
    1598:	81 f0       	breq	.+32     	; 0x15ba <PHY_DataReq+0x40>
    159a:	f8 01       	movw	r30, r16
    159c:	c1 50       	subi	r28, 0x01	; 1
    159e:	2c 2f       	mov	r18, r28
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	2f 5f       	subi	r18, 0xFF	; 255
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	c8 01       	movw	r24, r16
    15a8:	82 0f       	add	r24, r18
    15aa:	93 1f       	adc	r25, r19
    15ac:	a1 e8       	ldi	r26, 0x81	; 129
    15ae:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    15b0:	21 91       	ld	r18, Z+
    15b2:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    15b4:	e8 17       	cp	r30, r24
    15b6:	f9 07       	cpc	r31, r25
    15b8:	d9 f7       	brne	.-10     	; 0x15b0 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    15ba:	83 e0       	ldi	r24, 0x03	; 3
    15bc:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    15c0:	82 e0       	ldi	r24, 0x02	; 2
    15c2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    15c6:	cf 91       	pop	r28
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <PHY_TaskHandler+0x8>
    15d6:	1f 92       	push	r1
    15d8:	1f 92       	push	r1
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    15de:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <phyState>
    15e2:	82 30       	cpi	r24, 0x02	; 2
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <PHY_TaskHandler+0x1a>
    15e6:	65 c0       	rjmp	.+202    	; 0x16b2 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    15e8:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    15ec:	83 ff       	sbrs	r24, 3
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    15f0:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    15f4:	6a 2f       	mov	r22, r26
    15f6:	70 e0       	ldi	r23, 0x00	; 0
    15f8:	ab 01       	movw	r20, r22
    15fa:	4f 5f       	subi	r20, 0xFF	; 255
    15fc:	5f 4f       	sbci	r21, 0xFF	; 255
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1604:	fc 01       	movw	r30, r24
    1606:	e0 58       	subi	r30, 0x80	; 128
    1608:	fe 4f       	sbci	r31, 0xFE	; 254
    160a:	30 81       	ld	r19, Z
    160c:	fc 01       	movw	r30, r24
    160e:	e0 51       	subi	r30, 0x10	; 16
    1610:	f9 4f       	sbci	r31, 0xF9	; 249
    1612:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1614:	2f 5f       	subi	r18, 0xFF	; 255
    1616:	82 2f       	mov	r24, r18
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	84 17       	cp	r24, r20
    161c:	95 07       	cpc	r25, r21
    161e:	94 f3       	brlt	.-28     	; 0x1604 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1620:	80 ef       	ldi	r24, 0xF0	; 240
    1622:	96 e0       	ldi	r25, 0x06	; 6
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1628:	a2 50       	subi	r26, 0x02	; 2
    162a:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    162c:	fb 01       	movw	r30, r22
    162e:	e0 51       	subi	r30, 0x10	; 16
    1630:	f9 4f       	sbci	r31, 0xF9	; 249
    1632:	80 81       	ld	r24, Z
    1634:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1636:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    163a:	8a 55       	subi	r24, 0x5A	; 90
    163c:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    163e:	ce 01       	movw	r24, r28
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	b6 da       	rcall	.-2708   	; 0xbb0 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1644:	e1 e4       	ldi	r30, 0x41	; 65
    1646:	f1 e0       	ldi	r31, 0x01	; 1
    1648:	80 81       	ld	r24, Z
    164a:	8f 71       	andi	r24, 0x1F	; 31
    164c:	86 31       	cpi	r24, 0x16	; 22
    164e:	e1 f7       	brne	.-8      	; 0x1648 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1650:	ef e4       	ldi	r30, 0x4F	; 79
    1652:	f1 e0       	ldi	r31, 0x01	; 1
    1654:	80 81       	ld	r24, Z
    1656:	88 60       	ori	r24, 0x08	; 8
    1658:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    165a:	ec e4       	ldi	r30, 0x4C	; 76
    165c:	f1 e0       	ldi	r31, 0x01	; 1
    165e:	80 81       	ld	r24, Z
    1660:	8f 77       	andi	r24, 0x7F	; 127
    1662:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1664:	80 81       	ld	r24, Z
    1666:	80 68       	ori	r24, 0x80	; 128
    1668:	80 83       	st	Z, r24
    166a:	23 c0       	rjmp	.+70     	; 0x16b2 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    166c:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    1670:	86 ff       	sbrs	r24, 6
    1672:	1f c0       	rjmp	.+62     	; 0x16b2 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1674:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1678:	8f 71       	andi	r24, 0x1F	; 31
    167a:	89 31       	cpi	r24, 0x19	; 25
    167c:	a9 f4       	brne	.+42     	; 0x16a8 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    167e:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1682:	12 95       	swap	r17
    1684:	16 95       	lsr	r17
    1686:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1688:	49 f0       	breq	.+18     	; 0x169c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    168a:	13 30       	cpi	r17, 0x03	; 3
    168c:	21 f0       	breq	.+8      	; 0x1696 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    168e:	15 30       	cpi	r17, 0x05	; 5
    1690:	21 f0       	breq	.+8      	; 0x169a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1692:	13 e0       	ldi	r17, 0x03	; 3
    1694:	03 c0       	rjmp	.+6      	; 0x169c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1696:	11 e0       	ldi	r17, 0x01	; 1
    1698:	01 c0       	rjmp	.+2      	; 0x169c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    169a:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    169c:	1a df       	rcall	.-460    	; 0x14d2 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	80 93 70 07 	sts	0x0770, r24	; 0x800770 <phyState>

      PHY_DataConf(status);
    16a4:	81 2f       	mov	r24, r17
    16a6:	27 de       	rcall	.-946    	; 0x12f6 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    16a8:	ef e4       	ldi	r30, 0x4F	; 79
    16aa:	f1 e0       	ldi	r31, 0x01	; 1
    16ac:	80 81       	ld	r24, Z
    16ae:	80 64       	ori	r24, 0x40	; 64
    16b0:	80 83       	st	Z, r24
  }
}
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	1f 91       	pop	r17
    16c2:	08 95       	ret

000016c4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    16c4:	0e 94 bb 00 	call	0x176	; 0x176 <HAL_Init>
  SYS_TimerInit();
    16c8:	6d d0       	rcall	.+218    	; 0x17a4 <SYS_TimerInit>
  PHY_Init();
    16ca:	0f df       	rcall	.-482    	; 0x14ea <PHY_Init>
  NWK_Init();
    16cc:	0c 94 4a 02 	jmp	0x494	; 0x494 <NWK_Init>
    16d0:	08 95       	ret

000016d2 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    16d2:	7d df       	rcall	.-262    	; 0x15ce <PHY_TaskHandler>
  NWK_TaskHandler();
    16d4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    16d8:	8f c0       	rjmp	.+286    	; 0x17f8 <SYS_TimerTaskHandler>
    16da:	08 95       	ret

000016dc <placeTimer>:

      break;
    }
    prev = t;
  }
}
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	ec 01       	movw	r28, r24
    16e6:	80 91 71 07 	lds	r24, 0x0771	; 0x800771 <timers>
    16ea:	90 91 72 07 	lds	r25, 0x0772	; 0x800772 <timers+0x1>
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <placeTimer+0x18>
    16f2:	45 c0       	rjmp	.+138    	; 0x177e <placeTimer+0xa2>
    16f4:	4e 81       	ldd	r20, Y+6	; 0x06
    16f6:	5f 81       	ldd	r21, Y+7	; 0x07
    16f8:	68 85       	ldd	r22, Y+8	; 0x08
    16fa:	79 85       	ldd	r23, Y+9	; 0x09
    16fc:	fc 01       	movw	r30, r24
    16fe:	02 81       	ldd	r16, Z+2	; 0x02
    1700:	13 81       	ldd	r17, Z+3	; 0x03
    1702:	24 81       	ldd	r18, Z+4	; 0x04
    1704:	35 81       	ldd	r19, Z+5	; 0x05
    1706:	40 17       	cp	r20, r16
    1708:	51 07       	cpc	r21, r17
    170a:	62 07       	cpc	r22, r18
    170c:	73 07       	cpc	r23, r19
    170e:	60 f0       	brcs	.+24     	; 0x1728 <placeTimer+0x4c>
    1710:	dc 01       	movw	r26, r24
    1712:	17 c0       	rjmp	.+46     	; 0x1742 <placeTimer+0x66>
    1714:	02 81       	ldd	r16, Z+2	; 0x02
    1716:	13 81       	ldd	r17, Z+3	; 0x03
    1718:	24 81       	ldd	r18, Z+4	; 0x04
    171a:	35 81       	ldd	r19, Z+5	; 0x05
    171c:	40 17       	cp	r20, r16
    171e:	51 07       	cpc	r21, r17
    1720:	62 07       	cpc	r22, r18
    1722:	73 07       	cpc	r23, r19
    1724:	68 f4       	brcc	.+26     	; 0x1740 <placeTimer+0x64>
    1726:	03 c0       	rjmp	.+6      	; 0x172e <placeTimer+0x52>
    1728:	fc 01       	movw	r30, r24
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	04 1b       	sub	r16, r20
    1730:	15 0b       	sbc	r17, r21
    1732:	26 0b       	sbc	r18, r22
    1734:	37 0b       	sbc	r19, r23
    1736:	02 83       	std	Z+2, r16	; 0x02
    1738:	13 83       	std	Z+3, r17	; 0x03
    173a:	24 83       	std	Z+4, r18	; 0x04
    173c:	35 83       	std	Z+5, r19	; 0x05
    173e:	0a c0       	rjmp	.+20     	; 0x1754 <placeTimer+0x78>
    1740:	df 01       	movw	r26, r30
    1742:	40 1b       	sub	r20, r16
    1744:	51 0b       	sbc	r21, r17
    1746:	62 0b       	sbc	r22, r18
    1748:	73 0b       	sbc	r23, r19
    174a:	ed 91       	ld	r30, X+
    174c:	fc 91       	ld	r31, X
    174e:	11 97       	sbiw	r26, 0x01	; 1
    1750:	30 97       	sbiw	r30, 0x00	; 0
    1752:	01 f7       	brne	.-64     	; 0x1714 <placeTimer+0x38>
    1754:	4a 83       	std	Y+2, r20	; 0x02
    1756:	5b 83       	std	Y+3, r21	; 0x03
    1758:	6c 83       	std	Y+4, r22	; 0x04
    175a:	7d 83       	std	Y+5, r23	; 0x05
    175c:	10 97       	sbiw	r26, 0x00	; 0
    175e:	41 f0       	breq	.+16     	; 0x1770 <placeTimer+0x94>
    1760:	8d 91       	ld	r24, X+
    1762:	9c 91       	ld	r25, X
    1764:	11 97       	sbiw	r26, 0x01	; 1
    1766:	99 83       	std	Y+1, r25	; 0x01
    1768:	88 83       	st	Y, r24
    176a:	cd 93       	st	X+, r28
    176c:	dc 93       	st	X, r29
    176e:	15 c0       	rjmp	.+42     	; 0x179a <placeTimer+0xbe>
    1770:	99 83       	std	Y+1, r25	; 0x01
    1772:	88 83       	st	Y, r24
    1774:	d0 93 72 07 	sts	0x0772, r29	; 0x800772 <timers+0x1>
    1778:	c0 93 71 07 	sts	0x0771, r28	; 0x800771 <timers>
    177c:	0e c0       	rjmp	.+28     	; 0x179a <placeTimer+0xbe>
    177e:	19 82       	std	Y+1, r1	; 0x01
    1780:	18 82       	st	Y, r1
    1782:	8e 81       	ldd	r24, Y+6	; 0x06
    1784:	9f 81       	ldd	r25, Y+7	; 0x07
    1786:	a8 85       	ldd	r26, Y+8	; 0x08
    1788:	b9 85       	ldd	r27, Y+9	; 0x09
    178a:	8a 83       	std	Y+2, r24	; 0x02
    178c:	9b 83       	std	Y+3, r25	; 0x03
    178e:	ac 83       	std	Y+4, r26	; 0x04
    1790:	bd 83       	std	Y+5, r27	; 0x05
    1792:	d0 93 72 07 	sts	0x0772, r29	; 0x800772 <timers+0x1>
    1796:	c0 93 71 07 	sts	0x0771, r28	; 0x800771 <timers>
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	1f 91       	pop	r17
    17a0:	0f 91       	pop	r16
    17a2:	08 95       	ret

000017a4 <SYS_TimerInit>:
    17a4:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <timers+0x1>
    17a8:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <timers>
    17ac:	08 95       	ret

000017ae <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    17ae:	e0 91 71 07 	lds	r30, 0x0771	; 0x800771 <timers>
    17b2:	f0 91 72 07 	lds	r31, 0x0772	; 0x800772 <timers+0x1>
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	71 f0       	breq	.+28     	; 0x17d6 <SYS_TimerStarted+0x28>
    if (t == timer)
    17ba:	e8 17       	cp	r30, r24
    17bc:	f9 07       	cpc	r31, r25
    17be:	21 f4       	brne	.+8      	; 0x17c8 <SYS_TimerStarted+0x1a>
    17c0:	0c c0       	rjmp	.+24     	; 0x17da <SYS_TimerStarted+0x2c>
    17c2:	8e 17       	cp	r24, r30
    17c4:	9f 07       	cpc	r25, r31
    17c6:	59 f0       	breq	.+22     	; 0x17de <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    17c8:	01 90       	ld	r0, Z+
    17ca:	f0 81       	ld	r31, Z
    17cc:	e0 2d       	mov	r30, r0
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	c1 f7       	brne	.-16     	; 0x17c2 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	08 95       	ret
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	08 95       	ret
    17de:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    17e0:	08 95       	ret

000017e2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    17e8:	e2 df       	rcall	.-60     	; 0x17ae <SYS_TimerStarted>
    17ea:	81 11       	cpse	r24, r1
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <SYS_TimerStart+0x10>
    placeTimer(timer);
    17ee:	ce 01       	movw	r24, r28
    17f0:	75 df       	rcall	.-278    	; 0x16dc <placeTimer>
}
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    17f8:	cf 92       	push	r12
    17fa:	df 92       	push	r13
    17fc:	ef 92       	push	r14
    17fe:	ff 92       	push	r15
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1804:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <halTimerIrqCount>
    1808:	88 23       	and	r24, r24
    180a:	09 f4       	brne	.+2      	; 0x180e <SYS_TimerTaskHandler+0x16>
    180c:	59 c0       	rjmp	.+178    	; 0x18c0 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    180e:	8f b7       	in	r24, 0x3f	; 63
    1810:	f8 94       	cli
    cnt = halTimerIrqCount;
    1812:	c0 90 73 07 	lds	r12, 0x0773	; 0x800773 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1816:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    181a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    181c:	d1 2c       	mov	r13, r1
    181e:	e1 2c       	mov	r14, r1
    1820:	f1 2c       	mov	r15, r1
    1822:	cc 0c       	add	r12, r12
    1824:	dd 1c       	adc	r13, r13
    1826:	ee 1c       	adc	r14, r14
    1828:	ff 1c       	adc	r15, r15
    182a:	d7 01       	movw	r26, r14
    182c:	c6 01       	movw	r24, r12
    182e:	88 0f       	add	r24, r24
    1830:	99 1f       	adc	r25, r25
    1832:	aa 1f       	adc	r26, r26
    1834:	bb 1f       	adc	r27, r27
    1836:	88 0f       	add	r24, r24
    1838:	99 1f       	adc	r25, r25
    183a:	aa 1f       	adc	r26, r26
    183c:	bb 1f       	adc	r27, r27
    183e:	c8 0e       	add	r12, r24
    1840:	d9 1e       	adc	r13, r25
    1842:	ea 1e       	adc	r14, r26
    1844:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1846:	c0 91 71 07 	lds	r28, 0x0771	; 0x800771 <timers>
    184a:	d0 91 72 07 	lds	r29, 0x0772	; 0x800772 <timers+0x1>
    184e:	20 97       	sbiw	r28, 0x00	; 0
    1850:	b9 f1       	breq	.+110    	; 0x18c0 <SYS_TimerTaskHandler+0xc8>
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	9b 81       	ldd	r25, Y+3	; 0x03
    1856:	ac 81       	ldd	r26, Y+4	; 0x04
    1858:	bd 81       	ldd	r27, Y+5	; 0x05
    185a:	c8 16       	cp	r12, r24
    185c:	d9 06       	cpc	r13, r25
    185e:	ea 06       	cpc	r14, r26
    1860:	fb 06       	cpc	r15, r27
    1862:	10 f1       	brcs	.+68     	; 0x18a8 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1864:	c8 1a       	sub	r12, r24
    1866:	d9 0a       	sbc	r13, r25
    1868:	ea 0a       	sbc	r14, r26
    186a:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    186c:	88 81       	ld	r24, Y
    186e:	99 81       	ldd	r25, Y+1	; 0x01
    1870:	90 93 72 07 	sts	0x0772, r25	; 0x800772 <timers+0x1>
    1874:	80 93 71 07 	sts	0x0771, r24	; 0x800771 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1878:	8a 85       	ldd	r24, Y+10	; 0x0a
    187a:	81 30       	cpi	r24, 0x01	; 1
    187c:	11 f4       	brne	.+4      	; 0x1882 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    187e:	ce 01       	movw	r24, r28
    1880:	2d df       	rcall	.-422    	; 0x16dc <placeTimer>
    timer->handler(timer);
    1882:	eb 85       	ldd	r30, Y+11	; 0x0b
    1884:	fc 85       	ldd	r31, Y+12	; 0x0c
    1886:	ce 01       	movw	r24, r28
    1888:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    188a:	c0 91 71 07 	lds	r28, 0x0771	; 0x800771 <timers>
    188e:	d0 91 72 07 	lds	r29, 0x0772	; 0x800772 <timers+0x1>
    1892:	20 97       	sbiw	r28, 0x00	; 0
    1894:	a9 f0       	breq	.+42     	; 0x18c0 <SYS_TimerTaskHandler+0xc8>
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	ac 81       	ldd	r26, Y+4	; 0x04
    189c:	bd 81       	ldd	r27, Y+5	; 0x05
    189e:	c8 16       	cp	r12, r24
    18a0:	d9 06       	cpc	r13, r25
    18a2:	ea 06       	cpc	r14, r26
    18a4:	fb 06       	cpc	r15, r27
    18a6:	f0 f6       	brcc	.-68     	; 0x1864 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	9b 81       	ldd	r25, Y+3	; 0x03
    18ac:	ac 81       	ldd	r26, Y+4	; 0x04
    18ae:	bd 81       	ldd	r27, Y+5	; 0x05
    18b0:	8c 19       	sub	r24, r12
    18b2:	9d 09       	sbc	r25, r13
    18b4:	ae 09       	sbc	r26, r14
    18b6:	bf 09       	sbc	r27, r15
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	9b 83       	std	Y+3, r25	; 0x03
    18bc:	ac 83       	std	Y+4, r26	; 0x04
    18be:	bd 83       	std	Y+5, r27	; 0x05
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	08 95       	ret

000018ce <__floatunsisf>:
    18ce:	e8 94       	clt
    18d0:	09 c0       	rjmp	.+18     	; 0x18e4 <__floatsisf+0x12>

000018d2 <__floatsisf>:
    18d2:	97 fb       	bst	r25, 7
    18d4:	3e f4       	brtc	.+14     	; 0x18e4 <__floatsisf+0x12>
    18d6:	90 95       	com	r25
    18d8:	80 95       	com	r24
    18da:	70 95       	com	r23
    18dc:	61 95       	neg	r22
    18de:	7f 4f       	sbci	r23, 0xFF	; 255
    18e0:	8f 4f       	sbci	r24, 0xFF	; 255
    18e2:	9f 4f       	sbci	r25, 0xFF	; 255
    18e4:	99 23       	and	r25, r25
    18e6:	a9 f0       	breq	.+42     	; 0x1912 <__floatsisf+0x40>
    18e8:	f9 2f       	mov	r31, r25
    18ea:	96 e9       	ldi	r25, 0x96	; 150
    18ec:	bb 27       	eor	r27, r27
    18ee:	93 95       	inc	r25
    18f0:	f6 95       	lsr	r31
    18f2:	87 95       	ror	r24
    18f4:	77 95       	ror	r23
    18f6:	67 95       	ror	r22
    18f8:	b7 95       	ror	r27
    18fa:	f1 11       	cpse	r31, r1
    18fc:	f8 cf       	rjmp	.-16     	; 0x18ee <__floatsisf+0x1c>
    18fe:	fa f4       	brpl	.+62     	; 0x193e <__floatsisf+0x6c>
    1900:	bb 0f       	add	r27, r27
    1902:	11 f4       	brne	.+4      	; 0x1908 <__floatsisf+0x36>
    1904:	60 ff       	sbrs	r22, 0
    1906:	1b c0       	rjmp	.+54     	; 0x193e <__floatsisf+0x6c>
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	8f 4f       	sbci	r24, 0xFF	; 255
    190e:	9f 4f       	sbci	r25, 0xFF	; 255
    1910:	16 c0       	rjmp	.+44     	; 0x193e <__floatsisf+0x6c>
    1912:	88 23       	and	r24, r24
    1914:	11 f0       	breq	.+4      	; 0x191a <__floatsisf+0x48>
    1916:	96 e9       	ldi	r25, 0x96	; 150
    1918:	11 c0       	rjmp	.+34     	; 0x193c <__floatsisf+0x6a>
    191a:	77 23       	and	r23, r23
    191c:	21 f0       	breq	.+8      	; 0x1926 <__floatsisf+0x54>
    191e:	9e e8       	ldi	r25, 0x8E	; 142
    1920:	87 2f       	mov	r24, r23
    1922:	76 2f       	mov	r23, r22
    1924:	05 c0       	rjmp	.+10     	; 0x1930 <__floatsisf+0x5e>
    1926:	66 23       	and	r22, r22
    1928:	71 f0       	breq	.+28     	; 0x1946 <__floatsisf+0x74>
    192a:	96 e8       	ldi	r25, 0x86	; 134
    192c:	86 2f       	mov	r24, r22
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	2a f0       	brmi	.+10     	; 0x193e <__floatsisf+0x6c>
    1934:	9a 95       	dec	r25
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	88 1f       	adc	r24, r24
    193c:	da f7       	brpl	.-10     	; 0x1934 <__floatsisf+0x62>
    193e:	88 0f       	add	r24, r24
    1940:	96 95       	lsr	r25
    1942:	87 95       	ror	r24
    1944:	97 f9       	bld	r25, 7
    1946:	08 95       	ret

00001948 <__udivmodsi4>:
    1948:	a1 e2       	ldi	r26, 0x21	; 33
    194a:	1a 2e       	mov	r1, r26
    194c:	aa 1b       	sub	r26, r26
    194e:	bb 1b       	sub	r27, r27
    1950:	fd 01       	movw	r30, r26
    1952:	0d c0       	rjmp	.+26     	; 0x196e <__udivmodsi4_ep>

00001954 <__udivmodsi4_loop>:
    1954:	aa 1f       	adc	r26, r26
    1956:	bb 1f       	adc	r27, r27
    1958:	ee 1f       	adc	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	a2 17       	cp	r26, r18
    195e:	b3 07       	cpc	r27, r19
    1960:	e4 07       	cpc	r30, r20
    1962:	f5 07       	cpc	r31, r21
    1964:	20 f0       	brcs	.+8      	; 0x196e <__udivmodsi4_ep>
    1966:	a2 1b       	sub	r26, r18
    1968:	b3 0b       	sbc	r27, r19
    196a:	e4 0b       	sbc	r30, r20
    196c:	f5 0b       	sbc	r31, r21

0000196e <__udivmodsi4_ep>:
    196e:	66 1f       	adc	r22, r22
    1970:	77 1f       	adc	r23, r23
    1972:	88 1f       	adc	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	1a 94       	dec	r1
    1978:	69 f7       	brne	.-38     	; 0x1954 <__udivmodsi4_loop>
    197a:	60 95       	com	r22
    197c:	70 95       	com	r23
    197e:	80 95       	com	r24
    1980:	90 95       	com	r25
    1982:	9b 01       	movw	r18, r22
    1984:	ac 01       	movw	r20, r24
    1986:	bd 01       	movw	r22, r26
    1988:	cf 01       	movw	r24, r30
    198a:	08 95       	ret

0000198c <__divmodsi4>:
    198c:	05 2e       	mov	r0, r21
    198e:	97 fb       	bst	r25, 7
    1990:	16 f4       	brtc	.+4      	; 0x1996 <__divmodsi4+0xa>
    1992:	00 94       	com	r0
    1994:	0f d0       	rcall	.+30     	; 0x19b4 <__negsi2>
    1996:	57 fd       	sbrc	r21, 7
    1998:	05 d0       	rcall	.+10     	; 0x19a4 <__divmodsi4_neg2>
    199a:	d6 df       	rcall	.-84     	; 0x1948 <__udivmodsi4>
    199c:	07 fc       	sbrc	r0, 7
    199e:	02 d0       	rcall	.+4      	; 0x19a4 <__divmodsi4_neg2>
    19a0:	46 f4       	brtc	.+16     	; 0x19b2 <__divmodsi4_exit>
    19a2:	08 c0       	rjmp	.+16     	; 0x19b4 <__negsi2>

000019a4 <__divmodsi4_neg2>:
    19a4:	50 95       	com	r21
    19a6:	40 95       	com	r20
    19a8:	30 95       	com	r19
    19aa:	21 95       	neg	r18
    19ac:	3f 4f       	sbci	r19, 0xFF	; 255
    19ae:	4f 4f       	sbci	r20, 0xFF	; 255
    19b0:	5f 4f       	sbci	r21, 0xFF	; 255

000019b2 <__divmodsi4_exit>:
    19b2:	08 95       	ret

000019b4 <__negsi2>:
    19b4:	90 95       	com	r25
    19b6:	80 95       	com	r24
    19b8:	70 95       	com	r23
    19ba:	61 95       	neg	r22
    19bc:	7f 4f       	sbci	r23, 0xFF	; 255
    19be:	8f 4f       	sbci	r24, 0xFF	; 255
    19c0:	9f 4f       	sbci	r25, 0xFF	; 255
    19c2:	08 95       	ret

000019c4 <do_rand>:
    19c4:	8f 92       	push	r8
    19c6:	9f 92       	push	r9
    19c8:	af 92       	push	r10
    19ca:	bf 92       	push	r11
    19cc:	cf 92       	push	r12
    19ce:	df 92       	push	r13
    19d0:	ef 92       	push	r14
    19d2:	ff 92       	push	r15
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	ec 01       	movw	r28, r24
    19da:	68 81       	ld	r22, Y
    19dc:	79 81       	ldd	r23, Y+1	; 0x01
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	9b 81       	ldd	r25, Y+3	; 0x03
    19e2:	61 15       	cp	r22, r1
    19e4:	71 05       	cpc	r23, r1
    19e6:	81 05       	cpc	r24, r1
    19e8:	91 05       	cpc	r25, r1
    19ea:	21 f4       	brne	.+8      	; 0x19f4 <do_rand+0x30>
    19ec:	64 e2       	ldi	r22, 0x24	; 36
    19ee:	79 ed       	ldi	r23, 0xD9	; 217
    19f0:	8b e5       	ldi	r24, 0x5B	; 91
    19f2:	97 e0       	ldi	r25, 0x07	; 7
    19f4:	2d e1       	ldi	r18, 0x1D	; 29
    19f6:	33 ef       	ldi	r19, 0xF3	; 243
    19f8:	41 e0       	ldi	r20, 0x01	; 1
    19fa:	50 e0       	ldi	r21, 0x00	; 0
    19fc:	c7 df       	rcall	.-114    	; 0x198c <__divmodsi4>
    19fe:	49 01       	movw	r8, r18
    1a00:	5a 01       	movw	r10, r20
    1a02:	9b 01       	movw	r18, r22
    1a04:	ac 01       	movw	r20, r24
    1a06:	a7 ea       	ldi	r26, 0xA7	; 167
    1a08:	b1 e4       	ldi	r27, 0x41	; 65
    1a0a:	3a d0       	rcall	.+116    	; 0x1a80 <__muluhisi3>
    1a0c:	6b 01       	movw	r12, r22
    1a0e:	7c 01       	movw	r14, r24
    1a10:	ac ee       	ldi	r26, 0xEC	; 236
    1a12:	b4 ef       	ldi	r27, 0xF4	; 244
    1a14:	a5 01       	movw	r20, r10
    1a16:	94 01       	movw	r18, r8
    1a18:	3f d0       	rcall	.+126    	; 0x1a98 <__mulohisi3>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	8c 0d       	add	r24, r12
    1a20:	9d 1d       	adc	r25, r13
    1a22:	ae 1d       	adc	r26, r14
    1a24:	bf 1d       	adc	r27, r15
    1a26:	b7 ff       	sbrs	r27, 7
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <do_rand+0x6c>
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	a1 09       	sbc	r26, r1
    1a2e:	b0 48       	sbci	r27, 0x80	; 128
    1a30:	88 83       	st	Y, r24
    1a32:	99 83       	std	Y+1, r25	; 0x01
    1a34:	aa 83       	std	Y+2, r26	; 0x02
    1a36:	bb 83       	std	Y+3, r27	; 0x03
    1a38:	9f 77       	andi	r25, 0x7F	; 127
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	bf 90       	pop	r11
    1a48:	af 90       	pop	r10
    1a4a:	9f 90       	pop	r9
    1a4c:	8f 90       	pop	r8
    1a4e:	08 95       	ret

00001a50 <rand_r>:
    1a50:	b9 cf       	rjmp	.-142    	; 0x19c4 <do_rand>

00001a52 <rand>:
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	92 e0       	ldi	r25, 0x02	; 2
    1a56:	b6 cf       	rjmp	.-148    	; 0x19c4 <do_rand>

00001a58 <srand>:
    1a58:	a0 e0       	ldi	r26, 0x00	; 0
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1a60:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1a64:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    1a68:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1a6c:	08 95       	ret

00001a6e <memcpy>:
    1a6e:	fb 01       	movw	r30, r22
    1a70:	dc 01       	movw	r26, r24
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <memcpy+0xa>
    1a74:	01 90       	ld	r0, Z+
    1a76:	0d 92       	st	X+, r0
    1a78:	41 50       	subi	r20, 0x01	; 1
    1a7a:	50 40       	sbci	r21, 0x00	; 0
    1a7c:	d8 f7       	brcc	.-10     	; 0x1a74 <memcpy+0x6>
    1a7e:	08 95       	ret

00001a80 <__muluhisi3>:
    1a80:	0f d0       	rcall	.+30     	; 0x1aa0 <__umulhisi3>
    1a82:	a5 9f       	mul	r26, r21
    1a84:	90 0d       	add	r25, r0
    1a86:	b4 9f       	mul	r27, r20
    1a88:	90 0d       	add	r25, r0
    1a8a:	a4 9f       	mul	r26, r20
    1a8c:	80 0d       	add	r24, r0
    1a8e:	91 1d       	adc	r25, r1
    1a90:	11 24       	eor	r1, r1
    1a92:	08 95       	ret

00001a94 <__mulshisi3>:
    1a94:	b7 ff       	sbrs	r27, 7
    1a96:	f4 cf       	rjmp	.-24     	; 0x1a80 <__muluhisi3>

00001a98 <__mulohisi3>:
    1a98:	f3 df       	rcall	.-26     	; 0x1a80 <__muluhisi3>
    1a9a:	82 1b       	sub	r24, r18
    1a9c:	93 0b       	sbc	r25, r19
    1a9e:	08 95       	ret

00001aa0 <__umulhisi3>:
    1aa0:	a2 9f       	mul	r26, r18
    1aa2:	b0 01       	movw	r22, r0
    1aa4:	b3 9f       	mul	r27, r19
    1aa6:	c0 01       	movw	r24, r0
    1aa8:	a3 9f       	mul	r26, r19
    1aaa:	70 0d       	add	r23, r0
    1aac:	81 1d       	adc	r24, r1
    1aae:	11 24       	eor	r1, r1
    1ab0:	91 1d       	adc	r25, r1
    1ab2:	b2 9f       	mul	r27, r18
    1ab4:	70 0d       	add	r23, r0
    1ab6:	81 1d       	adc	r24, r1
    1ab8:	11 24       	eor	r1, r1
    1aba:	91 1d       	adc	r25, r1
    1abc:	08 95       	ret

00001abe <_exit>:
    1abe:	f8 94       	cli

00001ac0 <__stop_program>:
    1ac0:	ff cf       	rjmp	.-2      	; 0x1ac0 <__stop_program>
