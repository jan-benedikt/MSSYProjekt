
Brana.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  00001c70  00001d04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000808  00800204  00800204  00001d08  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d38  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000418  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006287  00000000  00000000  00002190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002da4  00000000  00000000  00008417  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027d0  00000000  00000000  0000b1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009e8  00000000  00000000  0000d98c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e5b  00000000  00000000  0000e374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000258c  00000000  00000000  000101cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  0001275b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	da c0       	rjmp	.+436    	; 0x1ea <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c1       	rjmp	.+752    	; 0x382 <__vector_36>
      92:	00 00       	nop
      94:	5a c1       	rjmp	.+692    	; 0x34a <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e0 e7       	ldi	r30, 0x70	; 112
     14c:	fc e1       	ldi	r31, 0x1C	; 28
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	2a e0       	ldi	r18, 0x0A	; 10
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	ac 30       	cpi	r26, 0x0C	; 12
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	35 d2       	rcall	.+1130   	; 0x5da <main>
     170:	0c 94 36 0e 	jmp	0x1c6c	; 0x1c6c <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     176:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	a8 95       	wdr
     17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     182:	88 61       	ori	r24, 0x18	; 24
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     18c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     18e:	e1 e6       	ldi	r30, 0x61	; 97
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	80 83       	st	Z, r24
  CLKPR = 0;
     196:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     198:	78 94       	sei

  HAL_TimerInit();
     19a:	01 c0       	rjmp	.+2      	; 0x19e <HAL_TimerInit>
     19c:	08 95       	ret

0000019e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     19e:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <halTimerIrqCount>
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	97 e2       	ldi	r25, 0x27	; 39
     1a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     1ae:	e1 ea       	ldi	r30, 0xA1	; 161
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	88 e0       	ldi	r24, 0x08	; 8
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
     1bc:	e2 e7       	ldi	r30, 0x72	; 114
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	80 83       	st	Z, r24
     1c6:	08 95       	ret

000001c8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
  halTimerIrqCount++;
     1d4:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <halTimerIrqCount>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <halTimerIrqCount>
}
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
  halSleepTimerEvent = true;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
}
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     208:	dc 01       	movw	r26, r24
     20a:	cb 01       	movw	r24, r22
     20c:	88 0f       	add	r24, r24
     20e:	99 1f       	adc	r25, r25
     210:	aa 1f       	adc	r26, r26
     212:	bb 1f       	adc	r27, r27
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	aa 1f       	adc	r26, r26
     21a:	bb 1f       	adc	r27, r27
     21c:	9c 01       	movw	r18, r24
     21e:	ad 01       	movw	r20, r26
     220:	22 0f       	add	r18, r18
     222:	33 1f       	adc	r19, r19
     224:	44 1f       	adc	r20, r20
     226:	55 1f       	adc	r21, r21
     228:	22 0f       	add	r18, r18
     22a:	33 1f       	adc	r19, r19
     22c:	44 1f       	adc	r20, r20
     22e:	55 1f       	adc	r21, r21
     230:	60 e0       	ldi	r22, 0x00	; 0
     232:	74 e2       	ldi	r23, 0x24	; 36
     234:	84 ef       	ldi	r24, 0xF4	; 244
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__udivmodsi4>
     23c:	ba 01       	movw	r22, r20
     23e:	a9 01       	movw	r20, r18
     240:	41 50       	subi	r20, 0x01	; 1
     242:	51 09       	sbc	r21, r1
     244:	61 09       	sbc	r22, r1
     246:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     248:	bb 27       	eor	r27, r27
     24a:	a7 2f       	mov	r26, r23
     24c:	96 2f       	mov	r25, r22
     24e:	85 2f       	mov	r24, r21
     250:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
  UBRRxL = (brr & 0xff);
     254:	40 93 cc 00 	sts	0x00CC, r20	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
  UCSRxA = (1 << U2X1);
     258:	a8 ec       	ldi	r26, 0xC8	; 200
     25a:	b0 e0       	ldi	r27, 0x00	; 0
     25c:	82 e0       	ldi	r24, 0x02	; 2
     25e:	8c 93       	st	X, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     260:	88 e9       	ldi	r24, 0x98	; 152
     262:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7000c9>
  UCSRxC = (3 << UCSZ10);
     266:	86 e0       	ldi	r24, 0x06	; 6
     268:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7000ca>

  txFifo.data = txData;
     26c:	e3 ea       	ldi	r30, 0xA3	; 163
     26e:	f3 e0       	ldi	r31, 0x03	; 3
     270:	8a ed       	ldi	r24, 0xDA	; 218
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	91 87       	std	Z+9, r25	; 0x09
     276:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     278:	b5 83       	std	Z+5, r27	; 0x05
     27a:	a4 83       	std	Z+4, r26	; 0x04
  txFifo.bytes = 0;
     27c:	17 82       	std	Z+7, r1	; 0x07
     27e:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     280:	11 82       	std	Z+1, r1	; 0x01
     282:	10 82       	st	Z, r1
  txFifo.tail = 0;
     284:	13 82       	std	Z+3, r1	; 0x03
     286:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     288:	e0 ed       	ldi	r30, 0xD0	; 208
     28a:	f2 e0       	ldi	r31, 0x02	; 2
     28c:	87 e0       	ldi	r24, 0x07	; 7
     28e:	92 e0       	ldi	r25, 0x02	; 2
     290:	91 87       	std	Z+9, r25	; 0x09
     292:	80 87       	std	Z+8, r24	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     294:	b5 83       	std	Z+5, r27	; 0x05
     296:	a4 83       	std	Z+4, r26	; 0x04
  rxFifo.bytes = 0;
     298:	17 82       	std	Z+7, r1	; 0x07
     29a:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     29c:	11 82       	std	Z+1, r1	; 0x01
     29e:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     2a0:	13 82       	std	Z+3, r1	; 0x03
     2a2:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <udrEmpty>
  newData = false;
     2aa:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <newData>
     2ae:	08 95       	ret

000002b0 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     2b4:	e3 ea       	ldi	r30, 0xA3	; 163
     2b6:	f3 e0       	ldi	r31, 0x03	; 3
     2b8:	26 81       	ldd	r18, Z+6	; 0x06
     2ba:	37 81       	ldd	r19, Z+7	; 0x07
     2bc:	64 81       	ldd	r22, Z+4	; 0x04
     2be:	75 81       	ldd	r23, Z+5	; 0x05
     2c0:	26 17       	cp	r18, r22
     2c2:	37 07       	cpc	r19, r23
     2c4:	c9 f0       	breq	.+50     	; 0x2f8 <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     2c6:	c0 85       	ldd	r28, Z+8	; 0x08
     2c8:	d1 85       	ldd	r29, Z+9	; 0x09
     2ca:	42 81       	ldd	r20, Z+2	; 0x02
     2cc:	53 81       	ldd	r21, Z+3	; 0x03
     2ce:	da 01       	movw	r26, r20
     2d0:	11 96       	adiw	r26, 0x01	; 1
     2d2:	b3 83       	std	Z+3, r27	; 0x03
     2d4:	a2 83       	std	Z+2, r26	; 0x02
     2d6:	fe 01       	movw	r30, r28
     2d8:	e4 0f       	add	r30, r20
     2da:	f5 1f       	adc	r31, r21
     2dc:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     2de:	6a 17       	cp	r22, r26
     2e0:	7b 07       	cpc	r23, r27
     2e2:	21 f4       	brne	.+8      	; 0x2ec <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     2e4:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <txFifo+0x3>
     2e8:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <txFifo+0x2>
  txFifo.bytes++;
     2ec:	2f 5f       	subi	r18, 0xFF	; 255
     2ee:	3f 4f       	sbci	r19, 0xFF	; 255
     2f0:	30 93 aa 03 	sts	0x03AA, r19	; 0x8003aa <txFifo+0x7>
     2f4:	20 93 a9 03 	sts	0x03A9, r18	; 0x8003a9 <txFifo+0x6>
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

000002fe <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     2fe:	4f b7       	in	r20, 0x3f	; 63
     300:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     302:	e0 ed       	ldi	r30, 0xD0	; 208
     304:	f2 e0       	ldi	r31, 0x02	; 2
     306:	20 85       	ldd	r18, Z+8	; 0x08
     308:	31 85       	ldd	r19, Z+9	; 0x09
     30a:	80 81       	ld	r24, Z
     30c:	91 81       	ldd	r25, Z+1	; 0x01
     30e:	bc 01       	movw	r22, r24
     310:	6f 5f       	subi	r22, 0xFF	; 255
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	71 83       	std	Z+1, r23	; 0x01
     316:	60 83       	st	Z, r22
     318:	d9 01       	movw	r26, r18
     31a:	a8 0f       	add	r26, r24
     31c:	b9 1f       	adc	r27, r25
     31e:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     320:	60 81       	ld	r22, Z
     322:	71 81       	ldd	r23, Z+1	; 0x01
     324:	24 81       	ldd	r18, Z+4	; 0x04
     326:	35 81       	ldd	r19, Z+5	; 0x05
     328:	62 17       	cp	r22, r18
     32a:	73 07       	cpc	r23, r19
     32c:	21 f4       	brne	.+8      	; 0x336 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     32e:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <rxFifo+0x1>
     332:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <rxFifo>
    rxFifo.bytes--;
     336:	e0 ed       	ldi	r30, 0xD0	; 208
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	26 81       	ldd	r18, Z+6	; 0x06
     33c:	37 81       	ldd	r19, Z+7	; 0x07
     33e:	21 50       	subi	r18, 0x01	; 1
     340:	31 09       	sbc	r19, r1
     342:	37 83       	std	Z+7, r19	; 0x07
     344:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     346:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     348:	08 95       	ret

0000034a <__vector_37>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	0b b6       	in	r0, 0x3b	; 59
     356:	0f 92       	push	r0
     358:	8f 93       	push	r24
     35a:	ef 93       	push	r30
     35c:	ff 93       	push	r31
  udrEmpty = true;
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     364:	e9 ec       	ldi	r30, 0xC9	; 201
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	8f 7d       	andi	r24, 0xDF	; 223
     36c:	80 83       	st	Z, r24
}
     36e:	ff 91       	pop	r31
     370:	ef 91       	pop	r30
     372:	8f 91       	pop	r24
     374:	0f 90       	pop	r0
     376:	0b be       	out	0x3b, r0	; 59
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	0b b6       	in	r0, 0x3b	; 59
     38e:	0f 92       	push	r0
     390:	2f 93       	push	r18
     392:	3f 93       	push	r19
     394:	4f 93       	push	r20
     396:	5f 93       	push	r21
     398:	6f 93       	push	r22
     39a:	7f 93       	push	r23
     39c:	8f 93       	push	r24
     39e:	9f 93       	push	r25
     3a0:	af 93       	push	r26
     3a2:	bf 93       	push	r27
     3a4:	ef 93       	push	r30
     3a6:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     3a8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  uint8_t byte = UDRx;
     3ac:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     3b0:	8c 71       	andi	r24, 0x1C	; 28
     3b2:	59 f5       	brne	.+86     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
  {
    if (rxFifo.bytes == rxFifo.size)
     3b4:	e0 ed       	ldi	r30, 0xD0	; 208
     3b6:	f2 e0       	ldi	r31, 0x02	; 2
     3b8:	46 81       	ldd	r20, Z+6	; 0x06
     3ba:	57 81       	ldd	r21, Z+7	; 0x07
     3bc:	84 81       	ldd	r24, Z+4	; 0x04
     3be:	95 81       	ldd	r25, Z+5	; 0x05
     3c0:	48 17       	cp	r20, r24
     3c2:	59 07       	cpc	r21, r25
     3c4:	11 f1       	breq	.+68     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     3c6:	40 85       	ldd	r20, Z+8	; 0x08
     3c8:	51 85       	ldd	r21, Z+9	; 0x09
     3ca:	82 81       	ldd	r24, Z+2	; 0x02
     3cc:	93 81       	ldd	r25, Z+3	; 0x03
     3ce:	bc 01       	movw	r22, r24
     3d0:	6f 5f       	subi	r22, 0xFF	; 255
     3d2:	7f 4f       	sbci	r23, 0xFF	; 255
     3d4:	73 83       	std	Z+3, r23	; 0x03
     3d6:	62 83       	std	Z+2, r22	; 0x02
     3d8:	da 01       	movw	r26, r20
     3da:	a8 0f       	add	r26, r24
     3dc:	b9 1f       	adc	r27, r25
     3de:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     3e0:	22 81       	ldd	r18, Z+2	; 0x02
     3e2:	33 81       	ldd	r19, Z+3	; 0x03
     3e4:	84 81       	ldd	r24, Z+4	; 0x04
     3e6:	95 81       	ldd	r25, Z+5	; 0x05
     3e8:	28 17       	cp	r18, r24
     3ea:	39 07       	cpc	r19, r25
     3ec:	21 f4       	brne	.+8      	; 0x3f6 <__vector_36+0x74>
      rxFifo.tail = 0;
     3ee:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <rxFifo+0x3>
     3f2:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <rxFifo+0x2>
    rxFifo.bytes++;
     3f6:	e0 ed       	ldi	r30, 0xD0	; 208
     3f8:	f2 e0       	ldi	r31, 0x02	; 2
     3fa:	86 81       	ldd	r24, Z+6	; 0x06
     3fc:	97 81       	ldd	r25, Z+7	; 0x07
     3fe:	01 96       	adiw	r24, 0x01	; 1
     400:	97 83       	std	Z+7, r25	; 0x07
     402:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     40a:	ff 91       	pop	r31
     40c:	ef 91       	pop	r30
     40e:	bf 91       	pop	r27
     410:	af 91       	pop	r26
     412:	9f 91       	pop	r25
     414:	8f 91       	pop	r24
     416:	7f 91       	pop	r23
     418:	6f 91       	pop	r22
     41a:	5f 91       	pop	r21
     41c:	4f 91       	pop	r20
     41e:	3f 91       	pop	r19
     420:	2f 91       	pop	r18
     422:	0f 90       	pop	r0
     424:	0b be       	out	0x3b, r0	; 59
     426:	0f 90       	pop	r0
     428:	0f be       	out	0x3f, r0	; 63
     42a:	0f 90       	pop	r0
     42c:	1f 90       	pop	r1
     42e:	18 95       	reti

00000430 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     430:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <txFifo+0x6>
     434:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <txFifo+0x7>
     438:	00 97       	sbiw	r24, 0x00	; 0
     43a:	69 f1       	breq	.+90     	; 0x496 <HAL_UartTaskHandler+0x66>
     43c:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <udrEmpty>
     440:	22 23       	and	r18, r18
     442:	49 f1       	breq	.+82     	; 0x496 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     444:	e3 ea       	ldi	r30, 0xA3	; 163
     446:	f3 e0       	ldi	r31, 0x03	; 3
     448:	60 85       	ldd	r22, Z+8	; 0x08
     44a:	71 85       	ldd	r23, Z+9	; 0x09
     44c:	20 81       	ld	r18, Z
     44e:	31 81       	ldd	r19, Z+1	; 0x01
     450:	a9 01       	movw	r20, r18
     452:	4f 5f       	subi	r20, 0xFF	; 255
     454:	5f 4f       	sbci	r21, 0xFF	; 255
     456:	51 83       	std	Z+1, r21	; 0x01
     458:	40 83       	st	Z, r20
     45a:	db 01       	movw	r26, r22
     45c:	a2 0f       	add	r26, r18
     45e:	b3 1f       	adc	r27, r19
     460:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     462:	64 81       	ldd	r22, Z+4	; 0x04
     464:	75 81       	ldd	r23, Z+5	; 0x05
     466:	46 17       	cp	r20, r22
     468:	57 07       	cpc	r21, r23
     46a:	21 f4       	brne	.+8      	; 0x474 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     46c:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <txFifo+0x1>
     470:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <txFifo>
    txFifo.bytes--;
     474:	01 97       	sbiw	r24, 0x01	; 1
     476:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <txFifo+0x7>
     47a:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <txFifo+0x6>

    ATOMIC_SECTION_ENTER
     47e:	9f b7       	in	r25, 0x3f	; 63
     480:	f8 94       	cli
      UDRx = byte;
     482:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
      UCSRxB |= (1 << UDRIE1);
     486:	e9 ec       	ldi	r30, 0xC9	; 201
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	80 83       	st	Z, r24
      udrEmpty = false;
     490:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <udrEmpty>
    ATOMIC_SECTION_LEAVE
     494:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     496:	2f b7       	in	r18, 0x3f	; 63
     498:	f8 94       	cli
      new = newData;
     49a:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <newData>
      newData = false;
     49e:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <newData>
      bytes = rxFifo.bytes;
     4a2:	40 91 d6 02 	lds	r20, 0x02D6	; 0x8002d6 <rxFifo+0x6>
     4a6:	50 91 d7 02 	lds	r21, 0x02D7	; 0x8002d7 <rxFifo+0x7>
    ATOMIC_SECTION_LEAVE
     4aa:	2f bf       	out	0x3f, r18	; 63

    if (new)
     4ac:	99 23       	and	r25, r25
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <HAL_UartTaskHandler+0x84>
      HAL_UartBytesReceived(bytes);
     4b0:	ca 01       	movw	r24, r20
     4b2:	64 c0       	rjmp	.+200    	; 0x57c <HAL_UartBytesReceived>
     4b4:	08 95       	ret

000004b6 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
	appDataReqBusy = false;
     4b6:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <appDataReqBusy>
     4ba:	08 95       	ret

000004bc <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
	if (appDataReqBusy || 0 == appUartBufferPtr)
     4c0:	80 91 88 04 	lds	r24, 0x0488	; 0x800488 <appDataReqBusy>
     4c4:	81 11       	cpse	r24, r1
     4c6:	26 c0       	rjmp	.+76     	; 0x514 <appSendData+0x58>
     4c8:	c0 91 ad 03 	lds	r28, 0x03AD	; 0x8003ad <appUartBufferPtr>
     4cc:	cc 23       	and	r28, r28
     4ce:	11 f1       	breq	.+68     	; 0x514 <appSendData+0x58>
	return;

	memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     4d0:	4c 2f       	mov	r20, r28
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	6e ea       	ldi	r22, 0xAE	; 174
     4d6:	73 e0       	ldi	r23, 0x03	; 3
     4d8:	8b e1       	ldi	r24, 0x1B	; 27
     4da:	94 e0       	ldi	r25, 0x04	; 4
     4dc:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <memcpy>

	appDataReq.dstAddr = 1-APP_ADDR;
     4e0:	e9 e8       	ldi	r30, 0x89	; 137
     4e2:	f4 e0       	ldi	r31, 0x04	; 4
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	96 83       	std	Z+6, r25	; 0x06
     4ea:	85 83       	std	Z+5, r24	; 0x05
	appDataReq.dstEndpoint = APP_ENDPOINT;
     4ec:	d1 e0       	ldi	r29, 0x01	; 1
     4ee:	d7 83       	std	Z+7, r29	; 0x07
	appDataReq.srcEndpoint = APP_ENDPOINT;
     4f0:	d0 87       	std	Z+8, r29	; 0x08
	appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	81 87       	std	Z+9, r24	; 0x09
	appDataReq.data = appDataReqBuffer;
     4f6:	8b e1       	ldi	r24, 0x1B	; 27
     4f8:	94 e0       	ldi	r25, 0x04	; 4
     4fa:	93 87       	std	Z+11, r25	; 0x0b
     4fc:	82 87       	std	Z+10, r24	; 0x0a
	appDataReq.size = appUartBufferPtr;
     4fe:	c4 87       	std	Z+12, r28	; 0x0c
	appDataReq.confirm = appDataConf;
     500:	8b e5       	ldi	r24, 0x5B	; 91
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	96 87       	std	Z+14, r25	; 0x0e
     506:	85 87       	std	Z+13, r24	; 0x0d
	NWK_DataReq(&appDataReq);
     508:	cf 01       	movw	r24, r30
     50a:	f5 d0       	rcall	.+490    	; 0x6f6 <NWK_DataReq>

	appUartBufferPtr = 0;
     50c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <appUartBufferPtr>
	appDataReqBusy = true;
     510:	d0 93 88 04 	sts	0x0488, r29	; 0x800488 <appDataReqBusy>
}
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
	appSendData();
     51a:	d0 cf       	rjmp	.-96     	; 0x4bc <appSendData>
     51c:	08 95       	ret

0000051e <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	7c 01       	movw	r14, r24
	for (uint8_t i = 0; i < ind->size; i++){
     52a:	dc 01       	movw	r26, r24
     52c:	19 96       	adiw	r26, 0x09	; 9
     52e:	8c 91       	ld	r24, X
     530:	88 23       	and	r24, r24
     532:	e1 f0       	breq	.+56     	; 0x56c <appDataInd+0x4e>
     534:	10 e0       	ldi	r17, 0x00	; 0
		HAL_UartWriteByte(ind->data[i]);
     536:	c1 2f       	mov	r28, r17
     538:	d0 e0       	ldi	r29, 0x00	; 0
     53a:	d7 01       	movw	r26, r14
     53c:	17 96       	adiw	r26, 0x07	; 7
     53e:	ed 91       	ld	r30, X+
     540:	fc 91       	ld	r31, X
     542:	18 97       	sbiw	r26, 0x08	; 8
     544:	ec 0f       	add	r30, r28
     546:	fd 1f       	adc	r31, r29
     548:	80 81       	ld	r24, Z
     54a:	b2 de       	rcall	.-668    	; 0x2b0 <HAL_UartWriteByte>
		appDataReqBuffer[i] = ind->data[i];
     54c:	d7 01       	movw	r26, r14
     54e:	17 96       	adiw	r26, 0x07	; 7
     550:	ed 91       	ld	r30, X+
     552:	fc 91       	ld	r31, X
     554:	18 97       	sbiw	r26, 0x08	; 8
     556:	ec 0f       	add	r30, r28
     558:	fd 1f       	adc	r31, r29
     55a:	80 81       	ld	r24, Z
     55c:	c5 5e       	subi	r28, 0xE5	; 229
     55e:	db 4f       	sbci	r29, 0xFB	; 251
     560:	88 83       	st	Y, r24

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	for (uint8_t i = 0; i < ind->size; i++){
     562:	1f 5f       	subi	r17, 0xFF	; 255
     564:	19 96       	adiw	r26, 0x09	; 9
     566:	8c 91       	ld	r24, X
     568:	18 17       	cp	r17, r24
     56a:	28 f3       	brcs	.-54     	; 0x536 <appDataInd+0x18>
		HAL_UartWriteByte(ind->data[i]);
		appDataReqBuffer[i] = ind->data[i];
	}
	appSendData();
     56c:	a7 df       	rcall	.-178    	; 0x4bc <appSendData>
	return true;
}
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	ff 90       	pop	r15
     578:	ef 90       	pop	r14
     57a:	08 95       	ret

0000057c <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	8c 01       	movw	r16, r24
	for (uint16_t i = 0; i < bytes; i++)
     588:	89 2b       	or	r24, r25
     58a:	c9 f0       	breq	.+50     	; 0x5be <HAL_UartBytesReceived+0x42>
     58c:	c0 e0       	ldi	r28, 0x00	; 0
     58e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		uint8_t byte = HAL_UartReadByte();
     590:	b6 de       	rcall	.-660    	; 0x2fe <HAL_UartReadByte>
     592:	f8 2e       	mov	r15, r24

		if (appUartBufferPtr == sizeof(appUartBuffer))
     594:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <appUartBufferPtr>
     598:	9d 36       	cpi	r25, 0x6D	; 109
     59a:	09 f4       	brne	.+2      	; 0x59e <HAL_UartBytesReceived+0x22>
		appSendData();
     59c:	8f df       	rcall	.-226    	; 0x4bc <appSendData>

		if (appUartBufferPtr < sizeof(appUartBuffer))
     59e:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <appUartBufferPtr>
     5a2:	ed 36       	cpi	r30, 0x6D	; 109
     5a4:	40 f4       	brcc	.+16     	; 0x5b6 <HAL_UartBytesReceived+0x3a>
		appUartBuffer[appUartBufferPtr++] = byte;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	8e 0f       	add	r24, r30
     5aa:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <appUartBufferPtr>
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	e2 55       	subi	r30, 0x52	; 82
     5b2:	fc 4f       	sbci	r31, 0xFC	; 252
     5b4:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
	for (uint16_t i = 0; i < bytes; i++)
     5b6:	21 96       	adiw	r28, 0x01	; 1
     5b8:	c0 17       	cp	r28, r16
     5ba:	d1 07       	cpc	r29, r17
     5bc:	49 f7       	brne	.-46     	; 0x590 <HAL_UartBytesReceived+0x14>

		if (appUartBufferPtr < sizeof(appUartBuffer))
		appUartBuffer[appUartBufferPtr++] = byte;
	}

	SYS_TimerStop(&appTimer);
     5be:	8a e9       	ldi	r24, 0x9A	; 154
     5c0:	94 e0       	ldi	r25, 0x04	; 4
     5c2:	0e 94 ae 0c 	call	0x195c	; 0x195c <SYS_TimerStop>
	SYS_TimerStart(&appTimer);
     5c6:	8a e9       	ldi	r24, 0x9A	; 154
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <SYS_TimerStart>
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	08 95       	ret

000005da <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
	SYS_Init();
     5da:	0e 94 39 0c 	call	0x1872	; 0x1872 <SYS_Init>
	HAL_UartInit(9600);
     5de:	60 e8       	ldi	r22, 0x80	; 128
     5e0:	75 e2       	ldi	r23, 0x25	; 37
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	10 de       	rcall	.-992    	; 0x208 <HAL_UartInit>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     5e8:	ca e9       	ldi	r28, 0x9A	; 154
     5ea:	d4 e0       	ldi	r29, 0x04	; 4
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f4 e1       	ldi	r31, 0x14	; 20
     5f0:	cf 2e       	mov	r12, r31
     5f2:	d1 2c       	mov	r13, r1
     5f4:	e1 2c       	mov	r14, r1
     5f6:	f1 2c       	mov	r15, r1
     5f8:	f0 2d       	mov	r31, r0
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
	appTimer.handler = appTimerHandler;
     5fa:	0d e8       	ldi	r16, 0x8D	; 141
     5fc:	12 e0       	ldi	r17, 0x02	; 2
	HAL_UartInit(9600);


	while (1)
	{
		SYS_TaskHandler();
     5fe:	0e 94 40 0c 	call	0x1880	; 0x1880 <SYS_TaskHandler>
		HAL_UartTaskHandler();
     602:	16 df       	rcall	.-468    	; 0x430 <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
	switch (appState)
     604:	80 91 a7 04 	lds	r24, 0x04A7	; 0x8004a7 <appState>
     608:	81 11       	cpse	r24, r1
     60a:	f9 cf       	rjmp	.-14     	; 0x5fe <main+0x24>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
	NWK_SetAddr(APP_ADDR);
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	2f d0       	rcall	.+94     	; 0x670 <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
     612:	87 e6       	ldi	r24, 0x67	; 103
     614:	95 e4       	ldi	r25, 0x45	; 69
     616:	33 d0       	rcall	.+102    	; 0x67e <NWK_SetPanId>
	PHY_SetChannel(APP_CHANNEL);
     618:	8f e0       	ldi	r24, 0x0F	; 15
     61a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <PHY_SetChannel>
	#ifdef PHY_AT86RF212
	PHY_SetBand(APP_BAND);
	PHY_SetModulation(APP_MODULATION);
	#endif
	PHY_SetRxState(true);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <PHY_SetRxState>

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     624:	6f e8       	ldi	r22, 0x8F	; 143
     626:	72 e0       	ldi	r23, 0x02	; 2
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	30 d0       	rcall	.+96     	; 0x68c <NWK_OpenEndpoint>

	HAL_BoardInit();

	appTimer.interval = APP_FLUSH_TIMER_INTERVAL;
     62c:	ce 82       	std	Y+6, r12	; 0x06
     62e:	df 82       	std	Y+7, r13	; 0x07
     630:	e8 86       	std	Y+8, r14	; 0x08
     632:	f9 86       	std	Y+9, r15	; 0x09
	appTimer.mode = SYS_TIMER_INTERVAL_MODE;
     634:	1a 86       	std	Y+10, r1	; 0x0a
	appTimer.handler = appTimerHandler;
     636:	1c 87       	std	Y+12, r17	; 0x0c
     638:	0b 87       	std	Y+11, r16	; 0x0b
	switch (appState)
	{
		case APP_STATE_INITIAL:
		{
			appInit();
			appState = APP_STATE_IDLE;
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <appState>
     640:	de cf       	rjmp	.-68     	; 0x5fe <main+0x24>

00000642 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     642:	e4 ee       	ldi	r30, 0xE4	; 228
     644:	f9 e0       	ldi	r31, 0x09	; 9
     646:	14 82       	std	Z+4, r1	; 0x04
     648:	15 82       	std	Z+5, r1	; 0x05
     64a:	11 82       	std	Z+1, r1	; 0x01
     64c:	10 82       	st	Z, r1
     64e:	17 a2       	std	Z+39, r1	; 0x27
     650:	16 a2       	std	Z+38, r1	; 0x26
     652:	ea ee       	ldi	r30, 0xEA	; 234
     654:	f9 e0       	ldi	r31, 0x09	; 9
     656:	8a e0       	ldi	r24, 0x0A	; 10
     658:	9a e0       	ldi	r25, 0x0A	; 10
     65a:	11 92       	st	Z+, r1
     65c:	11 92       	st	Z+, r1
     65e:	e8 17       	cp	r30, r24
     660:	f9 07       	cpc	r31, r25
     662:	d9 f7       	brne	.-10     	; 0x65a <NWK_Init+0x18>
     664:	47 d6       	rcall	.+3214   	; 0x12f4 <nwkTxInit>
     666:	5e d3       	rcall	.+1724   	; 0xd24 <nwkRxInit>
     668:	0d d1       	rcall	.+538    	; 0x884 <nwkFrameInit>
     66a:	40 d0       	rcall	.+128    	; 0x6ec <nwkDataReqInit>
     66c:	88 c1       	rjmp	.+784    	; 0x97e <nwkRouteInit>
     66e:	08 95       	ret

00000670 <NWK_SetAddr>:
     670:	90 93 e5 09 	sts	0x09E5, r25	; 0x8009e5 <nwkIb+0x1>
     674:	80 93 e4 09 	sts	0x09E4, r24	; 0x8009e4 <nwkIb>
     678:	0c 94 7d 0b 	jmp	0x16fa	; 0x16fa <PHY_SetShortAddr>
     67c:	08 95       	ret

0000067e <NWK_SetPanId>:
     67e:	90 93 e7 09 	sts	0x09E7, r25	; 0x8009e7 <nwkIb+0x3>
     682:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <nwkIb+0x2>
     686:	0c 94 6b 0b 	jmp	0x16d6	; 0x16d6 <PHY_SetPanId>
     68a:	08 95       	ret

0000068c <NWK_OpenEndpoint>:
     68c:	e8 2f       	mov	r30, r24
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	ee 0f       	add	r30, r30
     692:	ff 1f       	adc	r31, r31
     694:	e6 51       	subi	r30, 0x16	; 22
     696:	f6 4f       	sbci	r31, 0xF6	; 246
     698:	71 83       	std	Z+1, r23	; 0x01
     69a:	60 83       	st	Z, r22
     69c:	08 95       	ret

0000069e <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     69e:	89 d3       	rcall	.+1810   	; 0xdb2 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     6a0:	24 d7       	rcall	.+3656   	; 0x14ea <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     6a2:	4d c0       	rjmp	.+154    	; 0x73e <nwkDataReqTaskHandler>
     6a4:	08 95       	ret

000006a6 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6a6:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <nwkDataReqQueue>
     6aa:	f0 91 a9 04 	lds	r31, 0x04A9	; 0x8004a9 <nwkDataReqQueue+0x1>
     6ae:	30 97       	sbiw	r30, 0x00	; 0
     6b0:	d9 f0       	breq	.+54     	; 0x6e8 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     6b2:	22 81       	ldd	r18, Z+2	; 0x02
     6b4:	33 81       	ldd	r19, Z+3	; 0x03
     6b6:	28 17       	cp	r18, r24
     6b8:	39 07       	cpc	r19, r25
     6ba:	89 f4       	brne	.+34     	; 0x6de <nwkDataReqTxConf+0x38>
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <nwkDataReqTxConf+0x22>
     6be:	22 81       	ldd	r18, Z+2	; 0x02
     6c0:	33 81       	ldd	r19, Z+3	; 0x03
     6c2:	28 17       	cp	r18, r24
     6c4:	39 07       	cpc	r19, r25
     6c6:	59 f4       	brne	.+22     	; 0x6de <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     6c8:	dc 01       	movw	r26, r24
     6ca:	ad 57       	subi	r26, 0x7D	; 125
     6cc:	bf 4f       	sbci	r27, 0xFF	; 255
     6ce:	2c 91       	ld	r18, X
     6d0:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     6d2:	13 96       	adiw	r26, 0x03	; 3
     6d4:	2c 91       	ld	r18, X
     6d6:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     6d8:	22 e0       	ldi	r18, 0x02	; 2
     6da:	24 83       	std	Z+4, r18	; 0x04
      break;
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6de:	01 90       	ld	r0, Z+
     6e0:	f0 81       	ld	r31, Z
     6e2:	e0 2d       	mov	r30, r0
     6e4:	30 97       	sbiw	r30, 0x00	; 0
     6e6:	59 f7       	brne	.-42     	; 0x6be <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     6e8:	0a c1       	rjmp	.+532    	; 0x8fe <nwkFrameFree>
     6ea:	08 95       	ret

000006ec <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     6ec:	10 92 a9 04 	sts	0x04A9, r1	; 0x8004a9 <nwkDataReqQueue+0x1>
     6f0:	10 92 a8 04 	sts	0x04A8, r1	; 0x8004a8 <nwkDataReqQueue>
     6f4:	08 95       	ret

000006f6 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     6f6:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     6f8:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     6fa:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6fc:	13 82       	std	Z+3, r1	; 0x03
     6fe:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     700:	a4 ee       	ldi	r26, 0xE4	; 228
     702:	b9 e0       	ldi	r27, 0x09	; 9
     704:	96 96       	adiw	r26, 0x26	; 38
     706:	8d 91       	ld	r24, X+
     708:	9c 91       	ld	r25, X
     70a:	97 97       	sbiw	r26, 0x27	; 39
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	97 96       	adiw	r26, 0x27	; 39
     710:	9c 93       	st	X, r25
     712:	8e 93       	st	-X, r24
     714:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     716:	80 91 a8 04 	lds	r24, 0x04A8	; 0x8004a8 <nwkDataReqQueue>
     71a:	90 91 a9 04 	lds	r25, 0x04A9	; 0x8004a9 <nwkDataReqQueue+0x1>
     71e:	00 97       	sbiw	r24, 0x00	; 0
     720:	39 f4       	brne	.+14     	; 0x730 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     722:	11 82       	std	Z+1, r1	; 0x01
     724:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     726:	f0 93 a9 04 	sts	0x04A9, r31	; 0x8004a9 <nwkDataReqQueue+0x1>
     72a:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <nwkDataReqQueue>
     72e:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     730:	91 83       	std	Z+1, r25	; 0x01
     732:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     734:	f0 93 a9 04 	sts	0x04A9, r31	; 0x8004a9 <nwkDataReqQueue+0x1>
     738:	e0 93 a8 04 	sts	0x04A8, r30	; 0x8004a8 <nwkDataReqQueue>
     73c:	08 95       	ret

0000073e <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     73e:	0f 93       	push	r16
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     746:	e0 91 a8 04 	lds	r30, 0x04A8	; 0x8004a8 <nwkDataReqQueue>
     74a:	f0 91 a9 04 	lds	r31, 0x04A9	; 0x8004a9 <nwkDataReqQueue+0x1>
     74e:	30 97       	sbiw	r30, 0x00	; 0
     750:	09 f4       	brne	.+2      	; 0x754 <nwkDataReqTaskHandler+0x16>
     752:	93 c0       	rjmp	.+294    	; 0x87a <nwkDataReqTaskHandler+0x13c>
     754:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     756:	8c 81       	ldd	r24, Y+4	; 0x04
     758:	88 23       	and	r24, r24
     75a:	21 f0       	breq	.+8      	; 0x764 <nwkDataReqTaskHandler+0x26>
     75c:	82 30       	cpi	r24, 0x02	; 2
     75e:	09 f4       	brne	.+2      	; 0x762 <nwkDataReqTaskHandler+0x24>
     760:	66 c0       	rjmp	.+204    	; 0x82e <nwkDataReqTaskHandler+0xf0>
     762:	85 c0       	rjmp	.+266    	; 0x86e <nwkDataReqTaskHandler+0x130>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     764:	96 d0       	rcall	.+300    	; 0x892 <nwkFrameAlloc>
     766:	8c 01       	movw	r16, r24
     768:	00 97       	sbiw	r24, 0x00	; 0
     76a:	21 f4       	brne	.+8      	; 0x774 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     76c:	82 e0       	ldi	r24, 0x02	; 2
     76e:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     770:	8f 87       	std	Y+15, r24	; 0x0f
     772:	83 c0       	rjmp	.+262    	; 0x87a <nwkDataReqTaskHandler+0x13c>
    return;
  }

  req->frame = frame;
     774:	9b 83       	std	Y+3, r25	; 0x03
     776:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     77c:	f8 01       	movw	r30, r16
     77e:	e9 57       	subi	r30, 0x79	; 121
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	83 e5       	ldi	r24, 0x53	; 83
     784:	93 e0       	ldi	r25, 0x03	; 3
     786:	91 83       	std	Z+1, r25	; 0x01
     788:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     78a:	31 97       	sbiw	r30, 0x01	; 1
     78c:	89 85       	ldd	r24, Y+9	; 0x09
     78e:	82 fb       	bst	r24, 2
     790:	88 27       	eor	r24, r24
     792:	80 f9       	bld	r24, 0
     794:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     796:	99 85       	ldd	r25, Y+9	; 0x09
     798:	d8 01       	movw	r26, r16
     79a:	1b 96       	adiw	r26, 0x0b	; 11
     79c:	8c 91       	ld	r24, X
     79e:	1b 97       	sbiw	r26, 0x0b	; 11
     7a0:	90 fb       	bst	r25, 0
     7a2:	80 f9       	bld	r24, 0
     7a4:	1b 96       	adiw	r26, 0x0b	; 11
     7a6:	8c 93       	st	X, r24
     7a8:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     7aa:	99 85       	ldd	r25, Y+9	; 0x09
     7ac:	93 fb       	bst	r25, 3
     7ae:	99 27       	eor	r25, r25
     7b0:	90 f9       	bld	r25, 0
     7b2:	90 fb       	bst	r25, 0
     7b4:	82 f9       	bld	r24, 2
     7b6:	1b 96       	adiw	r26, 0x0b	; 11
     7b8:	8c 93       	st	X, r24
     7ba:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     7bc:	e4 ee       	ldi	r30, 0xE4	; 228
     7be:	f9 e0       	ldi	r31, 0x09	; 9
     7c0:	84 81       	ldd	r24, Z+4	; 0x04
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	84 83       	std	Z+4, r24	; 0x04
     7c6:	1c 96       	adiw	r26, 0x0c	; 12
     7c8:	8c 93       	st	X, r24
     7ca:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     7cc:	80 81       	ld	r24, Z
     7ce:	91 81       	ldd	r25, Z+1	; 0x01
     7d0:	1e 96       	adiw	r26, 0x0e	; 14
     7d2:	9c 93       	st	X, r25
     7d4:	8e 93       	st	-X, r24
     7d6:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     7d8:	8d 81       	ldd	r24, Y+5	; 0x05
     7da:	9e 81       	ldd	r25, Y+6	; 0x06
     7dc:	50 96       	adiw	r26, 0x10	; 16
     7de:	9c 93       	st	X, r25
     7e0:	8e 93       	st	-X, r24
     7e2:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     7e4:	88 85       	ldd	r24, Y+8	; 0x08
     7e6:	98 2f       	mov	r25, r24
     7e8:	9f 70       	andi	r25, 0x0F	; 15
     7ea:	51 96       	adiw	r26, 0x11	; 17
     7ec:	8c 91       	ld	r24, X
     7ee:	51 97       	sbiw	r26, 0x11	; 17
     7f0:	80 7f       	andi	r24, 0xF0	; 240
     7f2:	89 2b       	or	r24, r25
     7f4:	51 96       	adiw	r26, 0x11	; 17
     7f6:	8c 93       	st	X, r24
     7f8:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     7fa:	9f 81       	ldd	r25, Y+7	; 0x07
     7fc:	92 95       	swap	r25
     7fe:	90 7f       	andi	r25, 0xF0	; 240
     800:	8f 70       	andi	r24, 0x0F	; 15
     802:	89 2b       	or	r24, r25
     804:	51 96       	adiw	r26, 0x11	; 17
     806:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     808:	f8 01       	movw	r30, r16
     80a:	ef 57       	subi	r30, 0x7F	; 127
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	4c 85       	ldd	r20, Y+12	; 0x0c
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	6a 85       	ldd	r22, Y+10	; 0x0a
     814:	7b 85       	ldd	r23, Y+11	; 0x0b
     816:	80 81       	ld	r24, Z
     818:	91 81       	ldd	r25, Z+1	; 0x01
     81a:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <memcpy>
  frame->size += req->size;
     81e:	f8 01       	movw	r30, r16
     820:	91 81       	ldd	r25, Z+1	; 0x01
     822:	8c 85       	ldd	r24, Y+12	; 0x0c
     824:	89 0f       	add	r24, r25
     826:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     828:	c8 01       	movw	r24, r16
     82a:	87 d5       	rcall	.+2830   	; 0x133a <nwkTxFrame>
     82c:	26 c0       	rjmp	.+76     	; 0x87a <nwkDataReqTaskHandler+0x13c>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     82e:	ce 17       	cp	r28, r30
     830:	df 07       	cpc	r29, r31
     832:	41 f4       	brne	.+16     	; 0x844 <nwkDataReqTaskHandler+0x106>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     834:	88 81       	ld	r24, Y
     836:	99 81       	ldd	r25, Y+1	; 0x01
     838:	90 93 a9 04 	sts	0x04A9, r25	; 0x8004a9 <nwkDataReqQueue+0x1>
     83c:	80 93 a8 04 	sts	0x04A8, r24	; 0x8004a8 <nwkDataReqQueue>
     840:	0a c0       	rjmp	.+20     	; 0x856 <nwkDataReqTaskHandler+0x118>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     842:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     844:	80 81       	ld	r24, Z
     846:	91 81       	ldd	r25, Z+1	; 0x01
     848:	c8 17       	cp	r28, r24
     84a:	d9 07       	cpc	r29, r25
     84c:	d1 f7       	brne	.-12     	; 0x842 <nwkDataReqTaskHandler+0x104>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     84e:	88 81       	ld	r24, Y
     850:	99 81       	ldd	r25, Y+1	; 0x01
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     856:	e4 ee       	ldi	r30, 0xE4	; 228
     858:	f9 e0       	ldi	r31, 0x09	; 9
     85a:	86 a1       	ldd	r24, Z+38	; 0x26
     85c:	97 a1       	ldd	r25, Z+39	; 0x27
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	97 a3       	std	Z+39, r25	; 0x27
     862:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     864:	ed 85       	ldd	r30, Y+13	; 0x0d
     866:	fe 85       	ldd	r31, Y+14	; 0x0e
     868:	ce 01       	movw	r24, r28
     86a:	19 95       	eicall
     86c:	06 c0       	rjmp	.+12     	; 0x87a <nwkDataReqTaskHandler+0x13c>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     86e:	09 90       	ld	r0, Y+
     870:	d8 81       	ld	r29, Y
     872:	c0 2d       	mov	r28, r0
     874:	20 97       	sbiw	r28, 0x00	; 0
     876:	09 f0       	breq	.+2      	; 0x87a <nwkDataReqTaskHandler+0x13c>
     878:	6e cf       	rjmp	.-292    	; 0x756 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     884:	10 92 aa 04 	sts	0x04AA, r1	; 0x8004aa <nwkFrameFrames>
     888:	10 92 33 05 	sts	0x0533, r1	; 0x800533 <nwkFrameFrames+0x89>
     88c:	10 92 bc 05 	sts	0x05BC, r1	; 0x8005bc <nwkFrameFrames+0x112>
     890:	08 95       	ret

00000892 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     892:	80 91 aa 04 	lds	r24, 0x04AA	; 0x8004aa <nwkFrameFrames>
     896:	88 23       	and	r24, r24
     898:	71 f0       	breq	.+28     	; 0x8b6 <nwkFrameAlloc+0x24>
     89a:	80 91 33 05 	lds	r24, 0x0533	; 0x800533 <nwkFrameFrames+0x89>
     89e:	88 23       	and	r24, r24
     8a0:	39 f0       	breq	.+14     	; 0x8b0 <nwkFrameAlloc+0x1e>
     8a2:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <nwkFrameFrames+0x112>
     8a6:	81 11       	cpse	r24, r1
     8a8:	27 c0       	rjmp	.+78     	; 0x8f8 <nwkFrameAlloc+0x66>
     8aa:	82 e0       	ldi	r24, 0x02	; 2
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <nwkFrameAlloc+0x28>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <nwkFrameAlloc+0x28>
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     8ba:	49 e8       	ldi	r20, 0x89	; 137
     8bc:	48 9f       	mul	r20, r24
     8be:	90 01       	movw	r18, r0
     8c0:	49 9f       	mul	r20, r25
     8c2:	30 0d       	add	r19, r0
     8c4:	11 24       	eor	r1, r1
     8c6:	c9 01       	movw	r24, r18
     8c8:	86 55       	subi	r24, 0x56	; 86
     8ca:	9b 4f       	sbci	r25, 0xFB	; 251
     8cc:	fc 01       	movw	r30, r24
     8ce:	11 92       	st	Z+, r1
     8d0:	4a 95       	dec	r20
     8d2:	e9 f7       	brne	.-6      	; 0x8ce <nwkFrameAlloc+0x3c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     8d4:	40 e1       	ldi	r20, 0x10	; 16
     8d6:	fc 01       	movw	r30, r24
     8d8:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     8da:	ef 57       	subi	r30, 0x7F	; 127
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	24 54       	subi	r18, 0x44	; 68
     8e0:	3b 4f       	sbci	r19, 0xFB	; 251
     8e2:	31 83       	std	Z+1, r19	; 0x01
     8e4:	20 83       	st	Z, r18
      nwkIb.lock++;
     8e6:	e4 ee       	ldi	r30, 0xE4	; 228
     8e8:	f9 e0       	ldi	r31, 0x09	; 9
     8ea:	26 a1       	ldd	r18, Z+38	; 0x26
     8ec:	37 a1       	ldd	r19, Z+39	; 0x27
     8ee:	2f 5f       	subi	r18, 0xFF	; 255
     8f0:	3f 4f       	sbci	r19, 0xFF	; 255
     8f2:	37 a3       	std	Z+39, r19	; 0x27
     8f4:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     8f6:	08 95       	ret
    }
  }
  return NULL;
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
}
     8fc:	08 95       	ret

000008fe <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     8fe:	fc 01       	movw	r30, r24
     900:	10 82       	st	Z, r1
  nwkIb.lock--;
     902:	e4 ee       	ldi	r30, 0xE4	; 228
     904:	f9 e0       	ldi	r31, 0x09	; 9
     906:	86 a1       	ldd	r24, Z+38	; 0x26
     908:	97 a1       	ldd	r25, Z+39	; 0x27
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	97 a3       	std	Z+39, r25	; 0x27
     90e:	86 a3       	std	Z+38, r24	; 0x26
     910:	08 95       	ret

00000912 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	41 f0       	breq	.+16     	; 0x926 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     916:	fc 01       	movw	r30, r24
     918:	e7 57       	subi	r30, 0x77	; 119
     91a:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     91c:	86 e0       	ldi	r24, 0x06	; 6
     91e:	e5 34       	cpi	r30, 0x45	; 69
     920:	f8 07       	cpc	r31, r24
     922:	18 f0       	brcs	.+6      	; 0x92a <nwkFrameNext+0x18>
     924:	15 c0       	rjmp	.+42     	; 0x950 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     926:	ea ea       	ldi	r30, 0xAA	; 170
     928:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     92a:	80 81       	ld	r24, Z
     92c:	88 23       	and	r24, r24
     92e:	39 f0       	breq	.+14     	; 0x93e <nwkFrameNext+0x2c>
     930:	03 c0       	rjmp	.+6      	; 0x938 <nwkFrameNext+0x26>
     932:	80 81       	ld	r24, Z
     934:	88 23       	and	r24, r24
     936:	19 f0       	breq	.+6      	; 0x93e <nwkFrameNext+0x2c>
      return frame;
     938:	8e 2f       	mov	r24, r30
     93a:	9f 2f       	mov	r25, r31
     93c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     93e:	e7 57       	subi	r30, 0x77	; 119
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	e5 34       	cpi	r30, 0x45	; 69
     946:	f8 07       	cpc	r31, r24
     948:	a0 f3       	brcs	.-24     	; 0x932 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	08 95       	ret
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
}
     954:	08 95       	ret

00000956 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     956:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     958:	dc 01       	movw	r26, r24
     95a:	ad 57       	subi	r26, 0x7D	; 125
     95c:	bf 4f       	sbci	r27, 0xFF	; 255
     95e:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     960:	a4 ee       	ldi	r26, 0xE4	; 228
     962:	b9 e0       	ldi	r27, 0x09	; 9
     964:	14 96       	adiw	r26, 0x04	; 4
     966:	9c 91       	ld	r25, X
     968:	14 97       	sbiw	r26, 0x04	; 4
     96a:	9f 5f       	subi	r25, 0xFF	; 255
     96c:	14 96       	adiw	r26, 0x04	; 4
     96e:	9c 93       	st	X, r25
     970:	14 97       	sbiw	r26, 0x04	; 4
     972:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     974:	8d 91       	ld	r24, X+
     976:	9c 91       	ld	r25, X
     978:	96 87       	std	Z+14, r25	; 0x0e
     97a:	85 87       	std	Z+13, r24	; 0x0d
     97c:	08 95       	ret

0000097e <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     97e:	aa e4       	ldi	r26, 0x4A	; 74
     980:	b6 e0       	ldi	r27, 0x06	; 6
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	4f ef       	ldi	r20, 0xFF	; 255
     988:	5f ef       	ldi	r21, 0xFF	; 255
     98a:	fd 01       	movw	r30, r26
     98c:	34 97       	sbiw	r30, 0x04	; 4
     98e:	51 83       	std	Z+1, r21	; 0x01
     990:	40 83       	st	Z, r20
     992:	fc 01       	movw	r30, r24
     994:	ee 0f       	add	r30, r30
     996:	ff 1f       	adc	r31, r31
     998:	ee 0f       	add	r30, r30
     99a:	ff 1f       	adc	r31, r31
     99c:	ee 0f       	add	r30, r30
     99e:	ff 1f       	adc	r31, r31
     9a0:	e8 1b       	sub	r30, r24
     9a2:	f9 0b       	sbc	r31, r25
     9a4:	eb 5b       	subi	r30, 0xBB	; 187
     9a6:	f9 4f       	sbci	r31, 0xF9	; 249
     9a8:	20 81       	ld	r18, Z
     9aa:	2e 7f       	andi	r18, 0xFE	; 254
     9ac:	20 83       	st	Z, r18
     9ae:	1c 92       	st	X, r1
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	17 96       	adiw	r26, 0x07	; 7
     9b4:	84 36       	cpi	r24, 0x64	; 100
     9b6:	91 05       	cpc	r25, r1
     9b8:	41 f7       	brne	.-48     	; 0x98a <nwkRouteInit+0xc>
     9ba:	08 95       	ret

000009bc <NWK_RouteFindEntry>:
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	e6 e4       	ldi	r30, 0x46	; 70
     9c6:	f6 e0       	ldi	r31, 0x06	; 6
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	06 2f       	mov	r16, r22
     9ce:	10 e0       	ldi	r17, 0x00	; 0
     9d0:	40 81       	ld	r20, Z
     9d2:	51 81       	ldd	r21, Z+1	; 0x01
     9d4:	48 17       	cp	r20, r24
     9d6:	59 07       	cpc	r21, r25
     9d8:	b1 f4       	brne	.+44     	; 0xa06 <NWK_RouteFindEntry+0x4a>
     9da:	d9 01       	movw	r26, r18
     9dc:	aa 0f       	add	r26, r26
     9de:	bb 1f       	adc	r27, r27
     9e0:	aa 0f       	add	r26, r26
     9e2:	bb 1f       	adc	r27, r27
     9e4:	aa 0f       	add	r26, r26
     9e6:	bb 1f       	adc	r27, r27
     9e8:	a2 1b       	sub	r26, r18
     9ea:	b3 0b       	sbc	r27, r19
     9ec:	ab 5b       	subi	r26, 0xBB	; 187
     9ee:	b9 4f       	sbci	r27, 0xF9	; 249
     9f0:	4c 91       	ld	r20, X
     9f2:	46 95       	lsr	r20
     9f4:	41 70       	andi	r20, 0x01	; 1
     9f6:	c4 2f       	mov	r28, r20
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	d4 2f       	mov	r29, r20
     9fc:	c0 17       	cp	r28, r16
     9fe:	d1 07       	cpc	r29, r17
     a00:	11 f4       	brne	.+4      	; 0xa06 <NWK_RouteFindEntry+0x4a>
     a02:	cd 01       	movw	r24, r26
     a04:	08 c0       	rjmp	.+16     	; 0xa16 <NWK_RouteFindEntry+0x5a>
     a06:	2f 5f       	subi	r18, 0xFF	; 255
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	37 96       	adiw	r30, 0x07	; 7
     a0c:	24 36       	cpi	r18, 0x64	; 100
     a0e:	31 05       	cpc	r19, r1
     a10:	f9 f6       	brne	.-66     	; 0x9d0 <NWK_RouteFindEntry+0x14>
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <NWK_RouteNewEntry>:
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	ea e4       	ldi	r30, 0x4A	; 74
     a26:	f6 e0       	ldi	r31, 0x06	; 6
     a28:	26 e0       	ldi	r18, 0x06	; 6
     a2a:	39 e0       	ldi	r19, 0x09	; 9
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	df 01       	movw	r26, r30
     a32:	15 97       	sbiw	r26, 0x05	; 5
     a34:	8c 91       	ld	r24, X
     a36:	80 fd       	sbrc	r24, 0
     a38:	0b c0       	rjmp	.+22     	; 0xa50 <NWK_RouteNewEntry+0x30>
     a3a:	80 81       	ld	r24, Z
     a3c:	88 23       	and	r24, r24
     a3e:	69 f0       	breq	.+26     	; 0xa5a <NWK_RouteNewEntry+0x3a>
     a40:	20 97       	sbiw	r28, 0x00	; 0
     a42:	29 f0       	breq	.+10     	; 0xa4e <NWK_RouteNewEntry+0x2e>
     a44:	9d 81       	ldd	r25, Y+5	; 0x05
     a46:	89 17       	cp	r24, r25
     a48:	18 f4       	brcc	.+6      	; 0xa50 <NWK_RouteNewEntry+0x30>
     a4a:	ed 01       	movw	r28, r26
     a4c:	01 c0       	rjmp	.+2      	; 0xa50 <NWK_RouteNewEntry+0x30>
     a4e:	ed 01       	movw	r28, r26
     a50:	37 96       	adiw	r30, 0x07	; 7
     a52:	e2 17       	cp	r30, r18
     a54:	f3 07       	cpc	r31, r19
     a56:	61 f7       	brne	.-40     	; 0xa30 <NWK_RouteNewEntry+0x10>
     a58:	de 01       	movw	r26, r28
     a5a:	8c 91       	ld	r24, X
     a5c:	8d 70       	andi	r24, 0x0D	; 13
     a5e:	80 63       	ori	r24, 0x30	; 48
     a60:	8c 93       	st	X, r24
     a62:	80 e8       	ldi	r24, 0x80	; 128
     a64:	15 96       	adiw	r26, 0x05	; 5
     a66:	8c 93       	st	X, r24
     a68:	15 97       	sbiw	r26, 0x05	; 5
     a6a:	cd 01       	movw	r24, r26
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	08 95       	ret

00000a72 <NWK_RouteFreeEntry>:
     a72:	fc 01       	movw	r30, r24
     a74:	80 81       	ld	r24, Z
     a76:	80 fd       	sbrc	r24, 0
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <NWK_RouteFreeEntry+0x12>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	92 83       	std	Z+2, r25	; 0x02
     a80:	81 83       	std	Z+1, r24	; 0x01
     a82:	15 82       	std	Z+5, r1	; 0x05
     a84:	08 95       	ret

00000a86 <NWK_RouteNextHop>:
     a86:	9a df       	rcall	.-204    	; 0x9bc <NWK_RouteFindEntry>
     a88:	00 97       	sbiw	r24, 0x00	; 0
     a8a:	21 f0       	breq	.+8      	; 0xa94 <NWK_RouteNextHop+0xe>
     a8c:	fc 01       	movw	r30, r24
     a8e:	83 81       	ldd	r24, Z+3	; 0x03
     a90:	94 81       	ldd	r25, Z+4	; 0x04
     a92:	08 95       	ret
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	9f ef       	ldi	r25, 0xFF	; 255
     a98:	08 95       	ret

00000a9a <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     a9a:	90 df       	rcall	.-224    	; 0x9bc <NWK_RouteFindEntry>
  if (entry)
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
     aa0:	e8 cf       	rjmp	.-48     	; 0xa72 <NWK_RouteFreeEntry>
     aa2:	08 95       	ret

00000aa4 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     aa4:	0f 93       	push	r16
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     aae:	01 85       	ldd	r16, Z+9	; 0x09
     ab0:	12 85       	ldd	r17, Z+10	; 0x0a
     ab2:	11 23       	and	r17, r17
     ab4:	2c f4       	brge	.+10     	; 0xac0 <nwkRouteFrameReceived+0x1c>
     ab6:	85 85       	ldd	r24, Z+13	; 0x0d
     ab8:	96 85       	ldd	r25, Z+14	; 0x0e
     aba:	08 17       	cp	r16, r24
     abc:	19 07       	cpc	r17, r25
     abe:	e1 f5       	brne	.+120    	; 0xb38 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     ac0:	85 81       	ldd	r24, Z+5	; 0x05
     ac2:	96 81       	ldd	r25, Z+6	; 0x06
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	c1 f1       	breq	.+112    	; 0xb38 <nwkRouteFrameReceived+0x94>
     ac8:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	85 85       	ldd	r24, Z+13	; 0x0d
     ace:	96 85       	ldd	r25, Z+14	; 0x0e
     ad0:	75 df       	rcall	.-278    	; 0x9bc <NWK_RouteFindEntry>
     ad2:	fc 01       	movw	r30, r24

  if (entry)
     ad4:	89 2b       	or	r24, r25
     ad6:	a1 f0       	breq	.+40     	; 0xb00 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     ad8:	8f 81       	ldd	r24, Y+7	; 0x07
     ada:	98 85       	ldd	r25, Y+8	; 0x08
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	f9 f4       	brne	.+62     	; 0xb1e <nwkRouteFrameReceived+0x7a>
     ae0:	20 91 e4 09 	lds	r18, 0x09E4	; 0x8009e4 <nwkIb>
     ae4:	30 91 e5 09 	lds	r19, 0x09E5	; 0x8009e5 <nwkIb+0x1>
     ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
     aea:	98 89       	ldd	r25, Y+16	; 0x10
     aec:	28 17       	cp	r18, r24
     aee:	39 07       	cpc	r19, r25
     af0:	b1 f4       	brne	.+44     	; 0xb1e <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     af2:	14 83       	std	Z+4, r17	; 0x04
     af4:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     af6:	80 81       	ld	r24, Z
     af8:	8f 70       	andi	r24, 0x0F	; 15
     afa:	80 63       	ori	r24, 0x30	; 48
     afc:	80 83       	st	Z, r24
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     b00:	8f df       	rcall	.-226    	; 0xa20 <NWK_RouteNewEntry>
     b02:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     b04:	8d 85       	ldd	r24, Y+13	; 0x0d
     b06:	9e 85       	ldd	r25, Y+14	; 0x0e
     b08:	92 83       	std	Z+2, r25	; 0x02
     b0a:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     b0c:	89 85       	ldd	r24, Y+9	; 0x09
     b0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b10:	94 83       	std	Z+4, r25	; 0x04
     b12:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     b14:	cd 57       	subi	r28, 0x7D	; 125
     b16:	df 4f       	sbci	r29, 0xFF	; 255
     b18:	88 81       	ld	r24, Y
     b1a:	86 83       	std	Z+6, r24	; 0x06
     b1c:	0d c0       	rjmp	.+26     	; 0xb38 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     b1e:	83 81       	ldd	r24, Z+3	; 0x03
     b20:	94 81       	ldd	r25, Z+4	; 0x04
     b22:	08 17       	cp	r16, r24
     b24:	19 07       	cpc	r17, r25
     b26:	b1 f3       	breq	.-20     	; 0xb14 <nwkRouteFrameReceived+0x70>
     b28:	de 01       	movw	r26, r28
     b2a:	ad 57       	subi	r26, 0x7D	; 125
     b2c:	bf 4f       	sbci	r27, 0xFF	; 255
     b2e:	9c 91       	ld	r25, X
     b30:	86 81       	ldd	r24, Z+6	; 0x06
     b32:	89 17       	cp	r24, r25
     b34:	f0 f2       	brcs	.-68     	; 0xaf2 <nwkRouteFrameReceived+0x4e>
     b36:	ee cf       	rjmp	.-36     	; 0xb14 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     b42:	cf 93       	push	r28
     b44:	df 93       	push	r29
     b46:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     b48:	87 85       	ldd	r24, Z+15	; 0x0f
     b4a:	90 89       	ldd	r25, Z+16	; 0x10
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	92 07       	cpc	r25, r18
     b52:	d9 f1       	breq	.+118    	; 0xbca <nwkRouteFrameSent+0x88>
     b54:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     b56:	63 85       	ldd	r22, Z+11	; 0x0b
     b58:	63 fb       	bst	r22, 3
     b5a:	66 27       	eor	r22, r22
     b5c:	60 f9       	bld	r22, 0
     b5e:	2e df       	rcall	.-420    	; 0x9bc <NWK_RouteFindEntry>
     b60:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     b62:	89 2b       	or	r24, r25
     b64:	91 f1       	breq	.+100    	; 0xbca <nwkRouteFrameSent+0x88>
     b66:	8c 91       	ld	r24, X
     b68:	80 fd       	sbrc	r24, 0
     b6a:	2f c0       	rjmp	.+94     	; 0xbca <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 57       	subi	r30, 0x7D	; 125
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	80 81       	ld	r24, Z
     b74:	81 11       	cpse	r24, r1
     b76:	19 c0       	rjmp	.+50     	; 0xbaa <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     b78:	8c 91       	ld	r24, X
     b7a:	8f 70       	andi	r24, 0x0F	; 15
     b7c:	80 63       	ori	r24, 0x30	; 48
     b7e:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     b80:	15 96       	adiw	r26, 0x05	; 5
     b82:	8c 91       	ld	r24, X
     b84:	15 97       	sbiw	r26, 0x05	; 5
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	15 96       	adiw	r26, 0x05	; 5
     b8a:	8c 93       	st	X, r24
     b8c:	8f 3f       	cpi	r24, 0xFF	; 255
     b8e:	e9 f4       	brne	.+58     	; 0xbca <nwkRouteFrameSent+0x88>
     b90:	ea e4       	ldi	r30, 0x4A	; 74
     b92:	f6 e0       	ldi	r31, 0x06	; 6
     b94:	26 e0       	ldi	r18, 0x06	; 6
     b96:	39 e0       	ldi	r19, 0x09	; 9
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     b98:	80 81       	ld	r24, Z
     b9a:	86 95       	lsr	r24
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 83       	st	Z, r24
     ba0:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     ba2:	e2 17       	cp	r30, r18
     ba4:	f3 07       	cpc	r31, r19
     ba6:	c1 f7       	brne	.-16     	; 0xb98 <nwkRouteFrameSent+0x56>
     ba8:	10 c0       	rjmp	.+32     	; 0xbca <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     baa:	9c 91       	ld	r25, X
     bac:	89 2f       	mov	r24, r25
     bae:	82 95       	swap	r24
     bb0:	8f 70       	andi	r24, 0x0F	; 15
     bb2:	81 5f       	subi	r24, 0xF1	; 241
     bb4:	8f 70       	andi	r24, 0x0F	; 15
     bb6:	28 2f       	mov	r18, r24
     bb8:	22 95       	swap	r18
     bba:	20 7f       	andi	r18, 0xF0	; 240
     bbc:	9f 70       	andi	r25, 0x0F	; 15
     bbe:	92 2b       	or	r25, r18
     bc0:	9c 93       	st	X, r25
     bc2:	81 11       	cpse	r24, r1
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     bc6:	cd 01       	movw	r24, r26
     bc8:	54 df       	rcall	.-344    	; 0xa72 <NWK_RouteFreeEntry>
  }
}
     bca:	df 91       	pop	r29
     bcc:	cf 91       	pop	r28
     bce:	08 95       	ret

00000bd0 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     bd6:	87 85       	ldd	r24, Z+15	; 0x0f
     bd8:	90 89       	ldd	r25, Z+16	; 0x10
     bda:	8f 3f       	cpi	r24, 0xFF	; 255
     bdc:	2f ef       	ldi	r18, 0xFF	; 255
     bde:	92 07       	cpc	r25, r18
     be0:	29 f4       	brne	.+10     	; 0xbec <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	9f ef       	ldi	r25, 0xFF	; 255
     be6:	90 87       	std	Z+8, r25	; 0x08
     be8:	87 83       	std	Z+7, r24	; 0x07
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     bec:	23 85       	ldd	r18, Z+11	; 0x0b
     bee:	22 ff       	sbrs	r18, 2
     bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     bf2:	90 87       	std	Z+8, r25	; 0x08
     bf4:	87 83       	std	Z+7, r24	; 0x07
     bf6:	08 c0       	rjmp	.+16     	; 0xc08 <nwkRoutePrepareTx+0x38>
     bf8:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     bfa:	63 85       	ldd	r22, Z+11	; 0x0b
     bfc:	63 fb       	bst	r22, 3
     bfe:	66 27       	eor	r22, r22
     c00:	60 f9       	bld	r22, 0
     c02:	41 df       	rcall	.-382    	; 0xa86 <NWK_RouteNextHop>
     c04:	98 87       	std	Y+8, r25	; 0x08
     c06:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     c0e:	af 92       	push	r10
     c10:	bf 92       	push	r11
     c12:	cf 92       	push	r12
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     c22:	1b 85       	ldd	r17, Y+11	; 0x0b
     c24:	13 fb       	bst	r17, 3
     c26:	11 27       	eor	r17, r17
     c28:	10 f9       	bld	r17, 0
     c2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     c2c:	d8 88       	ldd	r13, Y+16	; 0x10
     c2e:	61 2f       	mov	r22, r17
     c30:	c6 01       	movw	r24, r12
     c32:	29 df       	rcall	.-430    	; 0xa86 <NWK_RouteNextHop>
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	59 f0       	breq	.+22     	; 0xc4e <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     c38:	fe 01       	movw	r30, r28
     c3a:	e9 57       	subi	r30, 0x79	; 121
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	11 82       	std	Z+1, r1	; 0x01
     c40:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     c42:	31 97       	sbiw	r30, 0x01	; 1
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     c48:	ce 01       	movw	r24, r28
     c4a:	77 d3       	rcall	.+1774   	; 0x133a <nwkTxFrame>
     c4c:	22 c0       	rjmp	.+68     	; 0xc92 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     c4e:	ad 84       	ldd	r10, Y+13	; 0x0d
     c50:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     c52:	1f de       	rcall	.-962    	; 0x892 <nwkFrameAlloc>
     c54:	7c 01       	movw	r14, r24
     c56:	00 97       	sbiw	r24, 0x00	; 0
     c58:	d1 f0       	breq	.+52     	; 0xc8e <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     c5a:	7d de       	rcall	.-774    	; 0x956 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     c5c:	f7 01       	movw	r30, r14
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	8a 5f       	subi	r24, 0xFA	; 250
     c62:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     c64:	e9 57       	subi	r30, 0x79	; 121
     c66:	ff 4f       	sbci	r31, 0xFF	; 255
     c68:	11 82       	std	Z+1, r1	; 0x01
     c6a:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     c6c:	f7 01       	movw	r30, r14
     c6e:	b0 8a       	std	Z+16, r11	; 0x10
     c70:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     c72:	ef 57       	subi	r30, 0x7F	; 127
     c74:	ff 4f       	sbci	r31, 0xFF	; 255
     c76:	01 90       	ld	r0, Z+
     c78:	f0 81       	ld	r31, Z
     c7a:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 83       	st	Z, r24
  command->srcAddr = src;
     c80:	b2 82       	std	Z+2, r11	; 0x02
     c82:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     c84:	d4 82       	std	Z+4, r13	; 0x04
     c86:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
     c88:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
     c8a:	c7 01       	movw	r24, r14
     c8c:	56 d3       	rcall	.+1708   	; 0x133a <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     c8e:	ce 01       	movw	r24, r28
     c90:	36 de       	rcall	.-916    	; 0x8fe <nwkFrameFree>
  }
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	08 95       	ret

00000ca6 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     ca6:	dc 01       	movw	r26, r24
     ca8:	17 96       	adiw	r26, 0x07	; 7
     caa:	ed 91       	ld	r30, X+
     cac:	fc 91       	ld	r31, X
     cae:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     cb0:	19 96       	adiw	r26, 0x09	; 9
     cb2:	8c 91       	ld	r24, X
     cb4:	86 30       	cpi	r24, 0x06	; 6
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     cb8:	65 81       	ldd	r22, Z+5	; 0x05
     cba:	83 81       	ldd	r24, Z+3	; 0x03
     cbc:	94 81       	ldd	r25, Z+4	; 0x04
     cbe:	ed de       	rcall	.-550    	; 0xa9a <nwkRouteRemove>

  return true;
     cc0:	81 e0       	ldi	r24, 0x01	; 1
     cc2:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     cc4:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     cc6:	08 95       	ret

00000cc8 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     cc8:	dc 01       	movw	r26, r24
     cca:	19 96       	adiw	r26, 0x09	; 9
     ccc:	2c 91       	ld	r18, X
     cce:	19 97       	sbiw	r26, 0x09	; 9
     cd0:	22 23       	and	r18, r18
     cd2:	71 f0       	breq	.+28     	; 0xcf0 <nwkRxServiceDataInd+0x28>
     cd4:	17 96       	adiw	r26, 0x07	; 7
     cd6:	ed 91       	ld	r30, X+
     cd8:	fc 91       	ld	r31, X
     cda:	18 97       	sbiw	r26, 0x08	; 8
     cdc:	20 81       	ld	r18, Z
     cde:	22 23       	and	r18, r18
     ce0:	19 f0       	breq	.+6      	; 0xce8 <nwkRxServiceDataInd+0x20>
     ce2:	21 30       	cpi	r18, 0x01	; 1
     ce4:	19 f0       	breq	.+6      	; 0xcec <nwkRxServiceDataInd+0x24>
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <nwkRxServiceDataInd+0x2c>
     ce8:	b9 c3       	rjmp	.+1906   	; 0x145c <nwkTxAckReceived>
     cea:	08 95       	ret
     cec:	dc cf       	rjmp	.-72     	; 0xca6 <nwkRouteErrorReceived>
     cee:	08 95       	ret
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	08 95       	ret
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	08 95       	ret

00000cf8 <nwkRxDuplicateRejectionTimerHandler>:
     cf8:	bc 01       	movw	r22, r24
     cfa:	e3 e1       	ldi	r30, 0x13	; 19
     cfc:	f9 e0       	ldi	r31, 0x09	; 9
     cfe:	25 e4       	ldi	r18, 0x45	; 69
     d00:	39 e0       	ldi	r19, 0x09	; 9
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	51 e0       	ldi	r21, 0x01	; 1
     d06:	90 81       	ld	r25, Z
     d08:	99 23       	and	r25, r25
     d0a:	19 f0       	breq	.+6      	; 0xd12 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     d0c:	91 50       	subi	r25, 0x01	; 1
     d0e:	90 83       	st	Z, r25
     d10:	45 2f       	mov	r20, r21
     d12:	35 96       	adiw	r30, 0x05	; 5
     d14:	e2 17       	cp	r30, r18
     d16:	f3 07       	cpc	r31, r19
     d18:	b1 f7       	brne	.-20     	; 0xd06 <nwkRxDuplicateRejectionTimerHandler+0xe>
     d1a:	44 23       	and	r20, r20
     d1c:	11 f0       	breq	.+4      	; 0xd22 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d1e:	cb 01       	movw	r24, r22
     d20:	74 c6       	rjmp	.+3304   	; 0x1a0a <SYS_TimerStart>
     d22:	08 95       	ret

00000d24 <nwkRxInit>:
     d24:	e3 e1       	ldi	r30, 0x13	; 19
     d26:	f9 e0       	ldi	r31, 0x09	; 9
     d28:	85 e4       	ldi	r24, 0x45	; 69
     d2a:	99 e0       	ldi	r25, 0x09	; 9
     d2c:	10 82       	st	Z, r1
     d2e:	35 96       	adiw	r30, 0x05	; 5
     d30:	e8 17       	cp	r30, r24
     d32:	f9 07       	cpc	r31, r25
     d34:	d9 f7       	brne	.-10     	; 0xd2c <nwkRxInit+0x8>
     d36:	e1 e0       	ldi	r30, 0x01	; 1
     d38:	f9 e0       	ldi	r31, 0x09	; 9
     d3a:	84 e6       	ldi	r24, 0x64	; 100
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e0       	ldi	r26, 0x00	; 0
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	86 83       	std	Z+6, r24	; 0x06
     d44:	97 83       	std	Z+7, r25	; 0x07
     d46:	a0 87       	std	Z+8, r26	; 0x08
     d48:	b1 87       	std	Z+9, r27	; 0x09
     d4a:	12 86       	std	Z+10, r1	; 0x0a
     d4c:	8c e7       	ldi	r24, 0x7C	; 124
     d4e:	96 e0       	ldi	r25, 0x06	; 6
     d50:	94 87       	std	Z+12, r25	; 0x0c
     d52:	83 87       	std	Z+11, r24	; 0x0b
     d54:	64 e6       	ldi	r22, 0x64	; 100
     d56:	76 e0       	ldi	r23, 0x06	; 6
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	98 cc       	rjmp	.-1744   	; 0x68c <NWK_OpenEndpoint>
     d5c:	08 95       	ret

00000d5e <PHY_DataInd>:
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	dc 01       	movw	r26, r24
     d64:	ed 91       	ld	r30, X+
     d66:	fc 91       	ld	r31, X
     d68:	11 97       	sbiw	r26, 0x01	; 1
     d6a:	21 81       	ldd	r18, Z+1	; 0x01
     d6c:	28 38       	cpi	r18, 0x88	; 136
     d6e:	f1 f4       	brne	.+60     	; 0xdac <PHY_DataInd+0x4e>
     d70:	20 81       	ld	r18, Z
     d72:	2f 7d       	andi	r18, 0xDF	; 223
     d74:	21 34       	cpi	r18, 0x41	; 65
     d76:	d1 f4       	brne	.+52     	; 0xdac <PHY_DataInd+0x4e>
     d78:	12 96       	adiw	r26, 0x02	; 2
     d7a:	2c 91       	ld	r18, X
     d7c:	20 31       	cpi	r18, 0x10	; 16
     d7e:	b0 f0       	brcs	.+44     	; 0xdac <PHY_DataInd+0x4e>
     d80:	ec 01       	movw	r28, r24
     d82:	87 dd       	rcall	.-1266   	; 0x892 <nwkFrameAlloc>
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	91 f0       	breq	.+36     	; 0xdac <PHY_DataInd+0x4e>
     d88:	20 e2       	ldi	r18, 0x20	; 32
     d8a:	fc 01       	movw	r30, r24
     d8c:	20 83       	st	Z, r18
     d8e:	2a 81       	ldd	r18, Y+2	; 0x02
     d90:	21 83       	std	Z+1, r18	; 0x01
     d92:	2b 81       	ldd	r18, Y+3	; 0x03
     d94:	ed 57       	subi	r30, 0x7D	; 125
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	20 83       	st	Z, r18
     d9a:	2c 81       	ldd	r18, Y+4	; 0x04
     d9c:	31 96       	adiw	r30, 0x01	; 1
     d9e:	20 83       	st	Z, r18
     da0:	4a 81       	ldd	r20, Y+2	; 0x02
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	68 81       	ld	r22, Y
     da6:	79 81       	ldd	r23, Y+1	; 0x01
     da8:	02 96       	adiw	r24, 0x02	; 2
     daa:	38 d7       	rcall	.+3696   	; 0x1c1c <memcpy>
     dac:	df 91       	pop	r29
     dae:	cf 91       	pop	r28
     db0:	08 95       	ret

00000db2 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     db2:	2f 92       	push	r2
     db4:	3f 92       	push	r3
     db6:	4f 92       	push	r4
     db8:	5f 92       	push	r5
     dba:	6f 92       	push	r6
     dbc:	7f 92       	push	r7
     dbe:	8f 92       	push	r8
     dc0:	9f 92       	push	r9
     dc2:	af 92       	push	r10
     dc4:	bf 92       	push	r11
     dc6:	cf 92       	push	r12
     dc8:	df 92       	push	r13
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	2e 97       	sbiw	r28, 0x0e	; 14
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     de6:	00 e0       	ldi	r16, 0x00	; 0
     de8:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     dea:	0f 2e       	mov	r0, r31
     dec:	f4 e2       	ldi	r31, 0x24	; 36
     dee:	df 2e       	mov	r13, r31
     df0:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     df2:	0f 2e       	mov	r0, r31
     df4:	f4 ee       	ldi	r31, 0xE4	; 228
     df6:	8f 2e       	mov	r8, r31
     df8:	f9 e0       	ldi	r31, 0x09	; 9
     dfa:	9f 2e       	mov	r9, r31
     dfc:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     dfe:	68 94       	set
     e00:	cc 24       	eor	r12, r12
     e02:	c4 f8       	bld	r12, 4
     e04:	0f 2e       	mov	r0, r31
     e06:	f3 e1       	ldi	r31, 0x13	; 19
     e08:	4f 2e       	mov	r4, r31
     e0a:	f9 e0       	ldi	r31, 0x09	; 9
     e0c:	5f 2e       	mov	r5, r31
     e0e:	f0 2d       	mov	r31, r0
     e10:	0f 2e       	mov	r0, r31
     e12:	ff e0       	ldi	r31, 0x0F	; 15
     e14:	6f 2e       	mov	r6, r31
     e16:	f9 e0       	ldi	r31, 0x09	; 9
     e18:	7f 2e       	mov	r7, r31
     e1a:	f0 2d       	mov	r31, r0
     e1c:	0f 2e       	mov	r0, r31
     e1e:	f1 e4       	ldi	r31, 0x41	; 65
     e20:	ef 2e       	mov	r14, r31
     e22:	f9 e0       	ldi	r31, 0x09	; 9
     e24:	ff 2e       	mov	r15, r31
     e26:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     e28:	31 2c       	mov	r3, r1
     e2a:	21 2c       	mov	r2, r1
     e2c:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e2e:	dd c1       	rjmp	.+954    	; 0x11ea <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
     e30:	d5 01       	movw	r26, r10
     e32:	8c 91       	ld	r24, X
     e34:	82 32       	cpi	r24, 0x22	; 34
     e36:	09 f4       	brne	.+2      	; 0xe3a <nwkRxTaskHandler+0x88>
     e38:	07 c1       	rjmp	.+526    	; 0x1048 <nwkRxTaskHandler+0x296>
     e3a:	18 f4       	brcc	.+6      	; 0xe42 <nwkRxTaskHandler+0x90>
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	41 f0       	breq	.+16     	; 0xe50 <nwkRxTaskHandler+0x9e>
     e40:	d4 c1       	rjmp	.+936    	; 0x11ea <nwkRxTaskHandler+0x438>
     e42:	83 32       	cpi	r24, 0x23	; 35
     e44:	09 f4       	brne	.+2      	; 0xe48 <nwkRxTaskHandler+0x96>
     e46:	cc c1       	rjmp	.+920    	; 0x11e0 <nwkRxTaskHandler+0x42e>
     e48:	84 32       	cpi	r24, 0x24	; 36
     e4a:	09 f4       	brne	.+2      	; 0xe4e <nwkRxTaskHandler+0x9c>
     e4c:	cc c1       	rjmp	.+920    	; 0x11e6 <nwkRxTaskHandler+0x434>
     e4e:	cd c1       	rjmp	.+922    	; 0x11ea <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     e50:	f5 01       	movw	r30, r10
     e52:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     e54:	83 85       	ldd	r24, Z+11	; 0x0b
     e56:	98 2f       	mov	r25, r24
     e58:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     e5a:	09 f0       	breq	.+2      	; 0xe5e <nwkRxTaskHandler+0xac>
     e5c:	c6 c1       	rjmp	.+908    	; 0x11ea <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     e5e:	25 81       	ldd	r18, Z+5	; 0x05
     e60:	36 81       	ldd	r19, Z+6	; 0x06
     e62:	2f 3f       	cpi	r18, 0xFF	; 255
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	91 f4       	brne	.+36     	; 0xe8c <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     e68:	d5 01       	movw	r26, r10
     e6a:	1f 96       	adiw	r26, 0x0f	; 15
     e6c:	8d 91       	ld	r24, X+
     e6e:	9c 91       	ld	r25, X
     e70:	50 97       	sbiw	r26, 0x10	; 16
     e72:	f4 01       	movw	r30, r8
     e74:	20 81       	ld	r18, Z
     e76:	31 81       	ldd	r19, Z+1	; 0x01
     e78:	28 17       	cp	r18, r24
     e7a:	39 07       	cpc	r19, r25
     e7c:	19 f0       	breq	.+6      	; 0xe84 <nwkRxTaskHandler+0xd2>
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	09 f0       	breq	.+2      	; 0xe84 <nwkRxTaskHandler+0xd2>
     e82:	b3 c1       	rjmp	.+870    	; 0x11ea <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     e84:	e2 e2       	ldi	r30, 0x22	; 34
     e86:	d5 01       	movw	r26, r10
     e88:	ec 93       	st	X, r30
     e8a:	af c1       	rjmp	.+862    	; 0x11ea <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     e8c:	d5 01       	movw	r26, r10
     e8e:	1f 96       	adiw	r26, 0x0f	; 15
     e90:	2d 91       	ld	r18, X+
     e92:	3c 91       	ld	r19, X
     e94:	50 97       	sbiw	r26, 0x10	; 16
     e96:	2f 3f       	cpi	r18, 0xFF	; 255
     e98:	3f 4f       	sbci	r19, 0xFF	; 255
     e9a:	11 f4       	brne	.+4      	; 0xea0 <nwkRxTaskHandler+0xee>
     e9c:	80 fd       	sbrc	r24, 0
     e9e:	a5 c1       	rjmp	.+842    	; 0x11ea <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     ea0:	f4 01       	movw	r30, r8
     ea2:	20 81       	ld	r18, Z
     ea4:	31 81       	ldd	r19, Z+1	; 0x01
     ea6:	d5 01       	movw	r26, r10
     ea8:	1d 96       	adiw	r26, 0x0d	; 13
     eaa:	8d 91       	ld	r24, X+
     eac:	9c 91       	ld	r25, X
     eae:	1e 97       	sbiw	r26, 0x0e	; 14
     eb0:	28 17       	cp	r18, r24
     eb2:	39 07       	cpc	r19, r25
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <nwkRxTaskHandler+0x106>
     eb6:	99 c1       	rjmp	.+818    	; 0x11ea <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     eb8:	c5 01       	movw	r24, r10
     eba:	f4 dd       	rcall	.-1048   	; 0xaa4 <nwkRouteFrameReceived>
     ebc:	f3 01       	movw	r30, r6
     ebe:	43 2d       	mov	r20, r3
     ec0:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     ec2:	63 2d       	mov	r22, r3
     ec4:	72 2d       	mov	r23, r2
     ec6:	5e 86       	std	Y+14, r5	; 0x0e
     ec8:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     eca:	ad 85       	ldd	r26, Y+13	; 0x0d
     ecc:	be 85       	ldd	r27, Y+14	; 0x0e
     ece:	8c 91       	ld	r24, X
     ed0:	88 23       	and	r24, r24
     ed2:	09 f4       	brne	.+2      	; 0xed6 <nwkRxTaskHandler+0x124>
     ed4:	6c c0       	rjmp	.+216    	; 0xfae <nwkRxTaskHandler+0x1fc>
     ed6:	d5 01       	movw	r26, r10
     ed8:	1d 96       	adiw	r26, 0x0d	; 13
     eda:	2d 91       	ld	r18, X+
     edc:	3c 91       	ld	r19, X
     ede:	1e 97       	sbiw	r26, 0x0e	; 14
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	28 17       	cp	r18, r24
     ee6:	39 07       	cpc	r19, r25
     ee8:	09 f0       	breq	.+2      	; 0xeec <nwkRxTaskHandler+0x13a>
     eea:	62 c0       	rjmp	.+196    	; 0xfb0 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     eec:	f5 01       	movw	r30, r10
     eee:	94 85       	ldd	r25, Z+12	; 0x0c
     ef0:	fa 01       	movw	r30, r20
     ef2:	ee 0f       	add	r30, r30
     ef4:	ff 1f       	adc	r31, r31
     ef6:	ee 0f       	add	r30, r30
     ef8:	ff 1f       	adc	r31, r31
     efa:	e4 0f       	add	r30, r20
     efc:	f5 1f       	adc	r31, r21
     efe:	e1 5f       	subi	r30, 0xF1	; 241
     f00:	f6 4f       	sbci	r31, 0xF6	; 246
     f02:	82 81       	ldd	r24, Z+2	; 0x02
     f04:	89 1b       	sub	r24, r25

      if (diff < 8)
     f06:	88 30       	cpi	r24, 0x08	; 8
     f08:	c8 f5       	brcc	.+114    	; 0xf7c <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
     f0a:	fa 01       	movw	r30, r20
     f0c:	ee 0f       	add	r30, r30
     f0e:	ff 1f       	adc	r31, r31
     f10:	ee 0f       	add	r30, r30
     f12:	ff 1f       	adc	r31, r31
     f14:	e4 0f       	add	r30, r20
     f16:	f5 1f       	adc	r31, r21
     f18:	e1 5f       	subi	r30, 0xF1	; 241
     f1a:	f6 4f       	sbci	r31, 0xF6	; 246
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	29 2f       	mov	r18, r25
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	08 2e       	mov	r0, r24
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <nwkRxTaskHandler+0x178>
     f26:	35 95       	asr	r19
     f28:	27 95       	ror	r18
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <nwkRxTaskHandler+0x174>
     f2e:	20 ff       	sbrs	r18, 0
     f30:	12 c0       	rjmp	.+36     	; 0xf56 <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     f32:	d4 01       	movw	r26, r8
     f34:	2d 91       	ld	r18, X+
     f36:	3c 91       	ld	r19, X
     f38:	f5 01       	movw	r30, r10
     f3a:	87 81       	ldd	r24, Z+7	; 0x07
     f3c:	90 85       	ldd	r25, Z+8	; 0x08
     f3e:	28 17       	cp	r18, r24
     f40:	39 07       	cpc	r19, r25
     f42:	09 f0       	breq	.+2      	; 0xf46 <nwkRxTaskHandler+0x194>
     f44:	52 c1       	rjmp	.+676    	; 0x11ea <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     f46:	63 85       	ldd	r22, Z+11	; 0x0b
     f48:	63 fb       	bst	r22, 3
     f4a:	66 27       	eor	r22, r22
     f4c:	60 f9       	bld	r22, 0
     f4e:	87 85       	ldd	r24, Z+15	; 0x0f
     f50:	90 89       	ldd	r25, Z+16	; 0x10
     f52:	a3 dd       	rcall	.-1210   	; 0xa9a <nwkRouteRemove>
     f54:	4a c1       	rjmp	.+660    	; 0x11ea <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     f56:	fa 01       	movw	r30, r20
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	ee 0f       	add	r30, r30
     f5e:	ff 1f       	adc	r31, r31
     f60:	e4 0f       	add	r30, r20
     f62:	f5 1f       	adc	r31, r21
     f64:	e1 5f       	subi	r30, 0xF1	; 241
     f66:	f6 4f       	sbci	r31, 0xF6	; 246
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <nwkRxTaskHandler+0x1c0>
     f6e:	22 0f       	add	r18, r18
     f70:	33 1f       	adc	r19, r19
     f72:	8a 95       	dec	r24
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <nwkRxTaskHandler+0x1bc>
     f76:	92 2b       	or	r25, r18
     f78:	93 83       	std	Z+3, r25	; 0x03
     f7a:	3e c1       	rjmp	.+636    	; 0x11f8 <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     f7c:	fa 01       	movw	r30, r20
     f7e:	ee 0f       	add	r30, r30
     f80:	ff 1f       	adc	r31, r31
     f82:	ee 0f       	add	r30, r30
     f84:	ff 1f       	adc	r31, r31
     f86:	e4 0f       	add	r30, r20
     f88:	f5 1f       	adc	r31, r21
     f8a:	e1 5f       	subi	r30, 0xF1	; 241
     f8c:	f6 4f       	sbci	r31, 0xF6	; 246
     f8e:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     f90:	23 81       	ldd	r18, Z+3	; 0x03
     f92:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     f94:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     f96:	a9 01       	movw	r20, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <nwkRxTaskHandler+0x1ec>
     f9a:	44 0f       	add	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	8a 95       	dec	r24
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <nwkRxTaskHandler+0x1e8>
     fa2:	ca 01       	movw	r24, r20
     fa4:	81 60       	ori	r24, 0x01	; 1
     fa6:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     fa8:	8f e1       	ldi	r24, 0x1F	; 31
     faa:	84 83       	std	Z+4, r24	; 0x04
     fac:	25 c1       	rjmp	.+586    	; 0x11f8 <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     fae:	bf 01       	movw	r22, r30
     fb0:	4f 5f       	subi	r20, 0xFF	; 255
     fb2:	5f 4f       	sbci	r21, 0xFF	; 255
     fb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb8:	05 96       	adiw	r24, 0x05	; 5
     fba:	9e 87       	std	Y+14, r25	; 0x0e
     fbc:	8d 87       	std	Y+13, r24	; 0x0d
     fbe:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     fc0:	ee 15       	cp	r30, r14
     fc2:	ff 05       	cpc	r31, r15
     fc4:	09 f0       	breq	.+2      	; 0xfc8 <nwkRxTaskHandler+0x216>
     fc6:	81 cf       	rjmp	.-254    	; 0xeca <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     fc8:	61 15       	cp	r22, r1
     fca:	71 05       	cpc	r23, r1
     fcc:	09 f4       	brne	.+2      	; 0xfd0 <nwkRxTaskHandler+0x21e>
     fce:	0d c1       	rjmp	.+538    	; 0x11ea <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     fd0:	d5 01       	movw	r26, r10
     fd2:	1d 96       	adiw	r26, 0x0d	; 13
     fd4:	8d 91       	ld	r24, X+
     fd6:	9c 91       	ld	r25, X
     fd8:	1e 97       	sbiw	r26, 0x0e	; 14
     fda:	fb 01       	movw	r30, r22
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     fe0:	1c 96       	adiw	r26, 0x0c	; 12
     fe2:	8c 91       	ld	r24, X
     fe4:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     fea:	8f e1       	ldi	r24, 0x1F	; 31
     fec:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	99 e0       	ldi	r25, 0x09	; 9
     ff2:	0b d5       	rcall	.+2582   	; 0x1a0a <SYS_TimerStart>
     ff4:	01 c1       	rjmp	.+514    	; 0x11f8 <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     ff6:	d4 01       	movw	r26, r8
     ff8:	2d 91       	ld	r18, X+
     ffa:	3c 91       	ld	r19, X
     ffc:	f5 01       	movw	r30, r10
     ffe:	87 85       	ldd	r24, Z+15	; 0x0f
    1000:	90 89       	ldd	r25, Z+16	; 0x10
    1002:	28 17       	cp	r18, r24
    1004:	39 07       	cpc	r19, r25
    1006:	81 f0       	breq	.+32     	; 0x1028 <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
    1008:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    100a:	42 fd       	sbrc	r20, 2
    100c:	0b c0       	rjmp	.+22     	; 0x1024 <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    100e:	c5 01       	movw	r24, r10
    1010:	e2 d1       	rcall	.+964    	; 0x13d6 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1012:	d4 01       	movw	r26, r8
    1014:	2d 91       	ld	r18, X+
    1016:	3c 91       	ld	r19, X
    1018:	f5 01       	movw	r30, r10
    101a:	87 85       	ldd	r24, Z+15	; 0x0f
    101c:	90 89       	ldd	r25, Z+16	; 0x10
    101e:	28 17       	cp	r18, r24
    1020:	39 07       	cpc	r19, r25
    1022:	11 f0       	breq	.+4      	; 0x1028 <nwkRxTaskHandler+0x276>
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	21 f4       	brne	.+8      	; 0x1030 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1028:	e2 e2       	ldi	r30, 0x22	; 34
    102a:	d5 01       	movw	r26, r10
    102c:	ec 93       	st	X, r30
    102e:	dd c0       	rjmp	.+442    	; 0x11ea <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
    1030:	d5 01       	movw	r26, r10
    1032:	17 96       	adiw	r26, 0x07	; 7
    1034:	8d 91       	ld	r24, X+
    1036:	9c 91       	ld	r25, X
    1038:	18 97       	sbiw	r26, 0x08	; 8
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	09 f0       	breq	.+2      	; 0x1042 <nwkRxTaskHandler+0x290>
    1040:	d4 c0       	rjmp	.+424    	; 0x11ea <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
    1042:	83 e2       	ldi	r24, 0x23	; 35
    1044:	8c 93       	st	X, r24
    1046:	d1 c0       	rjmp	.+418    	; 0x11ea <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    1048:	10 92 0e 09 	sts	0x090E, r1	; 0x80090e <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    104c:	f5 01       	movw	r30, r10
    104e:	21 89       	ldd	r18, Z+17	; 0x11
    1050:	22 95       	swap	r18
    1052:	2f 70       	andi	r18, 0x0F	; 15
    1054:	e2 2f       	mov	r30, r18
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	ee 0f       	add	r30, r30
    105a:	ff 1f       	adc	r31, r31
    105c:	e6 51       	subi	r30, 0x16	; 22
    105e:	f6 4f       	sbci	r31, 0xF6	; 246
    1060:	01 90       	ld	r0, Z+
    1062:	f0 81       	ld	r31, Z
    1064:	e0 2d       	mov	r30, r0
    1066:	30 97       	sbiw	r30, 0x00	; 0
    1068:	09 f4       	brne	.+2      	; 0x106c <nwkRxTaskHandler+0x2ba>
    106a:	63 c0       	rjmp	.+198    	; 0x1132 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    106c:	d5 01       	movw	r26, r10
    106e:	1d 96       	adiw	r26, 0x0d	; 13
    1070:	8d 91       	ld	r24, X+
    1072:	9c 91       	ld	r25, X
    1074:	1e 97       	sbiw	r26, 0x0e	; 14
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    107a:	1f 96       	adiw	r26, 0x0f	; 15
    107c:	4d 91       	ld	r20, X+
    107e:	5c 91       	ld	r21, X
    1080:	50 97       	sbiw	r26, 0x10	; 16
    1082:	5c 83       	std	Y+4, r21	; 0x04
    1084:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    1086:	51 96       	adiw	r26, 0x11	; 17
    1088:	3c 91       	ld	r19, X
    108a:	51 97       	sbiw	r26, 0x11	; 17
    108c:	3f 70       	andi	r19, 0x0F	; 15
    108e:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    1090:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    1092:	af 57       	subi	r26, 0x7F	; 127
    1094:	bf 4f       	sbci	r27, 0xFF	; 255
    1096:	6d 91       	ld	r22, X+
    1098:	7c 91       	ld	r23, X
    109a:	79 87       	std	Y+9, r23	; 0x09
    109c:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    109e:	95 01       	movw	r18, r10
    10a0:	2e 5f       	subi	r18, 0xFE	; 254
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	26 1b       	sub	r18, r22
    10a6:	37 0b       	sbc	r19, r23
    10a8:	d5 01       	movw	r26, r10
    10aa:	11 96       	adiw	r26, 0x01	; 1
    10ac:	3c 91       	ld	r19, X
    10ae:	11 97       	sbiw	r26, 0x01	; 1
    10b0:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    10b2:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    10b4:	ad 57       	subi	r26, 0x7D	; 125
    10b6:	bf 4f       	sbci	r27, 0xFF	; 255
    10b8:	2c 91       	ld	r18, X
    10ba:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    10bc:	11 96       	adiw	r26, 0x01	; 1
    10be:	2c 91       	ld	r18, X
    10c0:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    10c2:	d5 01       	movw	r26, r10
    10c4:	1b 96       	adiw	r26, 0x0b	; 11
    10c6:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    10c8:	62 2f       	mov	r22, r18
    10ca:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    10cc:	22 fd       	sbrc	r18, 2
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <nwkRxTaskHandler+0x322>
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <nwkRxTaskHandler+0x324>
    10d4:	30 e2       	ldi	r19, 0x20	; 32
    10d6:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    10d8:	23 fd       	sbrc	r18, 3
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <nwkRxTaskHandler+0x32e>
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <nwkRxTaskHandler+0x330>
    10e0:	30 e4       	ldi	r19, 0x40	; 64
    10e2:	26 2f       	mov	r18, r22
    10e4:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    10e6:	4f 3f       	cpi	r20, 0xFF	; 255
    10e8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ea:	11 f0       	breq	.+4      	; 0x10f0 <nwkRxTaskHandler+0x33e>
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <nwkRxTaskHandler+0x340>
    10f0:	34 e0       	ldi	r19, 0x04	; 4
    10f2:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    10f4:	d5 01       	movw	r26, r10
    10f6:	19 96       	adiw	r26, 0x09	; 9
    10f8:	4d 91       	ld	r20, X+
    10fa:	5c 91       	ld	r21, X
    10fc:	1a 97       	sbiw	r26, 0x0a	; 10
    10fe:	84 17       	cp	r24, r20
    1100:	95 07       	cpc	r25, r21
    1102:	11 f0       	breq	.+4      	; 0x1108 <nwkRxTaskHandler+0x356>
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	01 c0       	rjmp	.+2      	; 0x110a <nwkRxTaskHandler+0x358>
    1108:	98 e0       	ldi	r25, 0x08	; 8
    110a:	82 2f       	mov	r24, r18
    110c:	89 2b       	or	r24, r25
    110e:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1110:	d5 01       	movw	r26, r10
    1112:	15 96       	adiw	r26, 0x05	; 5
    1114:	2d 91       	ld	r18, X+
    1116:	3c 91       	ld	r19, X
    1118:	16 97       	sbiw	r26, 0x06	; 6
    111a:	2f 3f       	cpi	r18, 0xFF	; 255
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	11 f0       	breq	.+4      	; 0x1124 <nwkRxTaskHandler+0x372>
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	01 c0       	rjmp	.+2      	; 0x1126 <nwkRxTaskHandler+0x374>
    1124:	9c 2d       	mov	r25, r12
    1126:	89 2b       	or	r24, r25
    1128:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	19 95       	eicall
    1130:	01 c0       	rjmp	.+2      	; 0x1134 <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1132:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1134:	f5 01       	movw	r30, r10
    1136:	93 85       	ldd	r25, Z+11	; 0x0b
    1138:	90 ff       	sbrs	r25, 0
    ack = false;
    113a:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    113c:	d5 01       	movw	r26, r10
    113e:	17 96       	adiw	r26, 0x07	; 7
    1140:	2d 91       	ld	r18, X+
    1142:	3c 91       	ld	r19, X
    1144:	18 97       	sbiw	r26, 0x08	; 8
    1146:	2f 3f       	cpi	r18, 0xFF	; 255
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	69 f4       	brne	.+26     	; 0x1166 <nwkRxTaskHandler+0x3b4>
    114c:	f4 01       	movw	r30, r8
    114e:	40 81       	ld	r20, Z
    1150:	51 81       	ldd	r21, Z+1	; 0x01
    1152:	d5 01       	movw	r26, r10
    1154:	1f 96       	adiw	r26, 0x0f	; 15
    1156:	2d 91       	ld	r18, X+
    1158:	3c 91       	ld	r19, X
    115a:	50 97       	sbiw	r26, 0x10	; 16
    115c:	42 17       	cp	r20, r18
    115e:	53 07       	cpc	r21, r19
    1160:	11 f4       	brne	.+4      	; 0x1166 <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1162:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1164:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1166:	f5 01       	movw	r30, r10
    1168:	25 81       	ldd	r18, Z+5	; 0x05
    116a:	36 81       	ldd	r19, Z+6	; 0x06
    116c:	2f 3f       	cpi	r18, 0xFF	; 255
    116e:	3f 4f       	sbci	r19, 0xFF	; 255
    1170:	a1 f1       	breq	.+104    	; 0x11da <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1172:	d4 01       	movw	r26, r8
    1174:	2d 91       	ld	r18, X+
    1176:	3c 91       	ld	r19, X
    1178:	2f 3f       	cpi	r18, 0xFF	; 255
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	71 f1       	breq	.+92     	; 0x11da <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
    117e:	88 23       	and	r24, r24
    1180:	61 f1       	breq	.+88     	; 0x11da <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    1182:	87 db       	rcall	.-2290   	; 0x892 <nwkFrameAlloc>
    1184:	8c 01       	movw	r16, r24
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	41 f1       	breq	.+80     	; 0x11da <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
    118a:	e5 db       	rcall	.-2102   	; 0x956 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    118c:	f8 01       	movw	r30, r16
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	8d 5f       	subi	r24, 0xFD	; 253
    1192:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    1194:	e9 57       	subi	r30, 0x79	; 121
    1196:	ff 4f       	sbci	r31, 0xFF	; 255
    1198:	11 82       	std	Z+1, r1	; 0x01
    119a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    119c:	d5 01       	movw	r26, r10
    119e:	1b 96       	adiw	r26, 0x0b	; 11
    11a0:	8c 91       	ld	r24, X
    11a2:	1b 97       	sbiw	r26, 0x0b	; 11
    11a4:	86 95       	lsr	r24
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	f8 01       	movw	r30, r16
    11aa:	93 85       	ldd	r25, Z+11	; 0x0b
    11ac:	80 fb       	bst	r24, 0
    11ae:	91 f9       	bld	r25, 1
    11b0:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    11b2:	1d 96       	adiw	r26, 0x0d	; 13
    11b4:	8d 91       	ld	r24, X+
    11b6:	9c 91       	ld	r25, X
    11b8:	1e 97       	sbiw	r26, 0x0e	; 14
    11ba:	90 8b       	std	Z+16, r25	; 0x10
    11bc:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    11be:	ef 57       	subi	r30, 0x7F	; 127
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	01 90       	ld	r0, Z+
    11c4:	f0 81       	ld	r31, Z
    11c6:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    11c8:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    11ca:	80 91 0e 09 	lds	r24, 0x090E	; 0x80090e <nwkRxAckControl>
    11ce:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    11d0:	1c 96       	adiw	r26, 0x0c	; 12
    11d2:	8c 91       	ld	r24, X
    11d4:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    11d6:	c8 01       	movw	r24, r16
    11d8:	b0 d0       	rcall	.+352    	; 0x133a <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    11da:	d5 01       	movw	r26, r10
    11dc:	dc 92       	st	X, r13
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
    11e0:	c5 01       	movw	r24, r10
    11e2:	15 dd       	rcall	.-1494   	; 0xc0e <nwkRouteFrame>
      } break;
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    11e6:	c5 01       	movw	r24, r10
    11e8:	8a db       	rcall	.-2284   	; 0x8fe <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    11ea:	c5 01       	movw	r24, r10
    11ec:	92 db       	rcall	.-2268   	; 0x912 <nwkFrameNext>
    11ee:	5c 01       	movw	r10, r24
    11f0:	89 2b       	or	r24, r25
    11f2:	09 f0       	breq	.+2      	; 0x11f6 <nwkRxTaskHandler+0x444>
    11f4:	1d ce       	rjmp	.-966    	; 0xe30 <nwkRxTaskHandler+0x7e>
    11f6:	07 c0       	rjmp	.+14     	; 0x1206 <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    11f8:	f5 01       	movw	r30, r10
    11fa:	87 81       	ldd	r24, Z+7	; 0x07
    11fc:	90 85       	ldd	r25, Z+8	; 0x08
    11fe:	01 96       	adiw	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <nwkRxTaskHandler+0x452>
    1202:	07 cf       	rjmp	.-498    	; 0x1012 <nwkRxTaskHandler+0x260>
    1204:	f8 ce       	rjmp	.-528    	; 0xff6 <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    1206:	2e 96       	adiw	r28, 0x0e	; 14
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	ff 90       	pop	r15
    121c:	ef 90       	pop	r14
    121e:	df 90       	pop	r13
    1220:	cf 90       	pop	r12
    1222:	bf 90       	pop	r11
    1224:	af 90       	pop	r10
    1226:	9f 90       	pop	r9
    1228:	8f 90       	pop	r8
    122a:	7f 90       	pop	r7
    122c:	6f 90       	pop	r6
    122e:	5f 90       	pop	r5
    1230:	4f 90       	pop	r4
    1232:	3f 90       	pop	r3
    1234:	2f 90       	pop	r2
    1236:	08 95       	ret

00001238 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	7c 01       	movw	r14, r24
    1244:	10 e0       	ldi	r17, 0x00	; 0
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	c3 e1       	ldi	r28, 0x13	; 19
    124e:	13 c0       	rjmp	.+38     	; 0x1276 <nwkTxDelayTimerHandler+0x3e>
    1250:	fc 01       	movw	r30, r24
    1252:	20 81       	ld	r18, Z
    1254:	21 31       	cpi	r18, 0x11	; 17
    1256:	79 f4       	brne	.+30     	; 0x1276 <nwkTxDelayTimerHandler+0x3e>
    1258:	ec 57       	subi	r30, 0x7C	; 124
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	21 50       	subi	r18, 0x01	; 1
    1262:	31 09       	sbc	r19, r1
    1264:	31 83       	std	Z+1, r19	; 0x01
    1266:	20 83       	st	Z, r18
    1268:	23 2b       	or	r18, r19
    126a:	21 f4       	brne	.+8      	; 0x1274 <nwkTxDelayTimerHandler+0x3c>
    126c:	fc 01       	movw	r30, r24
    126e:	c0 83       	st	Z, r28
    1270:	10 2f       	mov	r17, r16
    1272:	01 c0       	rjmp	.+2      	; 0x1276 <nwkTxDelayTimerHandler+0x3e>
    1274:	10 2f       	mov	r17, r16
    1276:	4d db       	rcall	.-2406   	; 0x912 <nwkFrameNext>
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	51 f7       	brne	.-44     	; 0x1250 <nwkTxDelayTimerHandler+0x18>
    127c:	11 23       	and	r17, r17
    127e:	11 f0       	breq	.+4      	; 0x1284 <nwkTxDelayTimerHandler+0x4c>
    1280:	c7 01       	movw	r24, r14
    1282:	c3 d3       	rcall	.+1926   	; 0x1a0a <SYS_TimerStart>
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	08 95       	ret

00001290 <nwkTxAckWaitTimerHandler>:
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	7c 01       	movw	r14, r24
    129e:	10 e0       	ldi	r17, 0x00	; 0
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	01 e0       	ldi	r16, 0x01	; 1
    12a6:	d7 e1       	ldi	r29, 0x17	; 23
    12a8:	c0 e1       	ldi	r28, 0x10	; 16
    12aa:	16 c0       	rjmp	.+44     	; 0x12d8 <nwkTxAckWaitTimerHandler+0x48>
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 81       	ld	r18, Z
    12b0:	26 31       	cpi	r18, 0x16	; 22
    12b2:	91 f4       	brne	.+36     	; 0x12d8 <nwkTxAckWaitTimerHandler+0x48>
    12b4:	ec 57       	subi	r30, 0x7C	; 124
    12b6:	ff 4f       	sbci	r31, 0xFF	; 255
    12b8:	20 81       	ld	r18, Z
    12ba:	31 81       	ldd	r19, Z+1	; 0x01
    12bc:	21 50       	subi	r18, 0x01	; 1
    12be:	31 09       	sbc	r19, r1
    12c0:	31 83       	std	Z+1, r19	; 0x01
    12c2:	20 83       	st	Z, r18
    12c4:	23 2b       	or	r18, r19
    12c6:	39 f4       	brne	.+14     	; 0x12d6 <nwkTxAckWaitTimerHandler+0x46>
    12c8:	fc 01       	movw	r30, r24
    12ca:	d0 83       	st	Z, r29
    12cc:	ed 57       	subi	r30, 0x7D	; 125
    12ce:	ff 4f       	sbci	r31, 0xFF	; 255
    12d0:	c0 83       	st	Z, r28
    12d2:	10 2f       	mov	r17, r16
    12d4:	01 c0       	rjmp	.+2      	; 0x12d8 <nwkTxAckWaitTimerHandler+0x48>
    12d6:	10 2f       	mov	r17, r16
    12d8:	1c db       	rcall	.-2504   	; 0x912 <nwkFrameNext>
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	39 f7       	brne	.-50     	; 0x12ac <nwkTxAckWaitTimerHandler+0x1c>
    12de:	11 23       	and	r17, r17
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <nwkTxAckWaitTimerHandler+0x56>
    12e2:	c7 01       	movw	r24, r14
    12e4:	92 d3       	rcall	.+1828   	; 0x1a0a <SYS_TimerStart>
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <nwkTxInit>:
    12f4:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <nwkTxPhyActiveFrame+0x1>
    12f8:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <nwkTxPhyActiveFrame>
    12fc:	ee e4       	ldi	r30, 0x4E	; 78
    12fe:	f9 e0       	ldi	r31, 0x09	; 9
    1300:	82 e3       	ldi	r24, 0x32	; 50
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	86 83       	std	Z+6, r24	; 0x06
    130a:	97 83       	std	Z+7, r25	; 0x07
    130c:	a0 87       	std	Z+8, r26	; 0x08
    130e:	b1 87       	std	Z+9, r27	; 0x09
    1310:	12 86       	std	Z+10, r1	; 0x0a
    1312:	88 e4       	ldi	r24, 0x48	; 72
    1314:	99 e0       	ldi	r25, 0x09	; 9
    1316:	94 87       	std	Z+12, r25	; 0x0c
    1318:	83 87       	std	Z+11, r24	; 0x0b
    131a:	e1 e4       	ldi	r30, 0x41	; 65
    131c:	f9 e0       	ldi	r31, 0x09	; 9
    131e:	8a e0       	ldi	r24, 0x0A	; 10
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	a0 e0       	ldi	r26, 0x00	; 0
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	86 83       	std	Z+6, r24	; 0x06
    1328:	97 83       	std	Z+7, r25	; 0x07
    132a:	a0 87       	std	Z+8, r26	; 0x08
    132c:	b1 87       	std	Z+9, r27	; 0x09
    132e:	12 86       	std	Z+10, r1	; 0x0a
    1330:	8c e1       	ldi	r24, 0x1C	; 28
    1332:	99 e0       	ldi	r25, 0x09	; 9
    1334:	94 87       	std	Z+12, r25	; 0x0c
    1336:	83 87       	std	Z+11, r24	; 0x0b
    1338:	08 95       	ret

0000133a <nwkTxFrame>:
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	fc 01       	movw	r30, r24
    1342:	ea 57       	subi	r30, 0x7A	; 122
    1344:	ff 4f       	sbci	r31, 0xFF	; 255
    1346:	80 81       	ld	r24, Z
    1348:	81 ff       	sbrs	r24, 1
    134a:	03 c0       	rjmp	.+6      	; 0x1352 <nwkTxFrame+0x18>
    134c:	92 e1       	ldi	r25, 0x12	; 18
    134e:	98 83       	st	Y, r25
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <nwkTxFrame+0x1c>
    1352:	92 e1       	ldi	r25, 0x12	; 18
    1354:	98 83       	st	Y, r25
    1356:	fe 01       	movw	r30, r28
    1358:	ed 57       	subi	r30, 0x7D	; 125
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	10 82       	st	Z, r1
    135e:	80 ff       	sbrs	r24, 0
    1360:	05 c0       	rjmp	.+10     	; 0x136c <nwkTxFrame+0x32>
    1362:	2f ef       	ldi	r18, 0xFF	; 255
    1364:	3f ef       	ldi	r19, 0xFF	; 255
    1366:	3e 83       	std	Y+6, r19	; 0x06
    1368:	2d 83       	std	Y+5, r18	; 0x05
    136a:	06 c0       	rjmp	.+12     	; 0x1378 <nwkTxFrame+0x3e>
    136c:	20 91 e6 09 	lds	r18, 0x09E6	; 0x8009e6 <nwkIb+0x2>
    1370:	30 91 e7 09 	lds	r19, 0x09E7	; 0x8009e7 <nwkIb+0x3>
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	85 70       	andi	r24, 0x05	; 5
    137a:	19 f4       	brne	.+6      	; 0x1382 <nwkTxFrame+0x48>
    137c:	ce 01       	movw	r24, r28
    137e:	28 dc       	rcall	.-1968   	; 0xbd0 <nwkRoutePrepareTx>
    1380:	04 c0       	rjmp	.+8      	; 0x138a <nwkTxFrame+0x50>
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	98 89       	ldd	r25, Y+16	; 0x10
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	8f 83       	std	Y+7, r24	; 0x07
    138a:	e4 ee       	ldi	r30, 0xE4	; 228
    138c:	f9 e0       	ldi	r31, 0x09	; 9
    138e:	80 81       	ld	r24, Z
    1390:	91 81       	ldd	r25, Z+1	; 0x01
    1392:	9a 87       	std	Y+10, r25	; 0x0a
    1394:	89 87       	std	Y+9, r24	; 0x09
    1396:	85 81       	ldd	r24, Z+5	; 0x05
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	85 83       	std	Z+5, r24	; 0x05
    139c:	8c 83       	std	Y+4, r24	; 0x04
    139e:	8f 81       	ldd	r24, Y+7	; 0x07
    13a0:	98 85       	ldd	r25, Y+8	; 0x08
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	69 f4       	brne	.+26     	; 0x13c0 <nwkTxFrame+0x86>
    13a6:	81 e4       	ldi	r24, 0x41	; 65
    13a8:	98 e8       	ldi	r25, 0x88	; 136
    13aa:	9b 83       	std	Y+3, r25	; 0x03
    13ac:	8a 83       	std	Y+2, r24	; 0x02
    13ae:	28 d4       	rcall	.+2128   	; 0x1c00 <rand>
    13b0:	cc 57       	subi	r28, 0x7C	; 124
    13b2:	df 4f       	sbci	r29, 0xFF	; 255
    13b4:	87 70       	andi	r24, 0x07	; 7
    13b6:	99 27       	eor	r25, r25
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	99 83       	std	Y+1, r25	; 0x01
    13bc:	88 83       	st	Y, r24
    13be:	08 c0       	rjmp	.+16     	; 0x13d0 <nwkTxFrame+0x96>
    13c0:	81 e6       	ldi	r24, 0x61	; 97
    13c2:	98 e8       	ldi	r25, 0x88	; 136
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	cc 57       	subi	r28, 0x7C	; 124
    13ca:	df 4f       	sbci	r29, 0xFF	; 255
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	18 82       	st	Y, r1
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <nwkTxBroadcastFrame>:
    13d6:	0f 93       	push	r16
    13d8:	1f 93       	push	r17
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	8c 01       	movw	r16, r24
    13e0:	58 da       	rcall	.-2896   	; 0x892 <nwkFrameAlloc>
    13e2:	ec 01       	movw	r28, r24
    13e4:	89 2b       	or	r24, r25
    13e6:	a9 f1       	breq	.+106    	; 0x1452 <nwkTxBroadcastFrame+0x7c>
    13e8:	82 e1       	ldi	r24, 0x12	; 18
    13ea:	88 83       	st	Y, r24
    13ec:	f8 01       	movw	r30, r16
    13ee:	81 81       	ldd	r24, Z+1	; 0x01
    13f0:	89 83       	std	Y+1, r24	; 0x01
    13f2:	fe 01       	movw	r30, r28
    13f4:	ed 57       	subi	r30, 0x7D	; 125
    13f6:	ff 4f       	sbci	r31, 0xFF	; 255
    13f8:	10 82       	st	Z, r1
    13fa:	02 d4       	rcall	.+2052   	; 0x1c00 <rand>
    13fc:	fe 01       	movw	r30, r28
    13fe:	ec 57       	subi	r30, 0x7C	; 124
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	87 70       	andi	r24, 0x07	; 7
    1404:	99 27       	eor	r25, r25
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24
    140c:	33 96       	adiw	r30, 0x03	; 3
    140e:	11 82       	std	Z+1, r1	; 0x01
    1410:	10 82       	st	Z, r1
    1412:	f8 01       	movw	r30, r16
    1414:	41 81       	ldd	r20, Z+1	; 0x01
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	b8 01       	movw	r22, r16
    141a:	6e 5f       	subi	r22, 0xFE	; 254
    141c:	7f 4f       	sbci	r23, 0xFF	; 255
    141e:	ce 01       	movw	r24, r28
    1420:	02 96       	adiw	r24, 0x02	; 2
    1422:	fc d3       	rcall	.+2040   	; 0x1c1c <memcpy>
    1424:	81 e4       	ldi	r24, 0x41	; 65
    1426:	98 e8       	ldi	r25, 0x88	; 136
    1428:	9b 83       	std	Y+3, r25	; 0x03
    142a:	8a 83       	std	Y+2, r24	; 0x02
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	98 87       	std	Y+8, r25	; 0x08
    1432:	8f 83       	std	Y+7, r24	; 0x07
    1434:	f8 01       	movw	r30, r16
    1436:	85 81       	ldd	r24, Z+5	; 0x05
    1438:	96 81       	ldd	r25, Z+6	; 0x06
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	e4 ee       	ldi	r30, 0xE4	; 228
    1440:	f9 e0       	ldi	r31, 0x09	; 9
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	9a 87       	std	Y+10, r25	; 0x0a
    1448:	89 87       	std	Y+9, r24	; 0x09
    144a:	85 81       	ldd	r24, Z+5	; 0x05
    144c:	8f 5f       	subi	r24, 0xFF	; 255
    144e:	85 83       	std	Z+5, r24	; 0x05
    1450:	8c 83       	std	Y+4, r24	; 0x04
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	1f 91       	pop	r17
    1458:	0f 91       	pop	r16
    145a:	08 95       	ret

0000145c <nwkTxAckReceived>:
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	fc 01       	movw	r30, r24
    1462:	c7 81       	ldd	r28, Z+7	; 0x07
    1464:	d0 85       	ldd	r29, Z+8	; 0x08
    1466:	81 85       	ldd	r24, Z+9	; 0x09
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	c1 f4       	brne	.+48     	; 0x149c <nwkTxAckReceived+0x40>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	10 c0       	rjmp	.+32     	; 0x1492 <nwkTxAckReceived+0x36>
    1472:	fc 01       	movw	r30, r24
    1474:	20 81       	ld	r18, Z
    1476:	26 31       	cpi	r18, 0x16	; 22
    1478:	61 f4       	brne	.+24     	; 0x1492 <nwkTxAckReceived+0x36>
    147a:	34 85       	ldd	r19, Z+12	; 0x0c
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	32 13       	cpse	r19, r18
    1480:	08 c0       	rjmp	.+16     	; 0x1492 <nwkTxAckReceived+0x36>
    1482:	27 e1       	ldi	r18, 0x17	; 23
    1484:	20 83       	st	Z, r18
    1486:	2a 81       	ldd	r18, Y+2	; 0x02
    1488:	ea 57       	subi	r30, 0x7A	; 122
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	20 83       	st	Z, r18
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	06 c0       	rjmp	.+12     	; 0x149e <nwkTxAckReceived+0x42>
    1492:	3f da       	rcall	.-2946   	; 0x912 <nwkFrameNext>
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <nwkTxAckReceived+0x16>
    1498:	80 e0       	ldi	r24, 0x00	; 0
    149a:	01 c0       	rjmp	.+2      	; 0x149e <nwkTxAckReceived+0x42>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	08 95       	ret

000014a4 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14a4:	e0 91 5b 09 	lds	r30, 0x095B	; 0x80095b <nwkTxPhyActiveFrame>
    14a8:	f0 91 5c 09 	lds	r31, 0x095C	; 0x80095c <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	21 f0       	breq	.+8      	; 0x14b8 <PHY_DataConf+0x14>
    14b0:	48 f0       	brcs	.+18     	; 0x14c4 <PHY_DataConf+0x20>
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	19 f0       	breq	.+6      	; 0x14bc <PHY_DataConf+0x18>
    14b6:	04 c0       	rjmp	.+8      	; 0x14c0 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    14b8:	80 e2       	ldi	r24, 0x20	; 32
    14ba:	05 c0       	rjmp	.+10     	; 0x14c6 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    14bc:	81 e2       	ldi	r24, 0x21	; 33
    14be:	03 c0       	rjmp	.+6      	; 0x14c6 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    14c4:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    14c6:	df 01       	movw	r26, r30
    14c8:	ad 57       	subi	r26, 0x7D	; 125
    14ca:	bf 4f       	sbci	r27, 0xFF	; 255
    14cc:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    14ce:	85 e1       	ldi	r24, 0x15	; 21
    14d0:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    14d2:	10 92 5c 09 	sts	0x095C, r1	; 0x80095c <nwkTxPhyActiveFrame+0x1>
    14d6:	10 92 5b 09 	sts	0x095B, r1	; 0x80095b <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    14da:	e4 ee       	ldi	r30, 0xE4	; 228
    14dc:	f9 e0       	ldi	r31, 0x09	; 9
    14de:	86 a1       	ldd	r24, Z+38	; 0x26
    14e0:	97 a1       	ldd	r25, Z+39	; 0x27
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	97 a3       	std	Z+39, r25	; 0x27
    14e6:	86 a3       	std	Z+38, r24	; 0x26
    14e8:	08 95       	ret

000014ea <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    14ea:	9f 92       	push	r9
    14ec:	af 92       	push	r10
    14ee:	bf 92       	push	r11
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1500:	c0 e0       	ldi	r28, 0x00	; 0
    1502:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1504:	0f 2e       	mov	r0, r31
    1506:	f4 e1       	ldi	r31, 0x14	; 20
    1508:	af 2e       	mov	r10, r31
    150a:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    150c:	04 ee       	ldi	r16, 0xE4	; 228
    150e:	19 e0       	ldi	r17, 0x09	; 9
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1510:	0f 2e       	mov	r0, r31
    1512:	f7 e1       	ldi	r31, 0x17	; 23
    1514:	df 2e       	mov	r13, r31
    1516:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1518:	0f 2e       	mov	r0, r31
    151a:	f6 e1       	ldi	r31, 0x16	; 22
    151c:	9f 2e       	mov	r9, r31
    151e:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1520:	0f 2e       	mov	r0, r31
    1522:	f5 e1       	ldi	r31, 0x15	; 21
    1524:	ef 2e       	mov	r14, r31
    1526:	f1 2c       	mov	r15, r1
    1528:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    152a:	0f 2e       	mov	r0, r31
    152c:	f3 e1       	ldi	r31, 0x13	; 19
    152e:	cf 2e       	mov	r12, r31
    1530:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1532:	0f 2e       	mov	r0, r31
    1534:	f1 e1       	ldi	r31, 0x11	; 17
    1536:	bf 2e       	mov	r11, r31
    1538:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    153a:	60 c0       	rjmp	.+192    	; 0x15fc <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    153c:	88 81       	ld	r24, Y
    153e:	83 31       	cpi	r24, 0x13	; 19
    1540:	c1 f0       	breq	.+48     	; 0x1572 <nwkTxTaskHandler+0x88>
    1542:	18 f4       	brcc	.+6      	; 0x154a <nwkTxTaskHandler+0x60>
    1544:	82 31       	cpi	r24, 0x12	; 18
    1546:	39 f0       	breq	.+14     	; 0x1556 <nwkTxTaskHandler+0x6c>
    1548:	59 c0       	rjmp	.+178    	; 0x15fc <nwkTxTaskHandler+0x112>
    154a:	85 31       	cpi	r24, 0x15	; 21
    154c:	49 f1       	breq	.+82     	; 0x15a0 <nwkTxTaskHandler+0xb6>
    154e:	87 31       	cpi	r24, 0x17	; 23
    1550:	09 f4       	brne	.+2      	; 0x1554 <nwkTxTaskHandler+0x6a>
    1552:	45 c0       	rjmp	.+138    	; 0x15de <nwkTxTaskHandler+0xf4>
    1554:	53 c0       	rjmp	.+166    	; 0x15fc <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1556:	fe 01       	movw	r30, r28
    1558:	ec 57       	subi	r30, 0x7C	; 124
    155a:	ff 4f       	sbci	r31, 0xFF	; 255
    155c:	80 81       	ld	r24, Z
    155e:	91 81       	ldd	r25, Z+1	; 0x01
    1560:	89 2b       	or	r24, r25
    1562:	29 f0       	breq	.+10     	; 0x156e <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1564:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1566:	81 e4       	ldi	r24, 0x41	; 65
    1568:	99 e0       	ldi	r25, 0x09	; 9
    156a:	4f d2       	rcall	.+1182   	; 0x1a0a <SYS_TimerStart>
    156c:	47 c0       	rjmp	.+142    	; 0x15fc <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    156e:	c8 82       	st	Y, r12
    1570:	45 c0       	rjmp	.+138    	; 0x15fc <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1572:	80 91 5b 09 	lds	r24, 0x095B	; 0x80095b <nwkTxPhyActiveFrame>
    1576:	90 91 5c 09 	lds	r25, 0x095C	; 0x80095c <nwkTxPhyActiveFrame+0x1>
    157a:	89 2b       	or	r24, r25
    157c:	09 f0       	breq	.+2      	; 0x1580 <nwkTxTaskHandler+0x96>
    157e:	3e c0       	rjmp	.+124    	; 0x15fc <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    1580:	d0 93 5c 09 	sts	0x095C, r29	; 0x80095c <nwkTxPhyActiveFrame+0x1>
    1584:	c0 93 5b 09 	sts	0x095B, r28	; 0x80095b <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1588:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    158a:	69 81       	ldd	r22, Y+1	; 0x01
    158c:	ce 01       	movw	r24, r28
    158e:	02 96       	adiw	r24, 0x02	; 2
    1590:	cb d0       	rcall	.+406    	; 0x1728 <PHY_DataReq>
          nwkIb.lock++;
    1592:	f8 01       	movw	r30, r16
    1594:	86 a1       	ldd	r24, Z+38	; 0x26
    1596:	97 a1       	ldd	r25, Z+39	; 0x27
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	97 a3       	std	Z+39, r25	; 0x27
    159c:	86 a3       	std	Z+38, r24	; 0x26
    159e:	2e c0       	rjmp	.+92     	; 0x15fc <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    15a0:	fe 01       	movw	r30, r28
    15a2:	ed 57       	subi	r30, 0x7D	; 125
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	80 81       	ld	r24, Z
    15a8:	81 11       	cpse	r24, r1
    15aa:	17 c0       	rjmp	.+46     	; 0x15da <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    15ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    15ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    15b0:	f8 01       	movw	r30, r16
    15b2:	80 81       	ld	r24, Z
    15b4:	91 81       	ldd	r25, Z+1	; 0x01
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	69 f4       	brne	.+26     	; 0x15d6 <nwkTxTaskHandler+0xec>
    15bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    15be:	80 ff       	sbrs	r24, 0
    15c0:	0a c0       	rjmp	.+20     	; 0x15d6 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    15c2:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    15c4:	fe 01       	movw	r30, r28
    15c6:	ec 57       	subi	r30, 0x7C	; 124
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	f1 82       	std	Z+1, r15	; 0x01
    15cc:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    15ce:	8e e4       	ldi	r24, 0x4E	; 78
    15d0:	99 e0       	ldi	r25, 0x09	; 9
    15d2:	1b d2       	rcall	.+1078   	; 0x1a0a <SYS_TimerStart>
    15d4:	13 c0       	rjmp	.+38     	; 0x15fc <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    15d6:	d8 82       	st	Y, r13
    15d8:	11 c0       	rjmp	.+34     	; 0x15fc <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    15da:	d8 82       	st	Y, r13
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    15de:	ce 01       	movw	r24, r28
    15e0:	b0 da       	rcall	.-2720   	; 0xb42 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    15e2:	fe 01       	movw	r30, r28
    15e4:	e9 57       	subi	r30, 0x79	; 121
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	01 90       	ld	r0, Z+
    15ea:	f0 81       	ld	r31, Z
    15ec:	e0 2d       	mov	r30, r0
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    15f2:	ce 01       	movw	r24, r28
    15f4:	84 d9       	rcall	.-3320   	; 0x8fe <nwkFrameFree>
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    15f8:	ce 01       	movw	r24, r28
    15fa:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    15fc:	ce 01       	movw	r24, r28
    15fe:	89 d9       	rcall	.-3310   	; 0x912 <nwkFrameNext>
    1600:	ec 01       	movw	r28, r24
    1602:	89 2b       	or	r24, r25
    1604:	09 f0       	breq	.+2      	; 0x1608 <nwkTxTaskHandler+0x11e>
    1606:	9a cf       	rjmp	.-204    	; 0x153c <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	9f 90       	pop	r9
    161e:	08 95       	ret

00001620 <phySetChannel>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1620:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <phyBand>
    1624:	98 2f       	mov	r25, r24
    1626:	9f 70       	andi	r25, 0x0F	; 15
    1628:	e4 e5       	ldi	r30, 0x54	; 84
    162a:	f1 e0       	ldi	r31, 0x01	; 1
    162c:	80 81       	ld	r24, Z
    162e:	80 7f       	andi	r24, 0xF0	; 240
    1630:	89 2b       	or	r24, r25
    1632:	80 83       	st	Z, r24
    1634:	80 91 5d 09 	lds	r24, 0x095D	; 0x80095d <phyBand>
    1638:	88 23       	and	r24, r24
    163a:	29 f0       	breq	.+10     	; 0x1646 <phySetChannel+0x26>
    163c:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <phyChannel>
    1640:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
    1644:	08 95       	ret
    1646:	80 91 5e 09 	lds	r24, 0x095E	; 0x80095e <phyChannel>
    164a:	98 2f       	mov	r25, r24
    164c:	9f 71       	andi	r25, 0x1F	; 31
    164e:	e8 e4       	ldi	r30, 0x48	; 72
    1650:	f1 e0       	ldi	r31, 0x01	; 1
    1652:	80 81       	ld	r24, Z
    1654:	80 7e       	andi	r24, 0xE0	; 224
    1656:	89 2b       	or	r24, r25
    1658:	80 83       	st	Z, r24
    165a:	08 95       	ret

0000165c <phyTrxSetState>:
    165c:	93 e0       	ldi	r25, 0x03	; 3
    165e:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1662:	e1 e4       	ldi	r30, 0x41	; 65
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	90 81       	ld	r25, Z
    1668:	9f 71       	andi	r25, 0x1F	; 31
    166a:	98 30       	cpi	r25, 0x08	; 8
    166c:	e1 f7       	brne	.-8      	; 0x1666 <phyTrxSetState+0xa>
    166e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1672:	e1 e4       	ldi	r30, 0x41	; 65
    1674:	f1 e0       	ldi	r31, 0x01	; 1
    1676:	90 81       	ld	r25, Z
    1678:	9f 71       	andi	r25, 0x1F	; 31
    167a:	98 13       	cpse	r25, r24
    167c:	fc cf       	rjmp	.-8      	; 0x1676 <phyTrxSetState+0x1a>
    167e:	08 95       	ret

00001680 <phySetRxState>:
    1680:	88 e0       	ldi	r24, 0x08	; 8
    1682:	ec df       	rcall	.-40     	; 0x165c <phyTrxSetState>
    1684:	8f ef       	ldi	r24, 0xFF	; 255
    1686:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    168a:	80 91 5f 09 	lds	r24, 0x095F	; 0x80095f <phyRxState>
    168e:	88 23       	and	r24, r24
    1690:	11 f0       	breq	.+4      	; 0x1696 <phySetRxState+0x16>
    1692:	86 e1       	ldi	r24, 0x16	; 22
    1694:	e3 cf       	rjmp	.-58     	; 0x165c <phyTrxSetState>
    1696:	08 95       	ret

00001698 <PHY_Init>:
    1698:	e9 e3       	ldi	r30, 0x39	; 57
    169a:	f1 e0       	ldi	r31, 0x01	; 1
    169c:	80 81       	ld	r24, Z
    169e:	81 60       	ori	r24, 0x01	; 1
    16a0:	80 83       	st	Z, r24
    16a2:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <phyRxState>
    16a6:	10 92 5d 09 	sts	0x095D, r1	; 0x80095d <phyBand>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <phyState>
    16b0:	88 e0       	ldi	r24, 0x08	; 8
    16b2:	d4 df       	rcall	.-88     	; 0x165c <phyTrxSetState>
    16b4:	8b ee       	ldi	r24, 0xEB	; 235
    16b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    16ba:	ec e4       	ldi	r30, 0x4C	; 76
    16bc:	f1 e0       	ldi	r31, 0x01	; 1
    16be:	80 81       	ld	r24, Z
    16c0:	80 68       	ori	r24, 0x80	; 128
    16c2:	80 83       	st	Z, r24
    16c4:	08 95       	ret

000016c6 <PHY_SetRxState>:
    16c6:	80 93 5f 09 	sts	0x095F, r24	; 0x80095f <phyRxState>
    16ca:	da cf       	rjmp	.-76     	; 0x1680 <phySetRxState>
    16cc:	08 95       	ret

000016ce <PHY_SetChannel>:
    16ce:	80 93 5e 09 	sts	0x095E, r24	; 0x80095e <phyChannel>
    16d2:	a6 cf       	rjmp	.-180    	; 0x1620 <phySetChannel>
    16d4:	08 95       	ret

000016d6 <PHY_SetPanId>:
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	1f 92       	push	r1
    16dc:	1f 92       	push	r1
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
    16e2:	9a 83       	std	Y+2, r25	; 0x02
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <__TEXT_REGION_LENGTH__+0x700162>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <__TEXT_REGION_LENGTH__+0x700163>
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <PHY_SetShortAddr>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	1f 92       	push	r1
    1700:	1f 92       	push	r1
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	9a 83       	std	Y+2, r25	; 0x02
    1708:	89 83       	std	Y+1, r24	; 0x01
    170a:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__TEXT_REGION_LENGTH__+0x700160>
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	80 93 61 01 	sts	0x0161, r24	; 0x800161 <__TEXT_REGION_LENGTH__+0x700161>
    1714:	9a 81       	ldd	r25, Y+2	; 0x02
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	89 0f       	add	r24, r25
    171a:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <__TEXT_REGION_LENGTH__+0x70016d>
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	8c 01       	movw	r16, r24
    1730:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1732:	89 e1       	ldi	r24, 0x19	; 25
    1734:	93 df       	rcall	.-218    	; 0x165c <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1736:	8f ef       	ldi	r24, 0xFF	; 255
    1738:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	8c 0f       	add	r24, r28
    1740:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    1744:	cc 23       	and	r28, r28
    1746:	81 f0       	breq	.+32     	; 0x1768 <PHY_DataReq+0x40>
    1748:	f8 01       	movw	r30, r16
    174a:	c1 50       	subi	r28, 0x01	; 1
    174c:	2c 2f       	mov	r18, r28
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	2f 5f       	subi	r18, 0xFF	; 255
    1752:	3f 4f       	sbci	r19, 0xFF	; 255
    1754:	c8 01       	movw	r24, r16
    1756:	82 0f       	add	r24, r18
    1758:	93 1f       	adc	r25, r19
    175a:	a1 e8       	ldi	r26, 0x81	; 129
    175c:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    175e:	21 91       	ld	r18, Z+
    1760:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1762:	e8 17       	cp	r30, r24
    1764:	f9 07       	cpc	r31, r25
    1766:	d9 f7       	brne	.-10     	; 0x175e <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1768:	83 e0       	ldi	r24, 0x03	; 3
    176a:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    176e:	82 e0       	ldi	r24, 0x02	; 2
    1770:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	00 d0       	rcall	.+0      	; 0x1784 <PHY_TaskHandler+0x8>
    1784:	1f 92       	push	r1
    1786:	1f 92       	push	r1
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    178c:	80 91 e0 09 	lds	r24, 0x09E0	; 0x8009e0 <phyState>
    1790:	82 30       	cpi	r24, 0x02	; 2
    1792:	09 f4       	brne	.+2      	; 0x1796 <PHY_TaskHandler+0x1a>
    1794:	65 c0       	rjmp	.+202    	; 0x1860 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1796:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    179a:	83 ff       	sbrs	r24, 3
    179c:	3e c0       	rjmp	.+124    	; 0x181a <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    179e:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17a2:	6a 2f       	mov	r22, r26
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	ab 01       	movw	r20, r22
    17a8:	4f 5f       	subi	r20, 0xFF	; 255
    17aa:	5f 4f       	sbci	r21, 0xFF	; 255
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    17b2:	fc 01       	movw	r30, r24
    17b4:	e0 58       	subi	r30, 0x80	; 128
    17b6:	fe 4f       	sbci	r31, 0xFE	; 254
    17b8:	30 81       	ld	r19, Z
    17ba:	fc 01       	movw	r30, r24
    17bc:	e0 5a       	subi	r30, 0xA0	; 160
    17be:	f6 4f       	sbci	r31, 0xF6	; 246
    17c0:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	82 2f       	mov	r24, r18
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	84 17       	cp	r24, r20
    17ca:	95 07       	cpc	r25, r21
    17cc:	94 f3       	brlt	.-28     	; 0x17b2 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    17ce:	80 e6       	ldi	r24, 0x60	; 96
    17d0:	99 e0       	ldi	r25, 0x09	; 9
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    17d6:	a2 50       	subi	r26, 0x02	; 2
    17d8:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    17da:	fb 01       	movw	r30, r22
    17dc:	e0 5a       	subi	r30, 0xA0	; 160
    17de:	f6 4f       	sbci	r31, 0xF6	; 246
    17e0:	80 81       	ld	r24, Z
    17e2:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    17e4:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    17e8:	8a 55       	subi	r24, 0x5A	; 90
    17ea:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    17ec:	ce 01       	movw	r24, r28
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	b6 da       	rcall	.-2708   	; 0xd5e <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    17f2:	e1 e4       	ldi	r30, 0x41	; 65
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	80 81       	ld	r24, Z
    17f8:	8f 71       	andi	r24, 0x1F	; 31
    17fa:	86 31       	cpi	r24, 0x16	; 22
    17fc:	e1 f7       	brne	.-8      	; 0x17f6 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    17fe:	ef e4       	ldi	r30, 0x4F	; 79
    1800:	f1 e0       	ldi	r31, 0x01	; 1
    1802:	80 81       	ld	r24, Z
    1804:	88 60       	ori	r24, 0x08	; 8
    1806:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1808:	ec e4       	ldi	r30, 0x4C	; 76
    180a:	f1 e0       	ldi	r31, 0x01	; 1
    180c:	80 81       	ld	r24, Z
    180e:	8f 77       	andi	r24, 0x7F	; 127
    1810:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1812:	80 81       	ld	r24, Z
    1814:	80 68       	ori	r24, 0x80	; 128
    1816:	80 83       	st	Z, r24
    1818:	23 c0       	rjmp	.+70     	; 0x1860 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    181a:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    181e:	86 ff       	sbrs	r24, 6
    1820:	1f c0       	rjmp	.+62     	; 0x1860 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1822:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    1826:	8f 71       	andi	r24, 0x1F	; 31
    1828:	89 31       	cpi	r24, 0x19	; 25
    182a:	a9 f4       	brne	.+42     	; 0x1856 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    182c:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1830:	12 95       	swap	r17
    1832:	16 95       	lsr	r17
    1834:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1836:	49 f0       	breq	.+18     	; 0x184a <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1838:	13 30       	cpi	r17, 0x03	; 3
    183a:	21 f0       	breq	.+8      	; 0x1844 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    183c:	15 30       	cpi	r17, 0x05	; 5
    183e:	21 f0       	breq	.+8      	; 0x1848 <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1840:	13 e0       	ldi	r17, 0x03	; 3
    1842:	03 c0       	rjmp	.+6      	; 0x184a <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1844:	11 e0       	ldi	r17, 0x01	; 1
    1846:	01 c0       	rjmp	.+2      	; 0x184a <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    1848:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    184a:	1a df       	rcall	.-460    	; 0x1680 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 93 e0 09 	sts	0x09E0, r24	; 0x8009e0 <phyState>

      PHY_DataConf(status);
    1852:	81 2f       	mov	r24, r17
    1854:	27 de       	rcall	.-946    	; 0x14a4 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1856:	ef e4       	ldi	r30, 0x4F	; 79
    1858:	f1 e0       	ldi	r31, 0x01	; 1
    185a:	80 81       	ld	r24, Z
    185c:	80 64       	ori	r24, 0x40	; 64
    185e:	80 83       	st	Z, r24
  }
}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	df 91       	pop	r29
    186c:	cf 91       	pop	r28
    186e:	1f 91       	pop	r17
    1870:	08 95       	ret

00001872 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1872:	0e 94 bb 00 	call	0x176	; 0x176 <HAL_Init>
  SYS_TimerInit();
    1876:	6d d0       	rcall	.+218    	; 0x1952 <SYS_TimerInit>
  PHY_Init();
    1878:	0f df       	rcall	.-482    	; 0x1698 <PHY_Init>
  NWK_Init();
    187a:	0c 94 21 03 	jmp	0x642	; 0x642 <NWK_Init>
    187e:	08 95       	ret

00001880 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1880:	7d df       	rcall	.-262    	; 0x177c <PHY_TaskHandler>
  NWK_TaskHandler();
    1882:	0e 94 4f 03 	call	0x69e	; 0x69e <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1886:	cc c0       	rjmp	.+408    	; 0x1a20 <SYS_TimerTaskHandler>
    1888:	08 95       	ret

0000188a <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    188a:	0f 93       	push	r16
    188c:	1f 93       	push	r17
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ec 01       	movw	r28, r24
  if (timers)
    1894:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <timers>
    1898:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <timers+0x1>
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	09 f4       	brne	.+2      	; 0x18a2 <placeTimer+0x18>
    18a0:	45 c0       	rjmp	.+138    	; 0x192c <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    18a2:	4e 81       	ldd	r20, Y+6	; 0x06
    18a4:	5f 81       	ldd	r21, Y+7	; 0x07
    18a6:	68 85       	ldd	r22, Y+8	; 0x08
    18a8:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    18aa:	fc 01       	movw	r30, r24
    18ac:	02 81       	ldd	r16, Z+2	; 0x02
    18ae:	13 81       	ldd	r17, Z+3	; 0x03
    18b0:	24 81       	ldd	r18, Z+4	; 0x04
    18b2:	35 81       	ldd	r19, Z+5	; 0x05
    18b4:	40 17       	cp	r20, r16
    18b6:	51 07       	cpc	r21, r17
    18b8:	62 07       	cpc	r22, r18
    18ba:	73 07       	cpc	r23, r19
    18bc:	60 f0       	brcs	.+24     	; 0x18d6 <placeTimer+0x4c>
    18be:	dc 01       	movw	r26, r24
    18c0:	17 c0       	rjmp	.+46     	; 0x18f0 <placeTimer+0x66>
    18c2:	02 81       	ldd	r16, Z+2	; 0x02
    18c4:	13 81       	ldd	r17, Z+3	; 0x03
    18c6:	24 81       	ldd	r18, Z+4	; 0x04
    18c8:	35 81       	ldd	r19, Z+5	; 0x05
    18ca:	40 17       	cp	r20, r16
    18cc:	51 07       	cpc	r21, r17
    18ce:	62 07       	cpc	r22, r18
    18d0:	73 07       	cpc	r23, r19
    18d2:	68 f4       	brcc	.+26     	; 0x18ee <placeTimer+0x64>
    18d4:	03 c0       	rjmp	.+6      	; 0x18dc <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18d6:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    18d8:	a0 e0       	ldi	r26, 0x00	; 0
    18da:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    18dc:	04 1b       	sub	r16, r20
    18de:	15 0b       	sbc	r17, r21
    18e0:	26 0b       	sbc	r18, r22
    18e2:	37 0b       	sbc	r19, r23
    18e4:	02 83       	std	Z+2, r16	; 0x02
    18e6:	13 83       	std	Z+3, r17	; 0x03
    18e8:	24 83       	std	Z+4, r18	; 0x04
    18ea:	35 83       	std	Z+5, r19	; 0x05
         break;
    18ec:	0a c0       	rjmp	.+20     	; 0x1902 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18ee:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    18f0:	40 1b       	sub	r20, r16
    18f2:	51 0b       	sbc	r21, r17
    18f4:	62 0b       	sbc	r22, r18
    18f6:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18f8:	ed 91       	ld	r30, X+
    18fa:	fc 91       	ld	r31, X
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	30 97       	sbiw	r30, 0x00	; 0
    1900:	01 f7       	brne	.-64     	; 0x18c2 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1902:	4a 83       	std	Y+2, r20	; 0x02
    1904:	5b 83       	std	Y+3, r21	; 0x03
    1906:	6c 83       	std	Y+4, r22	; 0x04
    1908:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    190a:	10 97       	sbiw	r26, 0x00	; 0
    190c:	41 f0       	breq	.+16     	; 0x191e <placeTimer+0x94>
    {
      timer->next = prev->next;
    190e:	8d 91       	ld	r24, X+
    1910:	9c 91       	ld	r25, X
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	99 83       	std	Y+1, r25	; 0x01
    1916:	88 83       	st	Y, r24
      prev->next = timer;
    1918:	cd 93       	st	X+, r28
    191a:	dc 93       	st	X, r29
    191c:	15 c0       	rjmp	.+42     	; 0x1948 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    191e:	99 83       	std	Y+1, r25	; 0x01
    1920:	88 83       	st	Y, r24
      timers = timer;
    1922:	d0 93 e2 09 	sts	0x09E2, r29	; 0x8009e2 <timers+0x1>
    1926:	c0 93 e1 09 	sts	0x09E1, r28	; 0x8009e1 <timers>
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    192c:	19 82       	std	Y+1, r1	; 0x01
    192e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	a8 85       	ldd	r26, Y+8	; 0x08
    1936:	b9 85       	ldd	r27, Y+9	; 0x09
    1938:	8a 83       	std	Y+2, r24	; 0x02
    193a:	9b 83       	std	Y+3, r25	; 0x03
    193c:	ac 83       	std	Y+4, r26	; 0x04
    193e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1940:	d0 93 e2 09 	sts	0x09E2, r29	; 0x8009e2 <timers+0x1>
    1944:	c0 93 e1 09 	sts	0x09E1, r28	; 0x8009e1 <timers>
  }
}
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	08 95       	ret

00001952 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1952:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <timers+0x1>
    1956:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <timers>
    195a:	08 95       	ret

0000195c <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1960:	a0 91 e1 09 	lds	r26, 0x09E1	; 0x8009e1 <timers>
    1964:	b0 91 e2 09 	lds	r27, 0x09E2	; 0x8009e2 <timers+0x1>
    1968:	10 97       	sbiw	r26, 0x00	; 0
    196a:	91 f1       	breq	.+100    	; 0x19d0 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    196c:	a8 17       	cp	r26, r24
    196e:	b9 07       	cpc	r27, r25
    1970:	51 f5       	brne	.+84     	; 0x19c6 <SYS_TimerStop+0x6a>
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <SYS_TimerStop+0x2c>
    1974:	8e 17       	cp	r24, r30
    1976:	9f 07       	cpc	r25, r31
    1978:	29 f5       	brne	.+74     	; 0x19c4 <SYS_TimerStop+0x68>
    {
      if (prev)
    197a:	10 97       	sbiw	r26, 0x00	; 0
    197c:	31 f0       	breq	.+12     	; 0x198a <SYS_TimerStop+0x2e>
        prev->next = t->next;
    197e:	20 81       	ld	r18, Z
    1980:	31 81       	ldd	r19, Z+1	; 0x01
    1982:	2d 93       	st	X+, r18
    1984:	3c 93       	st	X, r19
    1986:	07 c0       	rjmp	.+14     	; 0x1996 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1988:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    198a:	20 81       	ld	r18, Z
    198c:	31 81       	ldd	r19, Z+1	; 0x01
    198e:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <timers+0x1>
    1992:	20 93 e1 09 	sts	0x09E1, r18	; 0x8009e1 <timers>

      if (t->next)
    1996:	01 90       	ld	r0, Z+
    1998:	f0 81       	ld	r31, Z
    199a:	e0 2d       	mov	r30, r0
    199c:	30 97       	sbiw	r30, 0x00	; 0
    199e:	c1 f0       	breq	.+48     	; 0x19d0 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    19a0:	42 81       	ldd	r20, Z+2	; 0x02
    19a2:	53 81       	ldd	r21, Z+3	; 0x03
    19a4:	64 81       	ldd	r22, Z+4	; 0x04
    19a6:	75 81       	ldd	r23, Z+5	; 0x05
    19a8:	ec 01       	movw	r28, r24
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	ac 81       	ldd	r26, Y+4	; 0x04
    19b0:	bd 81       	ldd	r27, Y+5	; 0x05
    19b2:	84 0f       	add	r24, r20
    19b4:	95 1f       	adc	r25, r21
    19b6:	a6 1f       	adc	r26, r22
    19b8:	b7 1f       	adc	r27, r23
    19ba:	82 83       	std	Z+2, r24	; 0x02
    19bc:	93 83       	std	Z+3, r25	; 0x03
    19be:	a4 83       	std	Z+4, r26	; 0x04
    19c0:	b5 83       	std	Z+5, r27	; 0x05
    19c2:	06 c0       	rjmp	.+12     	; 0x19d0 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    19c4:	df 01       	movw	r26, r30
    19c6:	ed 91       	ld	r30, X+
    19c8:	fc 91       	ld	r31, X
    19ca:	11 97       	sbiw	r26, 0x01	; 1
    19cc:	30 97       	sbiw	r30, 0x00	; 0
    19ce:	91 f6       	brne	.-92     	; 0x1974 <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19d6:	e0 91 e1 09 	lds	r30, 0x09E1	; 0x8009e1 <timers>
    19da:	f0 91 e2 09 	lds	r31, 0x09E2	; 0x8009e2 <timers+0x1>
    19de:	30 97       	sbiw	r30, 0x00	; 0
    19e0:	71 f0       	breq	.+28     	; 0x19fe <SYS_TimerStarted+0x28>
    if (t == timer)
    19e2:	e8 17       	cp	r30, r24
    19e4:	f9 07       	cpc	r31, r25
    19e6:	21 f4       	brne	.+8      	; 0x19f0 <SYS_TimerStarted+0x1a>
    19e8:	0c c0       	rjmp	.+24     	; 0x1a02 <SYS_TimerStarted+0x2c>
    19ea:	8e 17       	cp	r24, r30
    19ec:	9f 07       	cpc	r25, r31
    19ee:	59 f0       	breq	.+22     	; 0x1a06 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19f0:	01 90       	ld	r0, Z+
    19f2:	f0 81       	ld	r31, Z
    19f4:	e0 2d       	mov	r30, r0
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	c1 f7       	brne	.-16     	; 0x19ea <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	08 95       	ret
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	08 95       	ret
    1a06:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1a08:	08 95       	ret

00001a0a <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1a10:	e2 df       	rcall	.-60     	; 0x19d6 <SYS_TimerStarted>
    1a12:	81 11       	cpse	r24, r1
    1a14:	02 c0       	rjmp	.+4      	; 0x1a1a <SYS_TimerStart+0x10>
    placeTimer(timer);
    1a16:	ce 01       	movw	r24, r28
    1a18:	38 df       	rcall	.-400    	; 0x188a <placeTimer>
}
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret

00001a20 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1a20:	cf 92       	push	r12
    1a22:	df 92       	push	r13
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	cf 93       	push	r28
    1a2a:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1a2c:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <halTimerIrqCount>
    1a30:	88 23       	and	r24, r24
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <SYS_TimerTaskHandler+0x16>
    1a34:	59 c0       	rjmp	.+178    	; 0x1ae8 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    1a36:	8f b7       	in	r24, 0x3f	; 63
    1a38:	f8 94       	cli
    cnt = halTimerIrqCount;
    1a3a:	c0 90 e3 09 	lds	r12, 0x09E3	; 0x8009e3 <halTimerIrqCount>
    halTimerIrqCount = 0;
    1a3e:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    1a42:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1a44:	d1 2c       	mov	r13, r1
    1a46:	e1 2c       	mov	r14, r1
    1a48:	f1 2c       	mov	r15, r1
    1a4a:	cc 0c       	add	r12, r12
    1a4c:	dd 1c       	adc	r13, r13
    1a4e:	ee 1c       	adc	r14, r14
    1a50:	ff 1c       	adc	r15, r15
    1a52:	d7 01       	movw	r26, r14
    1a54:	c6 01       	movw	r24, r12
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	aa 1f       	adc	r26, r26
    1a5c:	bb 1f       	adc	r27, r27
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	aa 1f       	adc	r26, r26
    1a64:	bb 1f       	adc	r27, r27
    1a66:	c8 0e       	add	r12, r24
    1a68:	d9 1e       	adc	r13, r25
    1a6a:	ea 1e       	adc	r14, r26
    1a6c:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1a6e:	c0 91 e1 09 	lds	r28, 0x09E1	; 0x8009e1 <timers>
    1a72:	d0 91 e2 09 	lds	r29, 0x09E2	; 0x8009e2 <timers+0x1>
    1a76:	20 97       	sbiw	r28, 0x00	; 0
    1a78:	b9 f1       	breq	.+110    	; 0x1ae8 <SYS_TimerTaskHandler+0xc8>
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7e:	ac 81       	ldd	r26, Y+4	; 0x04
    1a80:	bd 81       	ldd	r27, Y+5	; 0x05
    1a82:	c8 16       	cp	r12, r24
    1a84:	d9 06       	cpc	r13, r25
    1a86:	ea 06       	cpc	r14, r26
    1a88:	fb 06       	cpc	r15, r27
    1a8a:	10 f1       	brcs	.+68     	; 0x1ad0 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1a8c:	c8 1a       	sub	r12, r24
    1a8e:	d9 0a       	sbc	r13, r25
    1a90:	ea 0a       	sbc	r14, r26
    1a92:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1a94:	88 81       	ld	r24, Y
    1a96:	99 81       	ldd	r25, Y+1	; 0x01
    1a98:	90 93 e2 09 	sts	0x09E2, r25	; 0x8009e2 <timers+0x1>
    1a9c:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1aa0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	11 f4       	brne	.+4      	; 0x1aaa <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	f0 de       	rcall	.-544    	; 0x188a <placeTimer>
    timer->handler(timer);
    1aaa:	eb 85       	ldd	r30, Y+11	; 0x0b
    1aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    1aae:	ce 01       	movw	r24, r28
    1ab0:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1ab2:	c0 91 e1 09 	lds	r28, 0x09E1	; 0x8009e1 <timers>
    1ab6:	d0 91 e2 09 	lds	r29, 0x09E2	; 0x8009e2 <timers+0x1>
    1aba:	20 97       	sbiw	r28, 0x00	; 0
    1abc:	a9 f0       	breq	.+42     	; 0x1ae8 <SYS_TimerTaskHandler+0xc8>
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	ac 81       	ldd	r26, Y+4	; 0x04
    1ac4:	bd 81       	ldd	r27, Y+5	; 0x05
    1ac6:	c8 16       	cp	r12, r24
    1ac8:	d9 06       	cpc	r13, r25
    1aca:	ea 06       	cpc	r14, r26
    1acc:	fb 06       	cpc	r15, r27
    1ace:	f0 f6       	brcc	.-68     	; 0x1a8c <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	ac 81       	ldd	r26, Y+4	; 0x04
    1ad6:	bd 81       	ldd	r27, Y+5	; 0x05
    1ad8:	8c 19       	sub	r24, r12
    1ada:	9d 09       	sbc	r25, r13
    1adc:	ae 09       	sbc	r26, r14
    1ade:	bf 09       	sbc	r27, r15
    1ae0:	8a 83       	std	Y+2, r24	; 0x02
    1ae2:	9b 83       	std	Y+3, r25	; 0x03
    1ae4:	ac 83       	std	Y+4, r26	; 0x04
    1ae6:	bd 83       	std	Y+5, r27	; 0x05
}
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	ff 90       	pop	r15
    1aee:	ef 90       	pop	r14
    1af0:	df 90       	pop	r13
    1af2:	cf 90       	pop	r12
    1af4:	08 95       	ret

00001af6 <__udivmodsi4>:
    1af6:	a1 e2       	ldi	r26, 0x21	; 33
    1af8:	1a 2e       	mov	r1, r26
    1afa:	aa 1b       	sub	r26, r26
    1afc:	bb 1b       	sub	r27, r27
    1afe:	fd 01       	movw	r30, r26
    1b00:	0d c0       	rjmp	.+26     	; 0x1b1c <__udivmodsi4_ep>

00001b02 <__udivmodsi4_loop>:
    1b02:	aa 1f       	adc	r26, r26
    1b04:	bb 1f       	adc	r27, r27
    1b06:	ee 1f       	adc	r30, r30
    1b08:	ff 1f       	adc	r31, r31
    1b0a:	a2 17       	cp	r26, r18
    1b0c:	b3 07       	cpc	r27, r19
    1b0e:	e4 07       	cpc	r30, r20
    1b10:	f5 07       	cpc	r31, r21
    1b12:	20 f0       	brcs	.+8      	; 0x1b1c <__udivmodsi4_ep>
    1b14:	a2 1b       	sub	r26, r18
    1b16:	b3 0b       	sbc	r27, r19
    1b18:	e4 0b       	sbc	r30, r20
    1b1a:	f5 0b       	sbc	r31, r21

00001b1c <__udivmodsi4_ep>:
    1b1c:	66 1f       	adc	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	1a 94       	dec	r1
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <__udivmodsi4_loop>
    1b28:	60 95       	com	r22
    1b2a:	70 95       	com	r23
    1b2c:	80 95       	com	r24
    1b2e:	90 95       	com	r25
    1b30:	9b 01       	movw	r18, r22
    1b32:	ac 01       	movw	r20, r24
    1b34:	bd 01       	movw	r22, r26
    1b36:	cf 01       	movw	r24, r30
    1b38:	08 95       	ret

00001b3a <__divmodsi4>:
    1b3a:	05 2e       	mov	r0, r21
    1b3c:	97 fb       	bst	r25, 7
    1b3e:	16 f4       	brtc	.+4      	; 0x1b44 <__divmodsi4+0xa>
    1b40:	00 94       	com	r0
    1b42:	0f d0       	rcall	.+30     	; 0x1b62 <__negsi2>
    1b44:	57 fd       	sbrc	r21, 7
    1b46:	05 d0       	rcall	.+10     	; 0x1b52 <__divmodsi4_neg2>
    1b48:	d6 df       	rcall	.-84     	; 0x1af6 <__udivmodsi4>
    1b4a:	07 fc       	sbrc	r0, 7
    1b4c:	02 d0       	rcall	.+4      	; 0x1b52 <__divmodsi4_neg2>
    1b4e:	46 f4       	brtc	.+16     	; 0x1b60 <__divmodsi4_exit>
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <__negsi2>

00001b52 <__divmodsi4_neg2>:
    1b52:	50 95       	com	r21
    1b54:	40 95       	com	r20
    1b56:	30 95       	com	r19
    1b58:	21 95       	neg	r18
    1b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1b5e:	5f 4f       	sbci	r21, 0xFF	; 255

00001b60 <__divmodsi4_exit>:
    1b60:	08 95       	ret

00001b62 <__negsi2>:
    1b62:	90 95       	com	r25
    1b64:	80 95       	com	r24
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	08 95       	ret

00001b72 <do_rand>:
    1b72:	8f 92       	push	r8
    1b74:	9f 92       	push	r9
    1b76:	af 92       	push	r10
    1b78:	bf 92       	push	r11
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	cf 93       	push	r28
    1b84:	df 93       	push	r29
    1b86:	ec 01       	movw	r28, r24
    1b88:	68 81       	ld	r22, Y
    1b8a:	79 81       	ldd	r23, Y+1	; 0x01
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b90:	61 15       	cp	r22, r1
    1b92:	71 05       	cpc	r23, r1
    1b94:	81 05       	cpc	r24, r1
    1b96:	91 05       	cpc	r25, r1
    1b98:	21 f4       	brne	.+8      	; 0x1ba2 <do_rand+0x30>
    1b9a:	64 e2       	ldi	r22, 0x24	; 36
    1b9c:	79 ed       	ldi	r23, 0xD9	; 217
    1b9e:	8b e5       	ldi	r24, 0x5B	; 91
    1ba0:	97 e0       	ldi	r25, 0x07	; 7
    1ba2:	2d e1       	ldi	r18, 0x1D	; 29
    1ba4:	33 ef       	ldi	r19, 0xF3	; 243
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	c7 df       	rcall	.-114    	; 0x1b3a <__divmodsi4>
    1bac:	49 01       	movw	r8, r18
    1bae:	5a 01       	movw	r10, r20
    1bb0:	9b 01       	movw	r18, r22
    1bb2:	ac 01       	movw	r20, r24
    1bb4:	a7 ea       	ldi	r26, 0xA7	; 167
    1bb6:	b1 e4       	ldi	r27, 0x41	; 65
    1bb8:	3a d0       	rcall	.+116    	; 0x1c2e <__muluhisi3>
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	ac ee       	ldi	r26, 0xEC	; 236
    1bc0:	b4 ef       	ldi	r27, 0xF4	; 244
    1bc2:	a5 01       	movw	r20, r10
    1bc4:	94 01       	movw	r18, r8
    1bc6:	3f d0       	rcall	.+126    	; 0x1c46 <__mulohisi3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8c 0d       	add	r24, r12
    1bce:	9d 1d       	adc	r25, r13
    1bd0:	ae 1d       	adc	r26, r14
    1bd2:	bf 1d       	adc	r27, r15
    1bd4:	b7 ff       	sbrs	r27, 7
    1bd6:	03 c0       	rjmp	.+6      	; 0x1bde <do_rand+0x6c>
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	a1 09       	sbc	r26, r1
    1bdc:	b0 48       	sbci	r27, 0x80	; 128
    1bde:	88 83       	st	Y, r24
    1be0:	99 83       	std	Y+1, r25	; 0x01
    1be2:	aa 83       	std	Y+2, r26	; 0x02
    1be4:	bb 83       	std	Y+3, r27	; 0x03
    1be6:	9f 77       	andi	r25, 0x7F	; 127
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	ff 90       	pop	r15
    1bee:	ef 90       	pop	r14
    1bf0:	df 90       	pop	r13
    1bf2:	cf 90       	pop	r12
    1bf4:	bf 90       	pop	r11
    1bf6:	af 90       	pop	r10
    1bf8:	9f 90       	pop	r9
    1bfa:	8f 90       	pop	r8
    1bfc:	08 95       	ret

00001bfe <rand_r>:
    1bfe:	b9 cf       	rjmp	.-142    	; 0x1b72 <do_rand>

00001c00 <rand>:
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	92 e0       	ldi	r25, 0x02	; 2
    1c04:	b6 cf       	rjmp	.-148    	; 0x1b72 <do_rand>

00001c06 <srand>:
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e0       	ldi	r27, 0x00	; 0
    1c0a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1c0e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    1c12:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    1c16:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1c1a:	08 95       	ret

00001c1c <memcpy>:
    1c1c:	fb 01       	movw	r30, r22
    1c1e:	dc 01       	movw	r26, r24
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <memcpy+0xa>
    1c22:	01 90       	ld	r0, Z+
    1c24:	0d 92       	st	X+, r0
    1c26:	41 50       	subi	r20, 0x01	; 1
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	d8 f7       	brcc	.-10     	; 0x1c22 <memcpy+0x6>
    1c2c:	08 95       	ret

00001c2e <__muluhisi3>:
    1c2e:	0f d0       	rcall	.+30     	; 0x1c4e <__umulhisi3>
    1c30:	a5 9f       	mul	r26, r21
    1c32:	90 0d       	add	r25, r0
    1c34:	b4 9f       	mul	r27, r20
    1c36:	90 0d       	add	r25, r0
    1c38:	a4 9f       	mul	r26, r20
    1c3a:	80 0d       	add	r24, r0
    1c3c:	91 1d       	adc	r25, r1
    1c3e:	11 24       	eor	r1, r1
    1c40:	08 95       	ret

00001c42 <__mulshisi3>:
    1c42:	b7 ff       	sbrs	r27, 7
    1c44:	f4 cf       	rjmp	.-24     	; 0x1c2e <__muluhisi3>

00001c46 <__mulohisi3>:
    1c46:	f3 df       	rcall	.-26     	; 0x1c2e <__muluhisi3>
    1c48:	82 1b       	sub	r24, r18
    1c4a:	93 0b       	sbc	r25, r19
    1c4c:	08 95       	ret

00001c4e <__umulhisi3>:
    1c4e:	a2 9f       	mul	r26, r18
    1c50:	b0 01       	movw	r22, r0
    1c52:	b3 9f       	mul	r27, r19
    1c54:	c0 01       	movw	r24, r0
    1c56:	a3 9f       	mul	r26, r19
    1c58:	70 0d       	add	r23, r0
    1c5a:	81 1d       	adc	r24, r1
    1c5c:	11 24       	eor	r1, r1
    1c5e:	91 1d       	adc	r25, r1
    1c60:	b2 9f       	mul	r27, r18
    1c62:	70 0d       	add	r23, r0
    1c64:	81 1d       	adc	r24, r1
    1c66:	11 24       	eor	r1, r1
    1c68:	91 1d       	adc	r25, r1
    1c6a:	08 95       	ret

00001c6c <_exit>:
    1c6c:	f8 94       	cli

00001c6e <__stop_program>:
    1c6e:	ff cf       	rjmp	.-2      	; 0x1c6e <__stop_program>
