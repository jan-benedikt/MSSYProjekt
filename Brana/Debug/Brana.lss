
Brana.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000017c8  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000571  00800204  00800204  00001860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000400  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005d61  00000000  00000000  00001cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002cae  00000000  00000000  00007a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000261e  00000000  00000000  0000a6df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000974  00000000  00000000  0000cd00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dd4  00000000  00000000  0000d674  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023ef  00000000  00000000  0000f448  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00011837  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	99 c0       	rjmp	.+306    	; 0x134 <__ctors_end>
       2:	00 00       	nop
       4:	b7 c0       	rjmp	.+366    	; 0x174 <__bad_interrupt>
       6:	00 00       	nop
       8:	b5 c0       	rjmp	.+362    	; 0x174 <__bad_interrupt>
       a:	00 00       	nop
       c:	b3 c0       	rjmp	.+358    	; 0x174 <__bad_interrupt>
       e:	00 00       	nop
      10:	b1 c0       	rjmp	.+354    	; 0x174 <__bad_interrupt>
      12:	00 00       	nop
      14:	af c0       	rjmp	.+350    	; 0x174 <__bad_interrupt>
      16:	00 00       	nop
      18:	ad c0       	rjmp	.+346    	; 0x174 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ab c0       	rjmp	.+342    	; 0x174 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a9 c0       	rjmp	.+338    	; 0x174 <__bad_interrupt>
      22:	00 00       	nop
      24:	a7 c0       	rjmp	.+334    	; 0x174 <__bad_interrupt>
      26:	00 00       	nop
      28:	a5 c0       	rjmp	.+330    	; 0x174 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a3 c0       	rjmp	.+326    	; 0x174 <__bad_interrupt>
      2e:	00 00       	nop
      30:	a1 c0       	rjmp	.+322    	; 0x174 <__bad_interrupt>
      32:	00 00       	nop
      34:	da c0       	rjmp	.+436    	; 0x1ea <__vector_13>
      36:	00 00       	nop
      38:	9d c0       	rjmp	.+314    	; 0x174 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	9b c0       	rjmp	.+310    	; 0x174 <__bad_interrupt>
      3e:	00 00       	nop
      40:	99 c0       	rjmp	.+306    	; 0x174 <__bad_interrupt>
      42:	00 00       	nop
      44:	97 c0       	rjmp	.+302    	; 0x174 <__bad_interrupt>
      46:	00 00       	nop
      48:	95 c0       	rjmp	.+298    	; 0x174 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	93 c0       	rjmp	.+294    	; 0x174 <__bad_interrupt>
      4e:	00 00       	nop
      50:	91 c0       	rjmp	.+290    	; 0x174 <__bad_interrupt>
      52:	00 00       	nop
      54:	8f c0       	rjmp	.+286    	; 0x174 <__bad_interrupt>
      56:	00 00       	nop
      58:	8d c0       	rjmp	.+282    	; 0x174 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	8b c0       	rjmp	.+278    	; 0x174 <__bad_interrupt>
      5e:	00 00       	nop
      60:	89 c0       	rjmp	.+274    	; 0x174 <__bad_interrupt>
      62:	00 00       	nop
      64:	87 c0       	rjmp	.+270    	; 0x174 <__bad_interrupt>
      66:	00 00       	nop
      68:	85 c0       	rjmp	.+266    	; 0x174 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	83 c0       	rjmp	.+262    	; 0x174 <__bad_interrupt>
      6e:	00 00       	nop
      70:	81 c0       	rjmp	.+258    	; 0x174 <__bad_interrupt>
      72:	00 00       	nop
      74:	7f c0       	rjmp	.+254    	; 0x174 <__bad_interrupt>
      76:	00 00       	nop
      78:	7d c0       	rjmp	.+250    	; 0x174 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	7b c0       	rjmp	.+246    	; 0x174 <__bad_interrupt>
      7e:	00 00       	nop
      80:	79 c0       	rjmp	.+242    	; 0x174 <__bad_interrupt>
      82:	00 00       	nop
      84:	77 c0       	rjmp	.+238    	; 0x174 <__bad_interrupt>
      86:	00 00       	nop
      88:	75 c0       	rjmp	.+234    	; 0x174 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	73 c0       	rjmp	.+230    	; 0x174 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c0       	rjmp	.+430    	; 0x240 <__vector_36>
      92:	00 00       	nop
      94:	b9 c0       	rjmp	.+370    	; 0x208 <__vector_37>
      96:	00 00       	nop
      98:	6d c0       	rjmp	.+218    	; 0x174 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	6b c0       	rjmp	.+214    	; 0x174 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	69 c0       	rjmp	.+210    	; 0x174 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	67 c0       	rjmp	.+206    	; 0x174 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8f c0       	rjmp	.+286    	; 0x1c8 <__vector_42>
      aa:	00 00       	nop
      ac:	63 c0       	rjmp	.+198    	; 0x174 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	61 c0       	rjmp	.+194    	; 0x174 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	5f c0       	rjmp	.+190    	; 0x174 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	5d c0       	rjmp	.+186    	; 0x174 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	5b c0       	rjmp	.+182    	; 0x174 <__bad_interrupt>
      be:	00 00       	nop
      c0:	59 c0       	rjmp	.+178    	; 0x174 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	57 c0       	rjmp	.+174    	; 0x174 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	55 c0       	rjmp	.+170    	; 0x174 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	53 c0       	rjmp	.+166    	; 0x174 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	51 c0       	rjmp	.+162    	; 0x174 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	4f c0       	rjmp	.+158    	; 0x174 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	4d c0       	rjmp	.+154    	; 0x174 <__bad_interrupt>
      da:	00 00       	nop
      dc:	4b c0       	rjmp	.+150    	; 0x174 <__bad_interrupt>
      de:	00 00       	nop
      e0:	49 c0       	rjmp	.+146    	; 0x174 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	47 c0       	rjmp	.+142    	; 0x174 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	45 c0       	rjmp	.+138    	; 0x174 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	43 c0       	rjmp	.+134    	; 0x174 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	41 c0       	rjmp	.+130    	; 0x174 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	3f c0       	rjmp	.+126    	; 0x174 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	3d c0       	rjmp	.+122    	; 0x174 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	3b c0       	rjmp	.+118    	; 0x174 <__bad_interrupt>
      fe:	00 00       	nop
     100:	39 c0       	rjmp	.+114    	; 0x174 <__bad_interrupt>
     102:	00 00       	nop
     104:	37 c0       	rjmp	.+110    	; 0x174 <__bad_interrupt>
     106:	00 00       	nop
     108:	35 c0       	rjmp	.+106    	; 0x174 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	33 c0       	rjmp	.+102    	; 0x174 <__bad_interrupt>
     10e:	00 00       	nop
     110:	31 c0       	rjmp	.+98     	; 0x174 <__bad_interrupt>
     112:	00 00       	nop
     114:	2f c0       	rjmp	.+94     	; 0x174 <__bad_interrupt>
     116:	00 00       	nop
     118:	2d c0       	rjmp	.+90     	; 0x174 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2b c0       	rjmp	.+86     	; 0x174 <__bad_interrupt>
     11e:	00 00       	nop
     120:	29 c0       	rjmp	.+82     	; 0x174 <__bad_interrupt>
     122:	00 00       	nop
     124:	27 c0       	rjmp	.+78     	; 0x174 <__bad_interrupt>
     126:	00 00       	nop
     128:	25 c0       	rjmp	.+74     	; 0x174 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	23 c0       	rjmp	.+70     	; 0x174 <__bad_interrupt>
     12e:	00 00       	nop
     130:	21 c0       	rjmp	.+66     	; 0x174 <__bad_interrupt>
	...

00000134 <__ctors_end>:
     134:	11 24       	eor	r1, r1
     136:	1f be       	out	0x3f, r1	; 63
     138:	cf ef       	ldi	r28, 0xFF	; 255
     13a:	d1 e8       	ldi	r29, 0x81	; 129
     13c:	de bf       	out	0x3e, r29	; 62
     13e:	cd bf       	out	0x3d, r28	; 61
     140:	00 e0       	ldi	r16, 0x00	; 0
     142:	0c bf       	out	0x3c, r16	; 60

00000144 <__do_copy_data>:
     144:	12 e0       	ldi	r17, 0x02	; 2
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b2 e0       	ldi	r27, 0x02	; 2
     14a:	e8 ec       	ldi	r30, 0xC8	; 200
     14c:	f7 e1       	ldi	r31, 0x17	; 23
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	0b bf       	out	0x3b, r16	; 59
     152:	02 c0       	rjmp	.+4      	; 0x158 <__do_copy_data+0x14>
     154:	07 90       	elpm	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	a4 30       	cpi	r26, 0x04	; 4
     15a:	b1 07       	cpc	r27, r17
     15c:	d9 f7       	brne	.-10     	; 0x154 <__do_copy_data+0x10>

0000015e <__do_clear_bss>:
     15e:	27 e0       	ldi	r18, 0x07	; 7
     160:	a4 e0       	ldi	r26, 0x04	; 4
     162:	b2 e0       	ldi	r27, 0x02	; 2
     164:	01 c0       	rjmp	.+2      	; 0x168 <.do_clear_bss_start>

00000166 <.do_clear_bss_loop>:
     166:	1d 92       	st	X+, r1

00000168 <.do_clear_bss_start>:
     168:	a5 37       	cpi	r26, 0x75	; 117
     16a:	b2 07       	cpc	r27, r18
     16c:	e1 f7       	brne	.-8      	; 0x166 <.do_clear_bss_loop>
     16e:	c6 d0       	rcall	.+396    	; 0x2fc <main>
     170:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_exit>

00000174 <__bad_interrupt>:
     174:	45 cf       	rjmp	.-374    	; 0x0 <__vectors>

00000176 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     176:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	a8 95       	wdr
     17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     182:	88 61       	ori	r24, 0x18	; 24
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     18c:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     18e:	e1 e6       	ldi	r30, 0x61	; 97
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 e8       	ldi	r24, 0x80	; 128
     194:	80 83       	st	Z, r24
  CLKPR = 0;
     196:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     198:	78 94       	sei

  HAL_TimerInit();
     19a:	01 c0       	rjmp	.+2      	; 0x19e <HAL_TimerInit>
     19c:	08 95       	ret

0000019e <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     19e:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <halTimerIrqCount>
     1a2:	80 e1       	ldi	r24, 0x10	; 16
     1a4:	97 e2       	ldi	r25, 0x27	; 39
     1a6:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7000a9>
     1aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7000a8>
     1ae:	e1 ea       	ldi	r30, 0xA1	; 161
     1b0:	f0 e0       	ldi	r31, 0x00	; 0
     1b2:	88 e0       	ldi	r24, 0x08	; 8
     1b4:	80 83       	st	Z, r24
     1b6:	80 81       	ld	r24, Z
     1b8:	82 60       	ori	r24, 0x02	; 2
     1ba:	80 83       	st	Z, r24
     1bc:	e2 e7       	ldi	r30, 0x72	; 114
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	80 81       	ld	r24, Z
     1c2:	82 60       	ori	r24, 0x02	; 2
     1c4:	80 83       	st	Z, r24
     1c6:	08 95       	ret

000001c8 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     1c8:	1f 92       	push	r1
     1ca:	0f 92       	push	r0
     1cc:	0f b6       	in	r0, 0x3f	; 63
     1ce:	0f 92       	push	r0
     1d0:	11 24       	eor	r1, r1
     1d2:	8f 93       	push	r24
  halTimerIrqCount++;
     1d4:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <halTimerIrqCount>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 4c 07 	sts	0x074C, r24	; 0x80074c <halTimerIrqCount>
}
     1de:	8f 91       	pop	r24
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
  halSleepTimerEvent = true;
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <__data_end>
}
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_37>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0b b6       	in	r0, 0x3b	; 59
     214:	0f 92       	push	r0
     216:	8f 93       	push	r24
     218:	ef 93       	push	r30
     21a:	ff 93       	push	r31
  udrEmpty = true;
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <udrEmpty>
  UCSRxB &= ~(1 << UDRIE1);
     222:	e9 ec       	ldi	r30, 0xC9	; 201
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	8f 7d       	andi	r24, 0xDF	; 223
     22a:	80 83       	st	Z, r24
}
     22c:	ff 91       	pop	r31
     22e:	ef 91       	pop	r30
     230:	8f 91       	pop	r24
     232:	0f 90       	pop	r0
     234:	0b be       	out	0x3b, r0	; 59
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_36>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	0b b6       	in	r0, 0x3b	; 59
     24c:	0f 92       	push	r0
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     266:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7000c8>
  uint8_t byte = UDRx;
     26a:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     26e:	8c 71       	andi	r24, 0x1C	; 28
     270:	59 f5       	brne	.+86     	; 0x2c8 <__vector_36+0x88>
  {
    if (rxFifo.bytes == rxFifo.size)
     272:	e7 e0       	ldi	r30, 0x07	; 7
     274:	f2 e0       	ldi	r31, 0x02	; 2
     276:	46 81       	ldd	r20, Z+6	; 0x06
     278:	57 81       	ldd	r21, Z+7	; 0x07
     27a:	84 81       	ldd	r24, Z+4	; 0x04
     27c:	95 81       	ldd	r25, Z+5	; 0x05
     27e:	48 17       	cp	r20, r24
     280:	59 07       	cpc	r21, r25
     282:	11 f1       	breq	.+68     	; 0x2c8 <__vector_36+0x88>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     284:	40 85       	ldd	r20, Z+8	; 0x08
     286:	51 85       	ldd	r21, Z+9	; 0x09
     288:	82 81       	ldd	r24, Z+2	; 0x02
     28a:	93 81       	ldd	r25, Z+3	; 0x03
     28c:	bc 01       	movw	r22, r24
     28e:	6f 5f       	subi	r22, 0xFF	; 255
     290:	7f 4f       	sbci	r23, 0xFF	; 255
     292:	73 83       	std	Z+3, r23	; 0x03
     294:	62 83       	std	Z+2, r22	; 0x02
     296:	da 01       	movw	r26, r20
     298:	a8 0f       	add	r26, r24
     29a:	b9 1f       	adc	r27, r25
     29c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     29e:	22 81       	ldd	r18, Z+2	; 0x02
     2a0:	33 81       	ldd	r19, Z+3	; 0x03
     2a2:	84 81       	ldd	r24, Z+4	; 0x04
     2a4:	95 81       	ldd	r25, Z+5	; 0x05
     2a6:	28 17       	cp	r18, r24
     2a8:	39 07       	cpc	r19, r25
     2aa:	21 f4       	brne	.+8      	; 0x2b4 <__vector_36+0x74>
      rxFifo.tail = 0;
     2ac:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <rxFifo+0x3>
     2b0:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <rxFifo+0x2>
    rxFifo.bytes++;
     2b4:	e7 e0       	ldi	r30, 0x07	; 7
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	86 81       	ldd	r24, Z+6	; 0x06
     2ba:	97 81       	ldd	r25, Z+7	; 0x07
     2bc:	01 96       	adiw	r24, 0x01	; 1
     2be:	97 83       	std	Z+7, r25	; 0x07
     2c0:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <newData>
  }

  PRAGMA(diag_default=Pa082);
}
     2c8:	ff 91       	pop	r31
     2ca:	ef 91       	pop	r30
     2cc:	bf 91       	pop	r27
     2ce:	af 91       	pop	r26
     2d0:	9f 91       	pop	r25
     2d2:	8f 91       	pop	r24
     2d4:	7f 91       	pop	r23
     2d6:	6f 91       	pop	r22
     2d8:	5f 91       	pop	r21
     2da:	4f 91       	pop	r20
     2dc:	3f 91       	pop	r19
     2de:	2f 91       	pop	r18
     2e0:	0f 90       	pop	r0
     2e2:	0b be       	out	0x3b, r0	; 59
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	1f 90       	pop	r1
     2ec:	18 95       	reti

000002ee <funkceObluhy>:
//obsluha prichozich ramcu
static bool funkceObluhy (NWK_DataInd_t *ind)
{
	// obsluha
	return true;
}
     2ee:	81 e0       	ldi	r24, 0x01	; 1
     2f0:	08 95       	ret

000002f2 <appInit>:

void appInit(){
	NWK_OpenEndpoint(APP_ENDPOINT, funkceObluhy);
     2f2:	67 e7       	ldi	r22, 0x77	; 119
     2f4:	71 e0       	ldi	r23, 0x01	; 1
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	25 c0       	rjmp	.+74     	; 0x344 <NWK_OpenEndpoint>
     2fa:	08 95       	ret

000002fc <main>:
	}
}

int main(void)
{
	SYS_Init();
     2fc:	0e 94 22 0a 	call	0x1444	; 0x1444 <SYS_Init>
	switch (appState)
	{
		case APP_STATE_INITIAL:
		{
			appInit();
			appState = APP_STATE_IDLE;
     300:	c1 e0       	ldi	r28, 0x01	; 1
int main(void)
{
	SYS_Init();
	while (1)
	{
		SYS_TaskHandler();
     302:	0e 94 29 0a 	call	0x1452	; 0x1452 <SYS_TaskHandler>
	NWK_OpenEndpoint(APP_ENDPOINT, funkceObluhy);
}

static void APP_TaskHandler(void)
{
	switch (appState)
     306:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <appState>
     30a:	81 11       	cpse	r24, r1
     30c:	fa cf       	rjmp	.-12     	; 0x302 <main+0x6>
	{
		case APP_STATE_INITIAL:
		{
			appInit();
     30e:	f1 df       	rcall	.-30     	; 0x2f2 <appInit>
			appState = APP_STATE_IDLE;
     310:	c0 93 11 02 	sts	0x0211, r28	; 0x800211 <appState>
     314:	f6 cf       	rjmp	.-20     	; 0x302 <main+0x6>

00000316 <NWK_Init>:
      return val[i];
    cl += 25;
  }

  return 255;
}
     316:	ed e4       	ldi	r30, 0x4D	; 77
     318:	f7 e0       	ldi	r31, 0x07	; 7
     31a:	14 82       	std	Z+4, r1	; 0x04
     31c:	15 82       	std	Z+5, r1	; 0x05
     31e:	11 82       	std	Z+1, r1	; 0x01
     320:	10 82       	st	Z, r1
     322:	17 a2       	std	Z+39, r1	; 0x27
     324:	16 a2       	std	Z+38, r1	; 0x26
     326:	e3 e5       	ldi	r30, 0x53	; 83
     328:	f7 e0       	ldi	r31, 0x07	; 7
     32a:	83 e7       	ldi	r24, 0x73	; 115
     32c:	97 e0       	ldi	r25, 0x07	; 7
     32e:	11 92       	st	Z+, r1
     330:	11 92       	st	Z+, r1
     332:	e8 17       	cp	r30, r24
     334:	f9 07       	cpc	r31, r25
     336:	d9 f7       	brne	.-10     	; 0x32e <NWK_Init+0x18>
     338:	15 d6       	rcall	.+3114   	; 0xf64 <nwkTxInit>
     33a:	2c d3       	rcall	.+1624   	; 0x994 <nwkRxInit>
     33c:	db d0       	rcall	.+438    	; 0x4f4 <nwkFrameInit>
     33e:	32 d0       	rcall	.+100    	; 0x3a4 <nwkDataReqInit>
     340:	56 c1       	rjmp	.+684    	; 0x5ee <nwkRouteInit>
     342:	08 95       	ret

00000344 <NWK_OpenEndpoint>:
     344:	e8 2f       	mov	r30, r24
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	ee 0f       	add	r30, r30
     34a:	ff 1f       	adc	r31, r31
     34c:	ed 5a       	subi	r30, 0xAD	; 173
     34e:	f8 4f       	sbci	r31, 0xF8	; 248
     350:	71 83       	std	Z+1, r23	; 0x01
     352:	60 83       	st	Z, r22
     354:	08 95       	ret

00000356 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     356:	65 d3       	rcall	.+1738   	; 0xa22 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     358:	00 d7       	rcall	.+3584   	; 0x115a <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     35a:	29 c0       	rjmp	.+82     	; 0x3ae <nwkDataReqTaskHandler>
     35c:	08 95       	ret

0000035e <nwkDataReqTxConf>:
    nwkDataReqQueue = req;
  }
  else
  {
    req->next = nwkDataReqQueue;
    nwkDataReqQueue = req;
     35e:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <nwkDataReqQueue>
     362:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <nwkDataReqQueue+0x1>
     366:	30 97       	sbiw	r30, 0x00	; 0
     368:	d9 f0       	breq	.+54     	; 0x3a0 <nwkDataReqTxConf+0x42>
     36a:	22 81       	ldd	r18, Z+2	; 0x02
     36c:	33 81       	ldd	r19, Z+3	; 0x03
     36e:	28 17       	cp	r18, r24
     370:	39 07       	cpc	r19, r25
     372:	89 f4       	brne	.+34     	; 0x396 <nwkDataReqTxConf+0x38>
     374:	05 c0       	rjmp	.+10     	; 0x380 <nwkDataReqTxConf+0x22>
     376:	22 81       	ldd	r18, Z+2	; 0x02
     378:	33 81       	ldd	r19, Z+3	; 0x03
     37a:	28 17       	cp	r18, r24
     37c:	39 07       	cpc	r19, r25
     37e:	59 f4       	brne	.+22     	; 0x396 <nwkDataReqTxConf+0x38>
     380:	dc 01       	movw	r26, r24
     382:	ad 57       	subi	r26, 0x7D	; 125
     384:	bf 4f       	sbci	r27, 0xFF	; 255
     386:	2c 91       	ld	r18, X
     388:	27 87       	std	Z+15, r18	; 0x0f
     38a:	13 96       	adiw	r26, 0x03	; 3
     38c:	2c 91       	ld	r18, X
     38e:	20 8b       	std	Z+16, r18	; 0x10
     390:	22 e0       	ldi	r18, 0x02	; 2
     392:	24 83       	std	Z+4, r18	; 0x04
     394:	05 c0       	rjmp	.+10     	; 0x3a0 <nwkDataReqTxConf+0x42>
     396:	01 90       	ld	r0, Z+
     398:	f0 81       	ld	r31, Z
     39a:	e0 2d       	mov	r30, r0
     39c:	30 97       	sbiw	r30, 0x00	; 0
     39e:	59 f7       	brne	.-42     	; 0x376 <nwkDataReqTxConf+0x18>
     3a0:	e6 c0       	rjmp	.+460    	; 0x56e <nwkFrameFree>
     3a2:	08 95       	ret

000003a4 <nwkDataReqInit>:
     3a4:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <nwkDataReqQueue+0x1>
     3a8:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <nwkDataReqQueue>
     3ac:	08 95       	ret

000003ae <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     3ae:	0f 93       	push	r16
     3b0:	1f 93       	push	r17
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     3b6:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <nwkDataReqQueue>
     3ba:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <nwkDataReqQueue+0x1>
     3be:	30 97       	sbiw	r30, 0x00	; 0
     3c0:	09 f4       	brne	.+2      	; 0x3c4 <nwkDataReqTaskHandler+0x16>
     3c2:	93 c0       	rjmp	.+294    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     3c4:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     3c6:	8c 81       	ldd	r24, Y+4	; 0x04
     3c8:	88 23       	and	r24, r24
     3ca:	21 f0       	breq	.+8      	; 0x3d4 <nwkDataReqTaskHandler+0x26>
     3cc:	82 30       	cpi	r24, 0x02	; 2
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <nwkDataReqTaskHandler+0x24>
     3d0:	66 c0       	rjmp	.+204    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     3d2:	85 c0       	rjmp	.+266    	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     3d4:	96 d0       	rcall	.+300    	; 0x502 <nwkFrameAlloc>
     3d6:	8c 01       	movw	r16, r24
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	21 f4       	brne	.+8      	; 0x3e4 <nwkDataReqTaskHandler+0x36>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     3dc:	82 e0       	ldi	r24, 0x02	; 2
     3de:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     3e0:	8f 87       	std	Y+15, r24	; 0x0f
     3e2:	83 c0       	rjmp	.+262    	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
    return;
  }

  req->frame = frame;
     3e4:	9b 83       	std	Y+3, r25	; 0x03
     3e6:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     3ec:	f8 01       	movw	r30, r16
     3ee:	e9 57       	subi	r30, 0x79	; 121
     3f0:	ff 4f       	sbci	r31, 0xFF	; 255
     3f2:	8f ea       	ldi	r24, 0xAF	; 175
     3f4:	91 e0       	ldi	r25, 0x01	; 1
     3f6:	91 83       	std	Z+1, r25	; 0x01
     3f8:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     3fa:	31 97       	sbiw	r30, 0x01	; 1
     3fc:	89 85       	ldd	r24, Y+9	; 0x09
     3fe:	82 fb       	bst	r24, 2
     400:	88 27       	eor	r24, r24
     402:	80 f9       	bld	r24, 0
     404:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     406:	99 85       	ldd	r25, Y+9	; 0x09
     408:	d8 01       	movw	r26, r16
     40a:	1b 96       	adiw	r26, 0x0b	; 11
     40c:	8c 91       	ld	r24, X
     40e:	1b 97       	sbiw	r26, 0x0b	; 11
     410:	90 fb       	bst	r25, 0
     412:	80 f9       	bld	r24, 0
     414:	1b 96       	adiw	r26, 0x0b	; 11
     416:	8c 93       	st	X, r24
     418:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     41a:	99 85       	ldd	r25, Y+9	; 0x09
     41c:	93 fb       	bst	r25, 3
     41e:	99 27       	eor	r25, r25
     420:	90 f9       	bld	r25, 0
     422:	90 fb       	bst	r25, 0
     424:	82 f9       	bld	r24, 2
     426:	1b 96       	adiw	r26, 0x0b	; 11
     428:	8c 93       	st	X, r24
     42a:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     42c:	ed e4       	ldi	r30, 0x4D	; 77
     42e:	f7 e0       	ldi	r31, 0x07	; 7
     430:	84 81       	ldd	r24, Z+4	; 0x04
     432:	8f 5f       	subi	r24, 0xFF	; 255
     434:	84 83       	std	Z+4, r24	; 0x04
     436:	1c 96       	adiw	r26, 0x0c	; 12
     438:	8c 93       	st	X, r24
     43a:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     43c:	80 81       	ld	r24, Z
     43e:	91 81       	ldd	r25, Z+1	; 0x01
     440:	1e 96       	adiw	r26, 0x0e	; 14
     442:	9c 93       	st	X, r25
     444:	8e 93       	st	-X, r24
     446:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     448:	8d 81       	ldd	r24, Y+5	; 0x05
     44a:	9e 81       	ldd	r25, Y+6	; 0x06
     44c:	50 96       	adiw	r26, 0x10	; 16
     44e:	9c 93       	st	X, r25
     450:	8e 93       	st	-X, r24
     452:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     454:	88 85       	ldd	r24, Y+8	; 0x08
     456:	98 2f       	mov	r25, r24
     458:	9f 70       	andi	r25, 0x0F	; 15
     45a:	51 96       	adiw	r26, 0x11	; 17
     45c:	8c 91       	ld	r24, X
     45e:	51 97       	sbiw	r26, 0x11	; 17
     460:	80 7f       	andi	r24, 0xF0	; 240
     462:	89 2b       	or	r24, r25
     464:	51 96       	adiw	r26, 0x11	; 17
     466:	8c 93       	st	X, r24
     468:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     46a:	9f 81       	ldd	r25, Y+7	; 0x07
     46c:	92 95       	swap	r25
     46e:	90 7f       	andi	r25, 0xF0	; 240
     470:	8f 70       	andi	r24, 0x0F	; 15
     472:	89 2b       	or	r24, r25
     474:	51 96       	adiw	r26, 0x11	; 17
     476:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     478:	f8 01       	movw	r30, r16
     47a:	ef 57       	subi	r30, 0x7F	; 127
     47c:	ff 4f       	sbci	r31, 0xFF	; 255
     47e:	4c 85       	ldd	r20, Y+12	; 0x0c
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	6a 85       	ldd	r22, Y+10	; 0x0a
     484:	7b 85       	ldd	r23, Y+11	; 0x0b
     486:	80 81       	ld	r24, Z
     488:	91 81       	ldd	r25, Z+1	; 0x01
     48a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <memcpy>
  frame->size += req->size;
     48e:	f8 01       	movw	r30, r16
     490:	91 81       	ldd	r25, Z+1	; 0x01
     492:	8c 85       	ldd	r24, Y+12	; 0x0c
     494:	89 0f       	add	r24, r25
     496:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     498:	c8 01       	movw	r24, r16
     49a:	87 d5       	rcall	.+2830   	; 0xfaa <nwkTxFrame>
     49c:	26 c0       	rjmp	.+76     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     49e:	ce 17       	cp	r28, r30
     4a0:	df 07       	cpc	r29, r31
     4a2:	41 f4       	brne	.+16     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     4a4:	88 81       	ld	r24, Y
     4a6:	99 81       	ldd	r25, Y+1	; 0x01
     4a8:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <nwkDataReqQueue+0x1>
     4ac:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <nwkDataReqQueue>
     4b0:	0a c0       	rjmp	.+20     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     4b2:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     4b4:	80 81       	ld	r24, Z
     4b6:	91 81       	ldd	r25, Z+1	; 0x01
     4b8:	c8 17       	cp	r28, r24
     4ba:	d9 07       	cpc	r29, r25
     4bc:	d1 f7       	brne	.-12     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     4be:	88 81       	ld	r24, Y
     4c0:	99 81       	ldd	r25, Y+1	; 0x01
     4c2:	91 83       	std	Z+1, r25	; 0x01
     4c4:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     4c6:	ed e4       	ldi	r30, 0x4D	; 77
     4c8:	f7 e0       	ldi	r31, 0x07	; 7
     4ca:	86 a1       	ldd	r24, Z+38	; 0x26
     4cc:	97 a1       	ldd	r25, Z+39	; 0x27
     4ce:	01 97       	sbiw	r24, 0x01	; 1
     4d0:	97 a3       	std	Z+39, r25	; 0x27
     4d2:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     4d4:	ed 85       	ldd	r30, Y+13	; 0x0d
     4d6:	fe 85       	ldd	r31, Y+14	; 0x0e
     4d8:	ce 01       	movw	r24, r28
     4da:	19 95       	eicall
     4dc:	06 c0       	rjmp	.+12     	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     4de:	09 90       	ld	r0, Y+
     4e0:	d8 81       	ld	r29, Y
     4e2:	c0 2d       	mov	r28, r0
     4e4:	20 97       	sbiw	r28, 0x00	; 0
     4e6:	09 f0       	breq	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	6e cf       	rjmp	.-292    	; 0x3c6 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	08 95       	ret

000004f4 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     4f4:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <nwkFrameFrames>
     4f8:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <nwkFrameFrames+0x89>
     4fc:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <nwkFrameFrames+0x112>
     500:	08 95       	ret

00000502 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     502:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <nwkFrameFrames>
     506:	88 23       	and	r24, r24
     508:	71 f0       	breq	.+28     	; 0x526 <nwkFrameAlloc+0x24>
     50a:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <nwkFrameFrames+0x89>
     50e:	88 23       	and	r24, r24
     510:	39 f0       	breq	.+14     	; 0x520 <nwkFrameAlloc+0x1e>
     512:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <nwkFrameFrames+0x112>
     516:	81 11       	cpse	r24, r1
     518:	27 c0       	rjmp	.+78     	; 0x568 <nwkFrameAlloc+0x66>
     51a:	82 e0       	ldi	r24, 0x02	; 2
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	05 c0       	rjmp	.+10     	; 0x52a <nwkFrameAlloc+0x28>
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <nwkFrameAlloc+0x28>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     52a:	49 e8       	ldi	r20, 0x89	; 137
     52c:	48 9f       	mul	r20, r24
     52e:	90 01       	movw	r18, r0
     530:	49 9f       	mul	r20, r25
     532:	30 0d       	add	r19, r0
     534:	11 24       	eor	r1, r1
     536:	c9 01       	movw	r24, r18
     538:	8c 5e       	subi	r24, 0xEC	; 236
     53a:	9d 4f       	sbci	r25, 0xFD	; 253
     53c:	fc 01       	movw	r30, r24
     53e:	11 92       	st	Z+, r1
     540:	4a 95       	dec	r20
     542:	e9 f7       	brne	.-6      	; 0x53e <nwkFrameAlloc+0x3c>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     544:	40 e1       	ldi	r20, 0x10	; 16
     546:	fc 01       	movw	r30, r24
     548:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     54a:	ef 57       	subi	r30, 0x7F	; 127
     54c:	ff 4f       	sbci	r31, 0xFF	; 255
     54e:	2a 5d       	subi	r18, 0xDA	; 218
     550:	3d 4f       	sbci	r19, 0xFD	; 253
     552:	31 83       	std	Z+1, r19	; 0x01
     554:	20 83       	st	Z, r18
      nwkIb.lock++;
     556:	ed e4       	ldi	r30, 0x4D	; 77
     558:	f7 e0       	ldi	r31, 0x07	; 7
     55a:	26 a1       	ldd	r18, Z+38	; 0x26
     55c:	37 a1       	ldd	r19, Z+39	; 0x27
     55e:	2f 5f       	subi	r18, 0xFF	; 255
     560:	3f 4f       	sbci	r19, 0xFF	; 255
     562:	37 a3       	std	Z+39, r19	; 0x27
     564:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     566:	08 95       	ret
    }
  }
  return NULL;
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
}
     56c:	08 95       	ret

0000056e <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     56e:	fc 01       	movw	r30, r24
     570:	10 82       	st	Z, r1
  nwkIb.lock--;
     572:	ed e4       	ldi	r30, 0x4D	; 77
     574:	f7 e0       	ldi	r31, 0x07	; 7
     576:	86 a1       	ldd	r24, Z+38	; 0x26
     578:	97 a1       	ldd	r25, Z+39	; 0x27
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	97 a3       	std	Z+39, r25	; 0x27
     57e:	86 a3       	std	Z+38, r24	; 0x26
     580:	08 95       	ret

00000582 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	41 f0       	breq	.+16     	; 0x596 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     586:	fc 01       	movw	r30, r24
     588:	e7 57       	subi	r30, 0x77	; 119
     58a:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     58c:	83 e0       	ldi	r24, 0x03	; 3
     58e:	ef 3a       	cpi	r30, 0xAF	; 175
     590:	f8 07       	cpc	r31, r24
     592:	18 f0       	brcs	.+6      	; 0x59a <nwkFrameNext+0x18>
     594:	15 c0       	rjmp	.+42     	; 0x5c0 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     596:	e4 e1       	ldi	r30, 0x14	; 20
     598:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     59a:	80 81       	ld	r24, Z
     59c:	88 23       	and	r24, r24
     59e:	39 f0       	breq	.+14     	; 0x5ae <nwkFrameNext+0x2c>
     5a0:	03 c0       	rjmp	.+6      	; 0x5a8 <nwkFrameNext+0x26>
     5a2:	80 81       	ld	r24, Z
     5a4:	88 23       	and	r24, r24
     5a6:	19 f0       	breq	.+6      	; 0x5ae <nwkFrameNext+0x2c>
      return frame;
     5a8:	8e 2f       	mov	r24, r30
     5aa:	9f 2f       	mov	r25, r31
     5ac:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     5ae:	e7 57       	subi	r30, 0x77	; 119
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	83 e0       	ldi	r24, 0x03	; 3
     5b4:	ef 3a       	cpi	r30, 0xAF	; 175
     5b6:	f8 07       	cpc	r31, r24
     5b8:	a0 f3       	brcs	.-24     	; 0x5a2 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	08 95       	ret
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
}
     5c4:	08 95       	ret

000005c6 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     5c6:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     5c8:	dc 01       	movw	r26, r24
     5ca:	ad 57       	subi	r26, 0x7D	; 125
     5cc:	bf 4f       	sbci	r27, 0xFF	; 255
     5ce:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     5d0:	ad e4       	ldi	r26, 0x4D	; 77
     5d2:	b7 e0       	ldi	r27, 0x07	; 7
     5d4:	14 96       	adiw	r26, 0x04	; 4
     5d6:	9c 91       	ld	r25, X
     5d8:	14 97       	sbiw	r26, 0x04	; 4
     5da:	9f 5f       	subi	r25, 0xFF	; 255
     5dc:	14 96       	adiw	r26, 0x04	; 4
     5de:	9c 93       	st	X, r25
     5e0:	14 97       	sbiw	r26, 0x04	; 4
     5e2:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     5e4:	8d 91       	ld	r24, X+
     5e6:	9c 91       	ld	r25, X
     5e8:	96 87       	std	Z+14, r25	; 0x0e
     5ea:	85 87       	std	Z+13, r24	; 0x0d
     5ec:	08 95       	ret

000005ee <nwkRouteInit>:
  entry->nextHopAddr = nextHop;
  entry->multicast = multicast;
  entry->score = NWK_ROUTE_DEFAULT_SCORE;
  entry->rank = NWK_ROUTE_DEFAULT_RANK;
  entry->lqi = lqi;
}
     5ee:	a4 eb       	ldi	r26, 0xB4	; 180
     5f0:	b3 e0       	ldi	r27, 0x03	; 3
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	4f ef       	ldi	r20, 0xFF	; 255
     5f8:	5f ef       	ldi	r21, 0xFF	; 255
     5fa:	fd 01       	movw	r30, r26
     5fc:	34 97       	sbiw	r30, 0x04	; 4
     5fe:	51 83       	std	Z+1, r21	; 0x01
     600:	40 83       	st	Z, r20
     602:	fc 01       	movw	r30, r24
     604:	ee 0f       	add	r30, r30
     606:	ff 1f       	adc	r31, r31
     608:	ee 0f       	add	r30, r30
     60a:	ff 1f       	adc	r31, r31
     60c:	ee 0f       	add	r30, r30
     60e:	ff 1f       	adc	r31, r31
     610:	e8 1b       	sub	r30, r24
     612:	f9 0b       	sbc	r31, r25
     614:	e1 55       	subi	r30, 0x51	; 81
     616:	fc 4f       	sbci	r31, 0xFC	; 252
     618:	20 81       	ld	r18, Z
     61a:	2e 7f       	andi	r18, 0xFE	; 254
     61c:	20 83       	st	Z, r18
     61e:	1c 92       	st	X, r1
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	17 96       	adiw	r26, 0x07	; 7
     624:	84 36       	cpi	r24, 0x64	; 100
     626:	91 05       	cpc	r25, r1
     628:	41 f7       	brne	.-48     	; 0x5fa <nwkRouteInit+0xc>
     62a:	08 95       	ret

0000062c <NWK_RouteFindEntry>:
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	e0 eb       	ldi	r30, 0xB0	; 176
     636:	f3 e0       	ldi	r31, 0x03	; 3
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	06 2f       	mov	r16, r22
     63e:	10 e0       	ldi	r17, 0x00	; 0
     640:	40 81       	ld	r20, Z
     642:	51 81       	ldd	r21, Z+1	; 0x01
     644:	48 17       	cp	r20, r24
     646:	59 07       	cpc	r21, r25
     648:	b1 f4       	brne	.+44     	; 0x676 <NWK_RouteFindEntry+0x4a>
     64a:	d9 01       	movw	r26, r18
     64c:	aa 0f       	add	r26, r26
     64e:	bb 1f       	adc	r27, r27
     650:	aa 0f       	add	r26, r26
     652:	bb 1f       	adc	r27, r27
     654:	aa 0f       	add	r26, r26
     656:	bb 1f       	adc	r27, r27
     658:	a2 1b       	sub	r26, r18
     65a:	b3 0b       	sbc	r27, r19
     65c:	a1 55       	subi	r26, 0x51	; 81
     65e:	bc 4f       	sbci	r27, 0xFC	; 252
     660:	4c 91       	ld	r20, X
     662:	46 95       	lsr	r20
     664:	41 70       	andi	r20, 0x01	; 1
     666:	c4 2f       	mov	r28, r20
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	d4 2f       	mov	r29, r20
     66c:	c0 17       	cp	r28, r16
     66e:	d1 07       	cpc	r29, r17
     670:	11 f4       	brne	.+4      	; 0x676 <NWK_RouteFindEntry+0x4a>
     672:	cd 01       	movw	r24, r26
     674:	08 c0       	rjmp	.+16     	; 0x686 <NWK_RouteFindEntry+0x5a>
     676:	2f 5f       	subi	r18, 0xFF	; 255
     678:	3f 4f       	sbci	r19, 0xFF	; 255
     67a:	37 96       	adiw	r30, 0x07	; 7
     67c:	24 36       	cpi	r18, 0x64	; 100
     67e:	31 05       	cpc	r19, r1
     680:	f9 f6       	brne	.-66     	; 0x640 <NWK_RouteFindEntry+0x14>
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret

00000690 <NWK_RouteNewEntry>:
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	e4 eb       	ldi	r30, 0xB4	; 180
     696:	f3 e0       	ldi	r31, 0x03	; 3
     698:	20 e7       	ldi	r18, 0x70	; 112
     69a:	36 e0       	ldi	r19, 0x06	; 6
     69c:	c0 e0       	ldi	r28, 0x00	; 0
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	df 01       	movw	r26, r30
     6a2:	15 97       	sbiw	r26, 0x05	; 5
     6a4:	8c 91       	ld	r24, X
     6a6:	80 fd       	sbrc	r24, 0
     6a8:	0b c0       	rjmp	.+22     	; 0x6c0 <NWK_RouteNewEntry+0x30>
     6aa:	80 81       	ld	r24, Z
     6ac:	88 23       	and	r24, r24
     6ae:	69 f0       	breq	.+26     	; 0x6ca <NWK_RouteNewEntry+0x3a>
     6b0:	20 97       	sbiw	r28, 0x00	; 0
     6b2:	29 f0       	breq	.+10     	; 0x6be <NWK_RouteNewEntry+0x2e>
     6b4:	9d 81       	ldd	r25, Y+5	; 0x05
     6b6:	89 17       	cp	r24, r25
     6b8:	18 f4       	brcc	.+6      	; 0x6c0 <NWK_RouteNewEntry+0x30>
     6ba:	ed 01       	movw	r28, r26
     6bc:	01 c0       	rjmp	.+2      	; 0x6c0 <NWK_RouteNewEntry+0x30>
     6be:	ed 01       	movw	r28, r26
     6c0:	37 96       	adiw	r30, 0x07	; 7
     6c2:	e2 17       	cp	r30, r18
     6c4:	f3 07       	cpc	r31, r19
     6c6:	61 f7       	brne	.-40     	; 0x6a0 <NWK_RouteNewEntry+0x10>
     6c8:	de 01       	movw	r26, r28
     6ca:	8c 91       	ld	r24, X
     6cc:	8d 70       	andi	r24, 0x0D	; 13
     6ce:	80 63       	ori	r24, 0x30	; 48
     6d0:	8c 93       	st	X, r24
     6d2:	80 e8       	ldi	r24, 0x80	; 128
     6d4:	15 96       	adiw	r26, 0x05	; 5
     6d6:	8c 93       	st	X, r24
     6d8:	15 97       	sbiw	r26, 0x05	; 5
     6da:	cd 01       	movw	r24, r26
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <NWK_RouteFreeEntry>:
     6e2:	fc 01       	movw	r30, r24
     6e4:	80 81       	ld	r24, Z
     6e6:	80 fd       	sbrc	r24, 0
     6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <NWK_RouteFreeEntry+0x12>
     6ea:	8f ef       	ldi	r24, 0xFF	; 255
     6ec:	9f ef       	ldi	r25, 0xFF	; 255
     6ee:	92 83       	std	Z+2, r25	; 0x02
     6f0:	81 83       	std	Z+1, r24	; 0x01
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	08 95       	ret

000006f6 <NWK_RouteNextHop>:
     6f6:	9a df       	rcall	.-204    	; 0x62c <NWK_RouteFindEntry>
     6f8:	00 97       	sbiw	r24, 0x00	; 0
     6fa:	21 f0       	breq	.+8      	; 0x704 <NWK_RouteNextHop+0xe>
     6fc:	fc 01       	movw	r30, r24
     6fe:	83 81       	ldd	r24, Z+3	; 0x03
     700:	94 81       	ldd	r25, Z+4	; 0x04
     702:	08 95       	ret
     704:	8f ef       	ldi	r24, 0xFF	; 255
     706:	9f ef       	ldi	r25, 0xFF	; 255
     708:	08 95       	ret

0000070a <nwkRouteRemove>:
*****************************************************************************/
void nwkRouteRemove(uint16_t dst, uint8_t multicast)
{
  NWK_RouteTableEntry_t *entry;

  entry = NWK_RouteFindEntry(dst, multicast);
     70a:	90 df       	rcall	.-224    	; 0x62c <NWK_RouteFindEntry>
  if (entry)
     70c:	00 97       	sbiw	r24, 0x00	; 0
     70e:	09 f0       	breq	.+2      	; 0x712 <nwkRouteRemove+0x8>
    NWK_RouteFreeEntry(entry);
     710:	e8 cf       	rjmp	.-48     	; 0x6e2 <NWK_RouteFreeEntry>
     712:	08 95       	ret

00000714 <nwkRouteFrameReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameReceived(NwkFrame_t *frame)
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	fc 01       	movw	r30, r24
#ifndef NWK_ENABLE_ROUTE_DISCOVERY
  NwkFrameHeader_t *header = &frame->header;
  NWK_RouteTableEntry_t *entry;

  if ((header->macSrcAddr & NWK_ROUTE_NON_ROUTING) &&
     71e:	01 85       	ldd	r16, Z+9	; 0x09
     720:	12 85       	ldd	r17, Z+10	; 0x0a
     722:	11 23       	and	r17, r17
     724:	2c f4       	brge	.+10     	; 0x730 <nwkRouteFrameReceived+0x1c>
     726:	85 85       	ldd	r24, Z+13	; 0x0d
     728:	96 85       	ldd	r25, Z+14	; 0x0e
     72a:	08 17       	cp	r16, r24
     72c:	19 07       	cpc	r17, r25
     72e:	e1 f5       	brne	.+120    	; 0x7a8 <nwkRouteFrameReceived+0x94>
      (header->macSrcAddr != header->nwkSrcAddr))
    return;

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     730:	85 81       	ldd	r24, Z+5	; 0x05
     732:	96 81       	ldd	r25, Z+6	; 0x06
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	c1 f1       	breq	.+112    	; 0x7a8 <nwkRouteFrameReceived+0x94>
     738:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(header->nwkSrcAddr, false);
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	85 85       	ldd	r24, Z+13	; 0x0d
     73e:	96 85       	ldd	r25, Z+14	; 0x0e
     740:	75 df       	rcall	.-278    	; 0x62c <NWK_RouteFindEntry>
     742:	fc 01       	movw	r30, r24

  if (entry)
     744:	89 2b       	or	r24, r25
     746:	a1 f0       	breq	.+40     	; 0x770 <nwkRouteFrameReceived+0x5c>
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
     748:	8f 81       	ldd	r24, Y+7	; 0x07
     74a:	98 85       	ldd	r25, Y+8	; 0x08
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	f9 f4       	brne	.+62     	; 0x78e <nwkRouteFrameReceived+0x7a>
     750:	20 91 4d 07 	lds	r18, 0x074D	; 0x80074d <nwkIb>
     754:	30 91 4e 07 	lds	r19, 0x074E	; 0x80074e <nwkIb+0x1>
     758:	8f 85       	ldd	r24, Y+15	; 0x0f
     75a:	98 89       	ldd	r25, Y+16	; 0x10
     75c:	28 17       	cp	r18, r24
     75e:	39 07       	cpc	r19, r25
     760:	b1 f4       	brne	.+44     	; 0x78e <nwkRouteFrameReceived+0x7a>
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
    {
      entry->nextHopAddr = header->macSrcAddr;
     762:	14 83       	std	Z+4, r17	; 0x04
     764:	03 83       	std	Z+3, r16	; 0x03
      entry->score = NWK_ROUTE_DEFAULT_SCORE;
     766:	80 81       	ld	r24, Z
     768:	8f 70       	andi	r24, 0x0F	; 15
     76a:	80 63       	ori	r24, 0x30	; 48
     76c:	80 83       	st	Z, r24
     76e:	0a c0       	rjmp	.+20     	; 0x784 <nwkRouteFrameReceived+0x70>
    }
  }
  else
  {
    entry = NWK_RouteNewEntry();
     770:	8f df       	rcall	.-226    	; 0x690 <NWK_RouteNewEntry>
     772:	fc 01       	movw	r30, r24

    entry->dstAddr = header->nwkSrcAddr;
     774:	8d 85       	ldd	r24, Y+13	; 0x0d
     776:	9e 85       	ldd	r25, Y+14	; 0x0e
     778:	92 83       	std	Z+2, r25	; 0x02
     77a:	81 83       	std	Z+1, r24	; 0x01
    entry->nextHopAddr = header->macSrcAddr;
     77c:	89 85       	ldd	r24, Y+9	; 0x09
     77e:	9a 85       	ldd	r25, Y+10	; 0x0a
     780:	94 83       	std	Z+4, r25	; 0x04
     782:	83 83       	std	Z+3, r24	; 0x03
  }

  entry->lqi = frame->rx.lqi;
     784:	cd 57       	subi	r28, 0x7D	; 125
     786:	df 4f       	sbci	r29, 0xFF	; 255
     788:	88 81       	ld	r24, Y
     78a:	86 83       	std	Z+6, r24	; 0x06
     78c:	0d c0       	rjmp	.+26     	; 0x7a8 <nwkRouteFrameReceived+0x94>
  if (entry)
  {
    bool discovery = (NWK_BROADCAST_ADDR == header->macDstAddr &&
        nwkIb.addr == header->nwkDstAddr);

    if ((entry->nextHopAddr != header->macSrcAddr && frame->rx.lqi > entry->lqi) || discovery)
     78e:	83 81       	ldd	r24, Z+3	; 0x03
     790:	94 81       	ldd	r25, Z+4	; 0x04
     792:	08 17       	cp	r16, r24
     794:	19 07       	cpc	r17, r25
     796:	b1 f3       	breq	.-20     	; 0x784 <nwkRouteFrameReceived+0x70>
     798:	de 01       	movw	r26, r28
     79a:	ad 57       	subi	r26, 0x7D	; 125
     79c:	bf 4f       	sbci	r27, 0xFF	; 255
     79e:	9c 91       	ld	r25, X
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	89 17       	cp	r24, r25
     7a4:	f0 f2       	brcs	.-68     	; 0x762 <nwkRouteFrameReceived+0x4e>
     7a6:	ee cf       	rjmp	.-36     	; 0x784 <nwkRouteFrameReceived+0x70>

  entry->lqi = frame->rx.lqi;
#else
  (void)frame;
#endif
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <nwkRouteFrameSent>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrameSent(NwkFrame_t *frame)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	fc 01       	movw	r30, r24
  NWK_RouteTableEntry_t *entry;

  if (NWK_BROADCAST_ADDR == frame->header.nwkDstAddr)
     7b8:	87 85       	ldd	r24, Z+15	; 0x0f
     7ba:	90 89       	ldd	r25, Z+16	; 0x10
     7bc:	8f 3f       	cpi	r24, 0xFF	; 255
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	92 07       	cpc	r25, r18
     7c2:	d9 f1       	breq	.+118    	; 0x83a <nwkRouteFrameSent+0x88>
     7c4:	ef 01       	movw	r28, r30
    return;

  entry = NWK_RouteFindEntry(frame->header.nwkDstAddr, frame->header.nwkFcf.multicast);
     7c6:	63 85       	ldd	r22, Z+11	; 0x0b
     7c8:	63 fb       	bst	r22, 3
     7ca:	66 27       	eor	r22, r22
     7cc:	60 f9       	bld	r22, 0
     7ce:	2e df       	rcall	.-420    	; 0x62c <NWK_RouteFindEntry>
     7d0:	dc 01       	movw	r26, r24

  if (NULL == entry || entry->fixed)
     7d2:	89 2b       	or	r24, r25
     7d4:	91 f1       	breq	.+100    	; 0x83a <nwkRouteFrameSent+0x88>
     7d6:	8c 91       	ld	r24, X
     7d8:	80 fd       	sbrc	r24, 0
     7da:	2f c0       	rjmp	.+94     	; 0x83a <nwkRouteFrameSent+0x88>
    return;

  if (NWK_SUCCESS_STATUS == frame->tx.status)
     7dc:	fe 01       	movw	r30, r28
     7de:	ed 57       	subi	r30, 0x7D	; 125
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	80 81       	ld	r24, Z
     7e4:	81 11       	cpse	r24, r1
     7e6:	19 c0       	rjmp	.+50     	; 0x81a <nwkRouteFrameSent+0x68>
  {
    entry->score = NWK_ROUTE_DEFAULT_SCORE;
     7e8:	8c 91       	ld	r24, X
     7ea:	8f 70       	andi	r24, 0x0F	; 15
     7ec:	80 63       	ori	r24, 0x30	; 48
     7ee:	8c 93       	st	X, r24

    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
     7f0:	15 96       	adiw	r26, 0x05	; 5
     7f2:	8c 91       	ld	r24, X
     7f4:	15 97       	sbiw	r26, 0x05	; 5
     7f6:	8f 5f       	subi	r24, 0xFF	; 255
     7f8:	15 96       	adiw	r26, 0x05	; 5
     7fa:	8c 93       	st	X, r24
     7fc:	8f 3f       	cpi	r24, 0xFF	; 255
     7fe:	e9 f4       	brne	.+58     	; 0x83a <nwkRouteFrameSent+0x88>
     800:	e4 eb       	ldi	r30, 0xB4	; 180
     802:	f3 e0       	ldi	r31, 0x03	; 3
     804:	20 e7       	ldi	r18, 0x70	; 112
     806:	36 e0       	ldi	r19, 0x06	; 6
/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
    nwkRouteTable[i].rank = (nwkRouteTable[i].rank >> 1) + 1;
     808:	80 81       	ld	r24, Z
     80a:	86 95       	lsr	r24
     80c:	8f 5f       	subi	r24, 0xFF	; 255
     80e:	80 83       	st	Z, r24
     810:	37 96       	adiw	r30, 0x07	; 7

/*************************************************************************//**
*****************************************************************************/
static void nwkRouteNormalizeRanks(void)
{
  for (uint8_t i = 0; i < NWK_ROUTE_TABLE_SIZE; i++)
     812:	e2 17       	cp	r30, r18
     814:	f3 07       	cpc	r31, r19
     816:	c1 f7       	brne	.-16     	; 0x808 <nwkRouteFrameSent+0x56>
     818:	10 c0       	rjmp	.+32     	; 0x83a <nwkRouteFrameSent+0x88>
    if (NWK_ROUTE_MAX_RANK == ++entry->rank)
      nwkRouteNormalizeRanks();
  }
  else
  {
    if (0 == --entry->score)
     81a:	9c 91       	ld	r25, X
     81c:	89 2f       	mov	r24, r25
     81e:	82 95       	swap	r24
     820:	8f 70       	andi	r24, 0x0F	; 15
     822:	81 5f       	subi	r24, 0xF1	; 241
     824:	8f 70       	andi	r24, 0x0F	; 15
     826:	28 2f       	mov	r18, r24
     828:	22 95       	swap	r18
     82a:	20 7f       	andi	r18, 0xF0	; 240
     82c:	9f 70       	andi	r25, 0x0F	; 15
     82e:	92 2b       	or	r25, r18
     830:	9c 93       	st	X, r25
     832:	81 11       	cpse	r24, r1
     834:	02 c0       	rjmp	.+4      	; 0x83a <nwkRouteFrameSent+0x88>
      NWK_RouteFreeEntry(entry);
     836:	cd 01       	movw	r24, r26
     838:	54 df       	rcall	.-344    	; 0x6e2 <NWK_RouteFreeEntry>
  }
}
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	08 95       	ret

00000840 <nwkRoutePrepareTx>:

/*************************************************************************//**
*****************************************************************************/
void nwkRoutePrepareTx(NwkFrame_t *frame)
{
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr)
     846:	87 85       	ldd	r24, Z+15	; 0x0f
     848:	90 89       	ldd	r25, Z+16	; 0x10
     84a:	8f 3f       	cpi	r24, 0xFF	; 255
     84c:	2f ef       	ldi	r18, 0xFF	; 255
     84e:	92 07       	cpc	r25, r18
     850:	29 f4       	brne	.+10     	; 0x85c <nwkRoutePrepareTx+0x1c>
  {
    header->macDstAddr = NWK_BROADCAST_ADDR;
     852:	8f ef       	ldi	r24, 0xFF	; 255
     854:	9f ef       	ldi	r25, 0xFF	; 255
     856:	90 87       	std	Z+8, r25	; 0x08
     858:	87 83       	std	Z+7, r24	; 0x07
     85a:	0e c0       	rjmp	.+28     	; 0x878 <nwkRoutePrepareTx+0x38>
  }

  else if (header->nwkFcf.linkLocal)
     85c:	23 85       	ldd	r18, Z+11	; 0x0b
     85e:	22 ff       	sbrs	r18, 2
     860:	03 c0       	rjmp	.+6      	; 0x868 <nwkRoutePrepareTx+0x28>
  {
    header->macDstAddr = header->nwkDstAddr;
     862:	90 87       	std	Z+8, r25	; 0x08
     864:	87 83       	std	Z+7, r24	; 0x07
     866:	08 c0       	rjmp	.+16     	; 0x878 <nwkRoutePrepareTx+0x38>
     868:	ef 01       	movw	r28, r30
  }
#endif

  else
  {
    header->macDstAddr = NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast);
     86a:	63 85       	ldd	r22, Z+11	; 0x0b
     86c:	63 fb       	bst	r22, 3
     86e:	66 27       	eor	r22, r22
     870:	60 f9       	bld	r22, 0
     872:	41 df       	rcall	.-382    	; 0x6f6 <NWK_RouteNextHop>
     874:	98 87       	std	Y+8, r25	; 0x08
     876:	8f 83       	std	Y+7, r24	; 0x07
  #ifdef NWK_ENABLE_ROUTE_DISCOVERY
    if (NWK_ROUTE_UNKNOWN == header->macDstAddr)
      nwkRouteDiscoveryRequest(frame);
  #endif
  }
}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <nwkRouteFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkRouteFrame(NwkFrame_t *frame)
{
     87e:	af 92       	push	r10
     880:	bf 92       	push	r11
     882:	cf 92       	push	r12
     884:	df 92       	push	r13
     886:	ef 92       	push	r14
     888:	ff 92       	push	r15
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	ec 01       	movw	r28, r24
  NwkFrameHeader_t *header = &frame->header;

  if (NWK_ROUTE_UNKNOWN != NWK_RouteNextHop(header->nwkDstAddr, header->nwkFcf.multicast))
     892:	1b 85       	ldd	r17, Y+11	; 0x0b
     894:	13 fb       	bst	r17, 3
     896:	11 27       	eor	r17, r17
     898:	10 f9       	bld	r17, 0
     89a:	cf 84       	ldd	r12, Y+15	; 0x0f
     89c:	d8 88       	ldd	r13, Y+16	; 0x10
     89e:	61 2f       	mov	r22, r17
     8a0:	c6 01       	movw	r24, r12
     8a2:	29 df       	rcall	.-430    	; 0x6f6 <NWK_RouteNextHop>
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	59 f0       	breq	.+22     	; 0x8be <nwkRouteFrame+0x40>
  {
    frame->tx.confirm = NULL;
     8a8:	fe 01       	movw	r30, r28
     8aa:	e9 57       	subi	r30, 0x79	; 121
     8ac:	ff 4f       	sbci	r31, 0xFF	; 255
     8ae:	11 82       	std	Z+1, r1	; 0x01
     8b0:	10 82       	st	Z, r1
    frame->tx.control = NWK_TX_CONTROL_ROUTING;
     8b2:	31 97       	sbiw	r30, 0x01	; 1
     8b4:	82 e0       	ldi	r24, 0x02	; 2
     8b6:	80 83       	st	Z, r24
    nwkTxFrame(frame);
     8b8:	ce 01       	movw	r24, r28
     8ba:	77 d3       	rcall	.+1774   	; 0xfaa <nwkTxFrame>
     8bc:	22 c0       	rjmp	.+68     	; 0x902 <nwkRouteFrame+0x84>
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
     8be:	ad 84       	ldd	r10, Y+13	; 0x0d
     8c0:	be 84       	ldd	r11, Y+14	; 0x0e
static void nwkRouteSendRouteError(uint16_t src, uint16_t dst, uint8_t multicast)
{
  NwkFrame_t *frame;
  NwkCommandRouteError_t *command;

  if (NULL == (frame = nwkFrameAlloc()))
     8c2:	1f de       	rcall	.-962    	; 0x502 <nwkFrameAlloc>
     8c4:	7c 01       	movw	r14, r24
     8c6:	00 97       	sbiw	r24, 0x00	; 0
     8c8:	d1 f0       	breq	.+52     	; 0x8fe <nwkRouteFrame+0x80>
    return;

  nwkFrameCommandInit(frame);
     8ca:	7d de       	rcall	.-774    	; 0x5c6 <nwkFrameCommandInit>

  frame->size += sizeof(NwkCommandRouteError_t);
     8cc:	f7 01       	movw	r30, r14
     8ce:	81 81       	ldd	r24, Z+1	; 0x01
     8d0:	8a 5f       	subi	r24, 0xFA	; 250
     8d2:	81 83       	std	Z+1, r24	; 0x01
  frame->tx.confirm = NULL;
     8d4:	e9 57       	subi	r30, 0x79	; 121
     8d6:	ff 4f       	sbci	r31, 0xFF	; 255
     8d8:	11 82       	std	Z+1, r1	; 0x01
     8da:	10 82       	st	Z, r1

  frame->header.nwkDstAddr = src;
     8dc:	f7 01       	movw	r30, r14
     8de:	b0 8a       	std	Z+16, r11	; 0x10
     8e0:	a7 86       	std	Z+15, r10	; 0x0f

  command = (NwkCommandRouteError_t *)frame->payload;
     8e2:	ef 57       	subi	r30, 0x7F	; 127
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ROUTE_ERROR;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 83       	st	Z, r24
  command->srcAddr = src;
     8f0:	b2 82       	std	Z+2, r11	; 0x02
     8f2:	a1 82       	std	Z+1, r10	; 0x01
  command->dstAddr = dst;
     8f4:	d4 82       	std	Z+4, r13	; 0x04
     8f6:	c3 82       	std	Z+3, r12	; 0x03
  command->multicast = multicast;
     8f8:	15 83       	std	Z+5, r17	; 0x05

  nwkTxFrame(frame);
     8fa:	c7 01       	movw	r24, r14
     8fc:	56 d3       	rcall	.+1708   	; 0xfaa <nwkTxFrame>
    nwkTxFrame(frame);
  }
  else
  {
    nwkRouteSendRouteError(header->nwkSrcAddr, header->nwkDstAddr, header->nwkFcf.multicast);
    nwkFrameFree(frame);
     8fe:	ce 01       	movw	r24, r28
     900:	36 de       	rcall	.-916    	; 0x56e <nwkFrameFree>
  }
}
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	ff 90       	pop	r15
     90a:	ef 90       	pop	r14
     90c:	df 90       	pop	r13
     90e:	cf 90       	pop	r12
     910:	bf 90       	pop	r11
     912:	af 90       	pop	r10
     914:	08 95       	ret

00000916 <nwkRouteErrorReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;
     916:	dc 01       	movw	r26, r24
     918:	17 96       	adiw	r26, 0x07	; 7
     91a:	ed 91       	ld	r30, X+
     91c:	fc 91       	ld	r31, X
     91e:	18 97       	sbiw	r26, 0x08	; 8

  if (sizeof(NwkCommandRouteError_t) != ind->size)
     920:	19 96       	adiw	r26, 0x09	; 9
     922:	8c 91       	ld	r24, X
     924:	86 30       	cpi	r24, 0x06	; 6
     926:	31 f4       	brne	.+12     	; 0x934 <nwkRouteErrorReceived+0x1e>
    return false;

  nwkRouteRemove(command->dstAddr, command->multicast);
     928:	65 81       	ldd	r22, Z+5	; 0x05
     92a:	83 81       	ldd	r24, Z+3	; 0x03
     92c:	94 81       	ldd	r25, Z+4	; 0x04
     92e:	ed de       	rcall	.-550    	; 0x70a <nwkRouteRemove>

  return true;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	08 95       	ret
bool nwkRouteErrorReceived(NWK_DataInd_t *ind)
{
  NwkCommandRouteError_t *command = (NwkCommandRouteError_t *)ind->data;

  if (sizeof(NwkCommandRouteError_t) != ind->size)
    return false;
     934:	80 e0       	ldi	r24, 0x00	; 0

  nwkRouteRemove(command->dstAddr, command->multicast);

  return true;
}
     936:	08 95       	ret

00000938 <nwkRxServiceDataInd>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
     938:	dc 01       	movw	r26, r24
     93a:	19 96       	adiw	r26, 0x09	; 9
     93c:	2c 91       	ld	r18, X
     93e:	19 97       	sbiw	r26, 0x09	; 9
     940:	22 23       	and	r18, r18
     942:	71 f0       	breq	.+28     	; 0x960 <nwkRxServiceDataInd+0x28>
     944:	17 96       	adiw	r26, 0x07	; 7
     946:	ed 91       	ld	r30, X+
     948:	fc 91       	ld	r31, X
     94a:	18 97       	sbiw	r26, 0x08	; 8
     94c:	20 81       	ld	r18, Z
     94e:	22 23       	and	r18, r18
     950:	19 f0       	breq	.+6      	; 0x958 <nwkRxServiceDataInd+0x20>
     952:	21 30       	cpi	r18, 0x01	; 1
     954:	19 f0       	breq	.+6      	; 0x95c <nwkRxServiceDataInd+0x24>
     956:	06 c0       	rjmp	.+12     	; 0x964 <nwkRxServiceDataInd+0x2c>
     958:	b9 c3       	rjmp	.+1906   	; 0x10cc <nwkTxAckReceived>
     95a:	08 95       	ret
     95c:	dc cf       	rjmp	.-72     	; 0x916 <nwkRouteErrorReceived>
     95e:	08 95       	ret
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	08 95       	ret
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	08 95       	ret

00000968 <nwkRxDuplicateRejectionTimerHandler>:
     968:	bc 01       	movw	r22, r24
     96a:	ed e7       	ldi	r30, 0x7D	; 125
     96c:	f6 e0       	ldi	r31, 0x06	; 6
     96e:	2f ea       	ldi	r18, 0xAF	; 175
     970:	36 e0       	ldi	r19, 0x06	; 6
     972:	40 e0       	ldi	r20, 0x00	; 0
     974:	51 e0       	ldi	r21, 0x01	; 1
     976:	90 81       	ld	r25, Z
     978:	99 23       	and	r25, r25
     97a:	19 f0       	breq	.+6      	; 0x982 <nwkRxDuplicateRejectionTimerHandler+0x1a>
     97c:	91 50       	subi	r25, 0x01	; 1
     97e:	90 83       	st	Z, r25
     980:	45 2f       	mov	r20, r21
     982:	35 96       	adiw	r30, 0x05	; 5
     984:	e2 17       	cp	r30, r18
     986:	f3 07       	cpc	r31, r19
     988:	b1 f7       	brne	.-20     	; 0x976 <nwkRxDuplicateRejectionTimerHandler+0xe>
     98a:	44 23       	and	r20, r20
     98c:	11 f0       	breq	.+4      	; 0x992 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     98e:	cb 01       	movw	r24, r22
     990:	e8 c5       	rjmp	.+3024   	; 0x1562 <SYS_TimerStart>
     992:	08 95       	ret

00000994 <nwkRxInit>:
     994:	ed e7       	ldi	r30, 0x7D	; 125
     996:	f6 e0       	ldi	r31, 0x06	; 6
     998:	8f ea       	ldi	r24, 0xAF	; 175
     99a:	96 e0       	ldi	r25, 0x06	; 6
     99c:	10 82       	st	Z, r1
     99e:	35 96       	adiw	r30, 0x05	; 5
     9a0:	e8 17       	cp	r30, r24
     9a2:	f9 07       	cpc	r31, r25
     9a4:	d9 f7       	brne	.-10     	; 0x99c <nwkRxInit+0x8>
     9a6:	eb e6       	ldi	r30, 0x6B	; 107
     9a8:	f6 e0       	ldi	r31, 0x06	; 6
     9aa:	84 e6       	ldi	r24, 0x64	; 100
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	86 83       	std	Z+6, r24	; 0x06
     9b4:	97 83       	std	Z+7, r25	; 0x07
     9b6:	a0 87       	std	Z+8, r26	; 0x08
     9b8:	b1 87       	std	Z+9, r27	; 0x09
     9ba:	12 86       	std	Z+10, r1	; 0x0a
     9bc:	84 eb       	ldi	r24, 0xB4	; 180
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	94 87       	std	Z+12, r25	; 0x0c
     9c2:	83 87       	std	Z+11, r24	; 0x0b
     9c4:	6c e9       	ldi	r22, 0x9C	; 156
     9c6:	74 e0       	ldi	r23, 0x04	; 4
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	bc cc       	rjmp	.-1672   	; 0x344 <NWK_OpenEndpoint>
     9cc:	08 95       	ret

000009ce <PHY_DataInd>:
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	dc 01       	movw	r26, r24
     9d4:	ed 91       	ld	r30, X+
     9d6:	fc 91       	ld	r31, X
     9d8:	11 97       	sbiw	r26, 0x01	; 1
     9da:	21 81       	ldd	r18, Z+1	; 0x01
     9dc:	28 38       	cpi	r18, 0x88	; 136
     9de:	f1 f4       	brne	.+60     	; 0xa1c <PHY_DataInd+0x4e>
     9e0:	20 81       	ld	r18, Z
     9e2:	2f 7d       	andi	r18, 0xDF	; 223
     9e4:	21 34       	cpi	r18, 0x41	; 65
     9e6:	d1 f4       	brne	.+52     	; 0xa1c <PHY_DataInd+0x4e>
     9e8:	12 96       	adiw	r26, 0x02	; 2
     9ea:	2c 91       	ld	r18, X
     9ec:	20 31       	cpi	r18, 0x10	; 16
     9ee:	b0 f0       	brcs	.+44     	; 0xa1c <PHY_DataInd+0x4e>
     9f0:	ec 01       	movw	r28, r24
     9f2:	87 dd       	rcall	.-1266   	; 0x502 <nwkFrameAlloc>
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	91 f0       	breq	.+36     	; 0xa1c <PHY_DataInd+0x4e>
     9f8:	20 e2       	ldi	r18, 0x20	; 32
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	2a 81       	ldd	r18, Y+2	; 0x02
     a00:	21 83       	std	Z+1, r18	; 0x01
     a02:	2b 81       	ldd	r18, Y+3	; 0x03
     a04:	ed 57       	subi	r30, 0x7D	; 125
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	20 83       	st	Z, r18
     a0a:	2c 81       	ldd	r18, Y+4	; 0x04
     a0c:	31 96       	adiw	r30, 0x01	; 1
     a0e:	20 83       	st	Z, r18
     a10:	4a 81       	ldd	r20, Y+2	; 0x02
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	68 81       	ld	r22, Y
     a16:	79 81       	ldd	r23, Y+1	; 0x01
     a18:	02 96       	adiw	r24, 0x02	; 2
     a1a:	ac d6       	rcall	.+3416   	; 0x1774 <memcpy>
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	08 95       	ret

00000a22 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     a22:	2f 92       	push	r2
     a24:	3f 92       	push	r3
     a26:	4f 92       	push	r4
     a28:	5f 92       	push	r5
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	2e 97       	sbiw	r28, 0x0e	; 14
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	f8 94       	cli
     a50:	de bf       	out	0x3e, r29	; 62
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     a56:	00 e0       	ldi	r16, 0x00	; 0
     a58:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     a5a:	0f 2e       	mov	r0, r31
     a5c:	f4 e2       	ldi	r31, 0x24	; 36
     a5e:	df 2e       	mov	r13, r31
     a60:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     a62:	0f 2e       	mov	r0, r31
     a64:	fd e4       	ldi	r31, 0x4D	; 77
     a66:	8f 2e       	mov	r8, r31
     a68:	f7 e0       	ldi	r31, 0x07	; 7
     a6a:	9f 2e       	mov	r9, r31
     a6c:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     a6e:	68 94       	set
     a70:	cc 24       	eor	r12, r12
     a72:	c4 f8       	bld	r12, 4
     a74:	0f 2e       	mov	r0, r31
     a76:	fd e7       	ldi	r31, 0x7D	; 125
     a78:	4f 2e       	mov	r4, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	5f 2e       	mov	r5, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	0f 2e       	mov	r0, r31
     a82:	f9 e7       	ldi	r31, 0x79	; 121
     a84:	6f 2e       	mov	r6, r31
     a86:	f6 e0       	ldi	r31, 0x06	; 6
     a88:	7f 2e       	mov	r7, r31
     a8a:	f0 2d       	mov	r31, r0
     a8c:	0f 2e       	mov	r0, r31
     a8e:	fb ea       	ldi	r31, 0xAB	; 171
     a90:	ef 2e       	mov	r14, r31
     a92:	f6 e0       	ldi	r31, 0x06	; 6
     a94:	ff 2e       	mov	r15, r31
     a96:	f0 2d       	mov	r31, r0

  if (nwkIb.addr == header->nwkSrcAddr)
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     a98:	31 2c       	mov	r3, r1
     a9a:	21 2c       	mov	r2, r1
     a9c:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     a9e:	dd c1       	rjmp	.+954    	; 0xe5a <nwkRxTaskHandler+0x438>
  {
    switch (frame->state)
     aa0:	d5 01       	movw	r26, r10
     aa2:	8c 91       	ld	r24, X
     aa4:	82 32       	cpi	r24, 0x22	; 34
     aa6:	09 f4       	brne	.+2      	; 0xaaa <nwkRxTaskHandler+0x88>
     aa8:	07 c1       	rjmp	.+526    	; 0xcb8 <nwkRxTaskHandler+0x296>
     aaa:	18 f4       	brcc	.+6      	; 0xab2 <nwkRxTaskHandler+0x90>
     aac:	80 32       	cpi	r24, 0x20	; 32
     aae:	41 f0       	breq	.+16     	; 0xac0 <nwkRxTaskHandler+0x9e>
     ab0:	d4 c1       	rjmp	.+936    	; 0xe5a <nwkRxTaskHandler+0x438>
     ab2:	83 32       	cpi	r24, 0x23	; 35
     ab4:	09 f4       	brne	.+2      	; 0xab8 <nwkRxTaskHandler+0x96>
     ab6:	cc c1       	rjmp	.+920    	; 0xe50 <nwkRxTaskHandler+0x42e>
     ab8:	84 32       	cpi	r24, 0x24	; 36
     aba:	09 f4       	brne	.+2      	; 0xabe <nwkRxTaskHandler+0x9c>
     abc:	cc c1       	rjmp	.+920    	; 0xe56 <nwkRxTaskHandler+0x434>
     abe:	cd c1       	rjmp	.+922    	; 0xe5a <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     ac0:	f5 01       	movw	r30, r10
     ac2:	d0 82       	st	Z, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     ac4:	83 85       	ldd	r24, Z+11	; 0x0b
     ac6:	98 2f       	mov	r25, r24
     ac8:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     aca:	09 f0       	breq	.+2      	; 0xace <nwkRxTaskHandler+0xac>
     acc:	c6 c1       	rjmp	.+908    	; 0xe5a <nwkRxTaskHandler+0x438>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     ace:	25 81       	ldd	r18, Z+5	; 0x05
     ad0:	36 81       	ldd	r19, Z+6	; 0x06
     ad2:	2f 3f       	cpi	r18, 0xFF	; 255
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	91 f4       	brne	.+36     	; 0xafc <nwkRxTaskHandler+0xda>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     ad8:	d5 01       	movw	r26, r10
     ada:	1f 96       	adiw	r26, 0x0f	; 15
     adc:	8d 91       	ld	r24, X+
     ade:	9c 91       	ld	r25, X
     ae0:	50 97       	sbiw	r26, 0x10	; 16
     ae2:	f4 01       	movw	r30, r8
     ae4:	20 81       	ld	r18, Z
     ae6:	31 81       	ldd	r19, Z+1	; 0x01
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	19 f0       	breq	.+6      	; 0xaf4 <nwkRxTaskHandler+0xd2>
     aee:	01 96       	adiw	r24, 0x01	; 1
     af0:	09 f0       	breq	.+2      	; 0xaf4 <nwkRxTaskHandler+0xd2>
     af2:	b3 c1       	rjmp	.+870    	; 0xe5a <nwkRxTaskHandler+0x438>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     af4:	e2 e2       	ldi	r30, 0x22	; 34
     af6:	d5 01       	movw	r26, r10
     af8:	ec 93       	st	X, r30
     afa:	af c1       	rjmp	.+862    	; 0xe5a <nwkRxTaskHandler+0x438>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     afc:	d5 01       	movw	r26, r10
     afe:	1f 96       	adiw	r26, 0x0f	; 15
     b00:	2d 91       	ld	r18, X+
     b02:	3c 91       	ld	r19, X
     b04:	50 97       	sbiw	r26, 0x10	; 16
     b06:	2f 3f       	cpi	r18, 0xFF	; 255
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	11 f4       	brne	.+4      	; 0xb10 <nwkRxTaskHandler+0xee>
     b0c:	80 fd       	sbrc	r24, 0
     b0e:	a5 c1       	rjmp	.+842    	; 0xe5a <nwkRxTaskHandler+0x438>
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     b10:	f4 01       	movw	r30, r8
     b12:	20 81       	ld	r18, Z
     b14:	31 81       	ldd	r19, Z+1	; 0x01
     b16:	d5 01       	movw	r26, r10
     b18:	1d 96       	adiw	r26, 0x0d	; 13
     b1a:	8d 91       	ld	r24, X+
     b1c:	9c 91       	ld	r25, X
     b1e:	1e 97       	sbiw	r26, 0x0e	; 14
     b20:	28 17       	cp	r18, r24
     b22:	39 07       	cpc	r19, r25
     b24:	09 f4       	brne	.+2      	; 0xb28 <nwkRxTaskHandler+0x106>
     b26:	99 c1       	rjmp	.+818    	; 0xe5a <nwkRxTaskHandler+0x438>
    return;

#ifdef NWK_ENABLE_ROUTING
  nwkRouteFrameReceived(frame);
     b28:	c5 01       	movw	r24, r10
     b2a:	f4 dd       	rcall	.-1048   	; 0x714 <nwkRouteFrameReceived>
     b2c:	f3 01       	movw	r30, r6
     b2e:	43 2d       	mov	r20, r3
     b30:	52 2d       	mov	r21, r2
/*************************************************************************//**
*****************************************************************************/
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;
     b32:	63 2d       	mov	r22, r3
     b34:	72 2d       	mov	r23, r2
     b36:	5e 86       	std	Y+14, r5	; 0x0e
     b38:	4d 86       	std	Y+13, r4	; 0x0d

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     b3a:	ad 85       	ldd	r26, Y+13	; 0x0d
     b3c:	be 85       	ldd	r27, Y+14	; 0x0e
     b3e:	8c 91       	ld	r24, X
     b40:	88 23       	and	r24, r24
     b42:	09 f4       	brne	.+2      	; 0xb46 <nwkRxTaskHandler+0x124>
     b44:	6c c0       	rjmp	.+216    	; 0xc1e <nwkRxTaskHandler+0x1fc>
     b46:	d5 01       	movw	r26, r10
     b48:	1d 96       	adiw	r26, 0x0d	; 13
     b4a:	2d 91       	ld	r18, X+
     b4c:	3c 91       	ld	r19, X
     b4e:	1e 97       	sbiw	r26, 0x0e	; 14
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	28 17       	cp	r18, r24
     b56:	39 07       	cpc	r19, r25
     b58:	09 f0       	breq	.+2      	; 0xb5c <nwkRxTaskHandler+0x13a>
     b5a:	62 c0       	rjmp	.+196    	; 0xc20 <nwkRxTaskHandler+0x1fe>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     b5c:	f5 01       	movw	r30, r10
     b5e:	94 85       	ldd	r25, Z+12	; 0x0c
     b60:	fa 01       	movw	r30, r20
     b62:	ee 0f       	add	r30, r30
     b64:	ff 1f       	adc	r31, r31
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	e4 0f       	add	r30, r20
     b6c:	f5 1f       	adc	r31, r21
     b6e:	e7 58       	subi	r30, 0x87	; 135
     b70:	f9 4f       	sbci	r31, 0xF9	; 249
     b72:	82 81       	ldd	r24, Z+2	; 0x02
     b74:	89 1b       	sub	r24, r25

      if (diff < 8)
     b76:	88 30       	cpi	r24, 0x08	; 8
     b78:	c8 f5       	brcc	.+114    	; 0xbec <nwkRxTaskHandler+0x1ca>
      {
        if (entry->mask & (1 << diff))
     b7a:	fa 01       	movw	r30, r20
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	e4 0f       	add	r30, r20
     b86:	f5 1f       	adc	r31, r21
     b88:	e7 58       	subi	r30, 0x87	; 135
     b8a:	f9 4f       	sbci	r31, 0xF9	; 249
     b8c:	93 81       	ldd	r25, Z+3	; 0x03
     b8e:	29 2f       	mov	r18, r25
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	08 2e       	mov	r0, r24
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <nwkRxTaskHandler+0x178>
     b96:	35 95       	asr	r19
     b98:	27 95       	ror	r18
     b9a:	0a 94       	dec	r0
     b9c:	e2 f7       	brpl	.-8      	; 0xb96 <nwkRxTaskHandler+0x174>
     b9e:	20 ff       	sbrs	r18, 0
     ba0:	12 c0       	rjmp	.+36     	; 0xbc6 <nwkRxTaskHandler+0x1a4>
        {
        #ifdef NWK_ENABLE_ROUTING
          if (nwkIb.addr == header->macDstAddr)
     ba2:	d4 01       	movw	r26, r8
     ba4:	2d 91       	ld	r18, X+
     ba6:	3c 91       	ld	r19, X
     ba8:	f5 01       	movw	r30, r10
     baa:	87 81       	ldd	r24, Z+7	; 0x07
     bac:	90 85       	ldd	r25, Z+8	; 0x08
     bae:	28 17       	cp	r18, r24
     bb0:	39 07       	cpc	r19, r25
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <nwkRxTaskHandler+0x194>
     bb4:	52 c1       	rjmp	.+676    	; 0xe5a <nwkRxTaskHandler+0x438>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
     bb6:	63 85       	ldd	r22, Z+11	; 0x0b
     bb8:	63 fb       	bst	r22, 3
     bba:	66 27       	eor	r22, r22
     bbc:	60 f9       	bld	r22, 0
     bbe:	87 85       	ldd	r24, Z+15	; 0x0f
     bc0:	90 89       	ldd	r25, Z+16	; 0x10
     bc2:	a3 dd       	rcall	.-1210   	; 0x70a <nwkRouteRemove>
     bc4:	4a c1       	rjmp	.+660    	; 0xe5a <nwkRxTaskHandler+0x438>
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     bc6:	fa 01       	movw	r30, r20
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	ee 0f       	add	r30, r30
     bce:	ff 1f       	adc	r31, r31
     bd0:	e4 0f       	add	r30, r20
     bd2:	f5 1f       	adc	r31, r21
     bd4:	e7 58       	subi	r30, 0x87	; 135
     bd6:	f9 4f       	sbci	r31, 0xF9	; 249
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <nwkRxTaskHandler+0x1c0>
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	8a 95       	dec	r24
     be4:	e2 f7       	brpl	.-8      	; 0xbde <nwkRxTaskHandler+0x1bc>
     be6:	92 2b       	or	r25, r18
     be8:	93 83       	std	Z+3, r25	; 0x03
     bea:	3e c1       	rjmp	.+636    	; 0xe68 <nwkRxTaskHandler+0x446>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     bec:	fa 01       	movw	r30, r20
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	ee 0f       	add	r30, r30
     bf4:	ff 1f       	adc	r31, r31
     bf6:	e4 0f       	add	r30, r20
     bf8:	f5 1f       	adc	r31, r21
     bfa:	e7 58       	subi	r30, 0x87	; 135
     bfc:	f9 4f       	sbci	r31, 0xF9	; 249
     bfe:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     c00:	23 81       	ldd	r18, Z+3	; 0x03
     c02:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     c04:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     c06:	a9 01       	movw	r20, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <nwkRxTaskHandler+0x1ec>
     c0a:	44 0f       	add	r20, r20
     c0c:	55 1f       	adc	r21, r21
     c0e:	8a 95       	dec	r24
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <nwkRxTaskHandler+0x1e8>
     c12:	ca 01       	movw	r24, r20
     c14:	81 60       	ori	r24, 0x01	; 1
     c16:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     c18:	8f e1       	ldi	r24, 0x1F	; 31
     c1a:	84 83       	std	Z+4, r24	; 0x04
     c1c:	25 c1       	rjmp	.+586    	; 0xe68 <nwkRxTaskHandler+0x446>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     c1e:	bf 01       	movw	r22, r30
     c20:	4f 5f       	subi	r20, 0xFF	; 255
     c22:	5f 4f       	sbci	r21, 0xFF	; 255
     c24:	8d 85       	ldd	r24, Y+13	; 0x0d
     c26:	9e 85       	ldd	r25, Y+14	; 0x0e
     c28:	05 96       	adiw	r24, 0x05	; 5
     c2a:	9e 87       	std	Y+14, r25	; 0x0e
     c2c:	8d 87       	std	Y+13, r24	; 0x0d
     c2e:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     c30:	ee 15       	cp	r30, r14
     c32:	ff 05       	cpc	r31, r15
     c34:	09 f0       	breq	.+2      	; 0xc38 <nwkRxTaskHandler+0x216>
     c36:	81 cf       	rjmp	.-254    	; 0xb3a <nwkRxTaskHandler+0x118>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     c38:	61 15       	cp	r22, r1
     c3a:	71 05       	cpc	r23, r1
     c3c:	09 f4       	brne	.+2      	; 0xc40 <nwkRxTaskHandler+0x21e>
     c3e:	0d c1       	rjmp	.+538    	; 0xe5a <nwkRxTaskHandler+0x438>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     c40:	d5 01       	movw	r26, r10
     c42:	1d 96       	adiw	r26, 0x0d	; 13
     c44:	8d 91       	ld	r24, X+
     c46:	9c 91       	ld	r25, X
     c48:	1e 97       	sbiw	r26, 0x0e	; 14
     c4a:	fb 01       	movw	r30, r22
     c4c:	91 83       	std	Z+1, r25	; 0x01
     c4e:	80 83       	st	Z, r24
  freeEntry->seq = header->nwkSeq;
     c50:	1c 96       	adiw	r26, 0x0c	; 12
     c52:	8c 91       	ld	r24, X
     c54:	82 83       	std	Z+2, r24	; 0x02
  freeEntry->mask = 1;
     c56:	21 e0       	ldi	r18, 0x01	; 1
     c58:	23 83       	std	Z+3, r18	; 0x03
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     c5a:	8f e1       	ldi	r24, 0x1F	; 31
     c5c:	84 83       	std	Z+4, r24	; 0x04

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     c5e:	8b e6       	ldi	r24, 0x6B	; 107
     c60:	96 e0       	ldi	r25, 0x06	; 6
     c62:	7f d4       	rcall	.+2302   	; 0x1562 <SYS_TimerStart>
     c64:	01 c1       	rjmp	.+514    	; 0xe68 <nwkRxTaskHandler+0x446>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     c66:	d4 01       	movw	r26, r8
     c68:	2d 91       	ld	r18, X+
     c6a:	3c 91       	ld	r19, X
     c6c:	f5 01       	movw	r30, r10
     c6e:	87 85       	ldd	r24, Z+15	; 0x0f
     c70:	90 89       	ldd	r25, Z+16	; 0x10
     c72:	28 17       	cp	r18, r24
     c74:	39 07       	cpc	r19, r25
     c76:	81 f0       	breq	.+32     	; 0xc98 <nwkRxTaskHandler+0x276>
        0 == header->nwkFcf.linkLocal)
     c78:	43 85       	ldd	r20, Z+11	; 0x0b
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     c7a:	42 fd       	sbrc	r20, 2
     c7c:	0b c0       	rjmp	.+22     	; 0xc94 <nwkRxTaskHandler+0x272>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     c7e:	c5 01       	movw	r24, r10
     c80:	e2 d1       	rcall	.+964    	; 0x1046 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c82:	d4 01       	movw	r26, r8
     c84:	2d 91       	ld	r18, X+
     c86:	3c 91       	ld	r19, X
     c88:	f5 01       	movw	r30, r10
     c8a:	87 85       	ldd	r24, Z+15	; 0x0f
     c8c:	90 89       	ldd	r25, Z+16	; 0x10
     c8e:	28 17       	cp	r18, r24
     c90:	39 07       	cpc	r19, r25
     c92:	11 f0       	breq	.+4      	; 0xc98 <nwkRxTaskHandler+0x276>
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	21 f4       	brne	.+8      	; 0xca0 <nwkRxTaskHandler+0x27e>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     c98:	e2 e2       	ldi	r30, 0x22	; 34
     c9a:	d5 01       	movw	r26, r10
     c9c:	ec 93       	st	X, r30
     c9e:	dd c0       	rjmp	.+442    	; 0xe5a <nwkRxTaskHandler+0x438>
    }

  #ifdef NWK_ENABLE_ROUTING
    else if (nwkIb.addr == header->macDstAddr)
     ca0:	d5 01       	movw	r26, r10
     ca2:	17 96       	adiw	r26, 0x07	; 7
     ca4:	8d 91       	ld	r24, X+
     ca6:	9c 91       	ld	r25, X
     ca8:	18 97       	sbiw	r26, 0x08	; 8
     caa:	28 17       	cp	r18, r24
     cac:	39 07       	cpc	r19, r25
     cae:	09 f0       	breq	.+2      	; 0xcb2 <nwkRxTaskHandler+0x290>
     cb0:	d4 c0       	rjmp	.+424    	; 0xe5a <nwkRxTaskHandler+0x438>
    {
      frame->state = NWK_RX_STATE_ROUTE;
     cb2:	83 e2       	ldi	r24, 0x23	; 35
     cb4:	8c 93       	st	X, r24
     cb6:	d1 c0       	rjmp	.+418    	; 0xe5a <nwkRxTaskHandler+0x438>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     cb8:	10 92 78 06 	sts	0x0678, r1	; 0x800678 <nwkRxAckControl>
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     cbc:	f5 01       	movw	r30, r10
     cbe:	21 89       	ldd	r18, Z+17	; 0x11
     cc0:	22 95       	swap	r18
     cc2:	2f 70       	andi	r18, 0x0F	; 15
     cc4:	e2 2f       	mov	r30, r18
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	ed 5a       	subi	r30, 0xAD	; 173
     cce:	f8 4f       	sbci	r31, 0xF8	; 248
     cd0:	01 90       	ld	r0, Z+
     cd2:	f0 81       	ld	r31, Z
     cd4:	e0 2d       	mov	r30, r0
     cd6:	30 97       	sbiw	r30, 0x00	; 0
     cd8:	09 f4       	brne	.+2      	; 0xcdc <nwkRxTaskHandler+0x2ba>
     cda:	63 c0       	rjmp	.+198    	; 0xda2 <nwkRxTaskHandler+0x380>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     cdc:	d5 01       	movw	r26, r10
     cde:	1d 96       	adiw	r26, 0x0d	; 13
     ce0:	8d 91       	ld	r24, X+
     ce2:	9c 91       	ld	r25, X
     ce4:	1e 97       	sbiw	r26, 0x0e	; 14
     ce6:	9a 83       	std	Y+2, r25	; 0x02
     ce8:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     cea:	1f 96       	adiw	r26, 0x0f	; 15
     cec:	4d 91       	ld	r20, X+
     cee:	5c 91       	ld	r21, X
     cf0:	50 97       	sbiw	r26, 0x10	; 16
     cf2:	5c 83       	std	Y+4, r21	; 0x04
     cf4:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     cf6:	51 96       	adiw	r26, 0x11	; 17
     cf8:	3c 91       	ld	r19, X
     cfa:	51 97       	sbiw	r26, 0x11	; 17
     cfc:	3f 70       	andi	r19, 0x0F	; 15
     cfe:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     d00:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     d02:	af 57       	subi	r26, 0x7F	; 127
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	6d 91       	ld	r22, X+
     d08:	7c 91       	ld	r23, X
     d0a:	79 87       	std	Y+9, r23	; 0x09
     d0c:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     d0e:	95 01       	movw	r18, r10
     d10:	2e 5f       	subi	r18, 0xFE	; 254
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	26 1b       	sub	r18, r22
     d16:	37 0b       	sbc	r19, r23
     d18:	d5 01       	movw	r26, r10
     d1a:	11 96       	adiw	r26, 0x01	; 1
     d1c:	3c 91       	ld	r19, X
     d1e:	11 97       	sbiw	r26, 0x01	; 1
     d20:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     d22:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     d24:	ad 57       	subi	r26, 0x7D	; 125
     d26:	bf 4f       	sbci	r27, 0xFF	; 255
     d28:	2c 91       	ld	r18, X
     d2a:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	2c 91       	ld	r18, X
     d30:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     d32:	d5 01       	movw	r26, r10
     d34:	1b 96       	adiw	r26, 0x0b	; 11
     d36:	2c 91       	ld	r18, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     d38:	62 2f       	mov	r22, r18
     d3a:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     d3c:	22 fd       	sbrc	r18, 2
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <nwkRxTaskHandler+0x322>
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	01 c0       	rjmp	.+2      	; 0xd46 <nwkRxTaskHandler+0x324>
     d44:	30 e2       	ldi	r19, 0x20	; 32
     d46:	63 2b       	or	r22, r19
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     d48:	23 fd       	sbrc	r18, 3
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <nwkRxTaskHandler+0x32e>
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	01 c0       	rjmp	.+2      	; 0xd52 <nwkRxTaskHandler+0x330>
     d50:	30 e4       	ldi	r19, 0x40	; 64
     d52:	26 2f       	mov	r18, r22
     d54:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     d56:	4f 3f       	cpi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	11 f0       	breq	.+4      	; 0xd60 <nwkRxTaskHandler+0x33e>
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <nwkRxTaskHandler+0x340>
     d60:	34 e0       	ldi	r19, 0x04	; 4
     d62:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     d64:	d5 01       	movw	r26, r10
     d66:	19 96       	adiw	r26, 0x09	; 9
     d68:	4d 91       	ld	r20, X+
     d6a:	5c 91       	ld	r21, X
     d6c:	1a 97       	sbiw	r26, 0x0a	; 10
     d6e:	84 17       	cp	r24, r20
     d70:	95 07       	cpc	r25, r21
     d72:	11 f0       	breq	.+4      	; 0xd78 <nwkRxTaskHandler+0x356>
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <nwkRxTaskHandler+0x358>
     d78:	98 e0       	ldi	r25, 0x08	; 8
     d7a:	82 2f       	mov	r24, r18
     d7c:	89 2b       	or	r24, r25
     d7e:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     d80:	d5 01       	movw	r26, r10
     d82:	15 96       	adiw	r26, 0x05	; 5
     d84:	2d 91       	ld	r18, X+
     d86:	3c 91       	ld	r19, X
     d88:	16 97       	sbiw	r26, 0x06	; 6
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	3f 4f       	sbci	r19, 0xFF	; 255
     d8e:	11 f0       	breq	.+4      	; 0xd94 <nwkRxTaskHandler+0x372>
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	01 c0       	rjmp	.+2      	; 0xd96 <nwkRxTaskHandler+0x374>
     d94:	9c 2d       	mov	r25, r12
     d96:	89 2b       	or	r24, r25
     d98:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	19 95       	eicall
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <nwkRxTaskHandler+0x382>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     da2:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     da4:	f5 01       	movw	r30, r10
     da6:	93 85       	ldd	r25, Z+11	; 0x0b
     da8:	90 ff       	sbrs	r25, 0
    ack = false;
     daa:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     dac:	d5 01       	movw	r26, r10
     dae:	17 96       	adiw	r26, 0x07	; 7
     db0:	2d 91       	ld	r18, X+
     db2:	3c 91       	ld	r19, X
     db4:	18 97       	sbiw	r26, 0x08	; 8
     db6:	2f 3f       	cpi	r18, 0xFF	; 255
     db8:	3f 4f       	sbci	r19, 0xFF	; 255
     dba:	69 f4       	brne	.+26     	; 0xdd6 <nwkRxTaskHandler+0x3b4>
     dbc:	f4 01       	movw	r30, r8
     dbe:	40 81       	ld	r20, Z
     dc0:	51 81       	ldd	r21, Z+1	; 0x01
     dc2:	d5 01       	movw	r26, r10
     dc4:	1f 96       	adiw	r26, 0x0f	; 15
     dc6:	2d 91       	ld	r18, X+
     dc8:	3c 91       	ld	r19, X
     dca:	50 97       	sbiw	r26, 0x10	; 16
     dcc:	42 17       	cp	r20, r18
     dce:	53 07       	cpc	r21, r19
     dd0:	11 f4       	brne	.+4      	; 0xdd6 <nwkRxTaskHandler+0x3b4>
      nwkIb.addr == frame->header.nwkDstAddr &&
     dd2:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     dd4:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     dd6:	f5 01       	movw	r30, r10
     dd8:	25 81       	ldd	r18, Z+5	; 0x05
     dda:	36 81       	ldd	r19, Z+6	; 0x06
     ddc:	2f 3f       	cpi	r18, 0xFF	; 255
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	a1 f1       	breq	.+104    	; 0xe4a <nwkRxTaskHandler+0x428>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     de2:	d4 01       	movw	r26, r8
     de4:	2d 91       	ld	r18, X+
     de6:	3c 91       	ld	r19, X
     de8:	2f 3f       	cpi	r18, 0xFF	; 255
     dea:	3f 4f       	sbci	r19, 0xFF	; 255
     dec:	71 f1       	breq	.+92     	; 0xe4a <nwkRxTaskHandler+0x428>
    ack = false;

  if (ack)
     dee:	88 23       	and	r24, r24
     df0:	61 f1       	breq	.+88     	; 0xe4a <nwkRxTaskHandler+0x428>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     df2:	87 db       	rcall	.-2290   	; 0x502 <nwkFrameAlloc>
     df4:	8c 01       	movw	r16, r24
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	41 f1       	breq	.+80     	; 0xe4a <nwkRxTaskHandler+0x428>
    return;

  nwkFrameCommandInit(ack);
     dfa:	e5 db       	rcall	.-2102   	; 0x5c6 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     dfc:	f8 01       	movw	r30, r16
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	8d 5f       	subi	r24, 0xFD	; 253
     e02:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     e04:	e9 57       	subi	r30, 0x79	; 121
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	11 82       	std	Z+1, r1	; 0x01
     e0a:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     e0c:	d5 01       	movw	r26, r10
     e0e:	1b 96       	adiw	r26, 0x0b	; 11
     e10:	8c 91       	ld	r24, X
     e12:	1b 97       	sbiw	r26, 0x0b	; 11
     e14:	86 95       	lsr	r24
     e16:	81 70       	andi	r24, 0x01	; 1
     e18:	f8 01       	movw	r30, r16
     e1a:	93 85       	ldd	r25, Z+11	; 0x0b
     e1c:	80 fb       	bst	r24, 0
     e1e:	91 f9       	bld	r25, 1
     e20:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     e22:	1d 96       	adiw	r26, 0x0d	; 13
     e24:	8d 91       	ld	r24, X+
     e26:	9c 91       	ld	r25, X
     e28:	1e 97       	sbiw	r26, 0x0e	; 14
     e2a:	90 8b       	std	Z+16, r25	; 0x10
     e2c:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     e2e:	ef 57       	subi	r30, 0x7F	; 127
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	01 90       	ld	r0, Z+
     e34:	f0 81       	ld	r31, Z
     e36:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
     e38:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
     e3a:	80 91 78 06 	lds	r24, 0x0678	; 0x800678 <nwkRxAckControl>
     e3e:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
     e40:	1c 96       	adiw	r26, 0x0c	; 12
     e42:	8c 91       	ld	r24, X
     e44:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
     e46:	c8 01       	movw	r24, r16
     e48:	b0 d0       	rcall	.+352    	; 0xfaa <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     e4a:	d5 01       	movw	r26, r10
     e4c:	dc 92       	st	X, r13
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <nwkRxTaskHandler+0x438>
      } break;

#ifdef NWK_ENABLE_ROUTING
      case NWK_RX_STATE_ROUTE:
      {
        nwkRouteFrame(frame);
     e50:	c5 01       	movw	r24, r10
     e52:	15 dd       	rcall	.-1494   	; 0x87e <nwkRouteFrame>
      } break;
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <nwkRxTaskHandler+0x438>
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     e56:	c5 01       	movw	r24, r10
     e58:	8a db       	rcall	.-2284   	; 0x56e <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     e5a:	c5 01       	movw	r24, r10
     e5c:	92 db       	rcall	.-2268   	; 0x582 <nwkFrameNext>
     e5e:	5c 01       	movw	r10, r24
     e60:	89 2b       	or	r24, r25
     e62:	09 f0       	breq	.+2      	; 0xe66 <nwkRxTaskHandler+0x444>
     e64:	1d ce       	rjmp	.-966    	; 0xaa0 <nwkRxTaskHandler+0x7e>
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <nwkRxTaskHandler+0x454>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e68:	f5 01       	movw	r30, r10
     e6a:	87 81       	ldd	r24, Z+7	; 0x07
     e6c:	90 85       	ldd	r25, Z+8	; 0x08
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	09 f0       	breq	.+2      	; 0xe74 <nwkRxTaskHandler+0x452>
     e72:	07 cf       	rjmp	.-498    	; 0xc82 <nwkRxTaskHandler+0x260>
     e74:	f8 ce       	rjmp	.-528    	; 0xc66 <nwkRxTaskHandler+0x244>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
     e76:	2e 96       	adiw	r28, 0x0e	; 14
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	df 90       	pop	r13
     e90:	cf 90       	pop	r12
     e92:	bf 90       	pop	r11
     e94:	af 90       	pop	r10
     e96:	9f 90       	pop	r9
     e98:	8f 90       	pop	r8
     e9a:	7f 90       	pop	r7
     e9c:	6f 90       	pop	r6
     e9e:	5f 90       	pop	r5
     ea0:	4f 90       	pop	r4
     ea2:	3f 90       	pop	r3
     ea4:	2f 90       	pop	r2
     ea6:	08 95       	ret

00000ea8 <nwkTxDelayTimerHandler>:
/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
  frame->tx.status = status;
     ea8:	ef 92       	push	r14
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	7c 01       	movw	r14, r24
     eb4:	10 e0       	ldi	r17, 0x00	; 0
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	01 e0       	ldi	r16, 0x01	; 1
     ebc:	c3 e1       	ldi	r28, 0x13	; 19
     ebe:	13 c0       	rjmp	.+38     	; 0xee6 <nwkTxDelayTimerHandler+0x3e>
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 81       	ld	r18, Z
     ec4:	21 31       	cpi	r18, 0x11	; 17
     ec6:	79 f4       	brne	.+30     	; 0xee6 <nwkTxDelayTimerHandler+0x3e>
     ec8:	ec 57       	subi	r30, 0x7C	; 124
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	20 81       	ld	r18, Z
     ece:	31 81       	ldd	r19, Z+1	; 0x01
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	31 09       	sbc	r19, r1
     ed4:	31 83       	std	Z+1, r19	; 0x01
     ed6:	20 83       	st	Z, r18
     ed8:	23 2b       	or	r18, r19
     eda:	21 f4       	brne	.+8      	; 0xee4 <nwkTxDelayTimerHandler+0x3c>
     edc:	fc 01       	movw	r30, r24
     ede:	c0 83       	st	Z, r28
     ee0:	10 2f       	mov	r17, r16
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <nwkTxDelayTimerHandler+0x3e>
     ee4:	10 2f       	mov	r17, r16
     ee6:	4d db       	rcall	.-2406   	; 0x582 <nwkFrameNext>
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	51 f7       	brne	.-44     	; 0xec0 <nwkTxDelayTimerHandler+0x18>
     eec:	11 23       	and	r17, r17
     eee:	11 f0       	breq	.+4      	; 0xef4 <nwkTxDelayTimerHandler+0x4c>
     ef0:	c7 01       	movw	r24, r14
     ef2:	37 d3       	rcall	.+1646   	; 0x1562 <SYS_TimerStart>
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	08 95       	ret

00000f00 <nwkTxAckWaitTimerHandler>:
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	7c 01       	movw	r14, r24
     f0e:	10 e0       	ldi	r17, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	d7 e1       	ldi	r29, 0x17	; 23
     f18:	c0 e1       	ldi	r28, 0x10	; 16
     f1a:	16 c0       	rjmp	.+44     	; 0xf48 <nwkTxAckWaitTimerHandler+0x48>
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 81       	ld	r18, Z
     f20:	26 31       	cpi	r18, 0x16	; 22
     f22:	91 f4       	brne	.+36     	; 0xf48 <nwkTxAckWaitTimerHandler+0x48>
     f24:	ec 57       	subi	r30, 0x7C	; 124
     f26:	ff 4f       	sbci	r31, 0xFF	; 255
     f28:	20 81       	ld	r18, Z
     f2a:	31 81       	ldd	r19, Z+1	; 0x01
     f2c:	21 50       	subi	r18, 0x01	; 1
     f2e:	31 09       	sbc	r19, r1
     f30:	31 83       	std	Z+1, r19	; 0x01
     f32:	20 83       	st	Z, r18
     f34:	23 2b       	or	r18, r19
     f36:	39 f4       	brne	.+14     	; 0xf46 <nwkTxAckWaitTimerHandler+0x46>
     f38:	fc 01       	movw	r30, r24
     f3a:	d0 83       	st	Z, r29
     f3c:	ed 57       	subi	r30, 0x7D	; 125
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	c0 83       	st	Z, r28
     f42:	10 2f       	mov	r17, r16
     f44:	01 c0       	rjmp	.+2      	; 0xf48 <nwkTxAckWaitTimerHandler+0x48>
     f46:	10 2f       	mov	r17, r16
     f48:	1c db       	rcall	.-2504   	; 0x582 <nwkFrameNext>
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	39 f7       	brne	.-50     	; 0xf1c <nwkTxAckWaitTimerHandler+0x1c>
     f4e:	11 23       	and	r17, r17
     f50:	11 f0       	breq	.+4      	; 0xf56 <nwkTxAckWaitTimerHandler+0x56>
     f52:	c7 01       	movw	r24, r14
     f54:	06 d3       	rcall	.+1548   	; 0x1562 <SYS_TimerStart>
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	08 95       	ret

00000f64 <nwkTxInit>:
     f64:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <nwkTxPhyActiveFrame+0x1>
     f68:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <nwkTxPhyActiveFrame>
     f6c:	e8 eb       	ldi	r30, 0xB8	; 184
     f6e:	f6 e0       	ldi	r31, 0x06	; 6
     f70:	82 e3       	ldi	r24, 0x32	; 50
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	86 83       	std	Z+6, r24	; 0x06
     f7a:	97 83       	std	Z+7, r25	; 0x07
     f7c:	a0 87       	std	Z+8, r26	; 0x08
     f7e:	b1 87       	std	Z+9, r27	; 0x09
     f80:	12 86       	std	Z+10, r1	; 0x0a
     f82:	80 e8       	ldi	r24, 0x80	; 128
     f84:	97 e0       	ldi	r25, 0x07	; 7
     f86:	94 87       	std	Z+12, r25	; 0x0c
     f88:	83 87       	std	Z+11, r24	; 0x0b
     f8a:	eb ea       	ldi	r30, 0xAB	; 171
     f8c:	f6 e0       	ldi	r31, 0x06	; 6
     f8e:	8a e0       	ldi	r24, 0x0A	; 10
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e0       	ldi	r26, 0x00	; 0
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	86 83       	std	Z+6, r24	; 0x06
     f98:	97 83       	std	Z+7, r25	; 0x07
     f9a:	a0 87       	std	Z+8, r26	; 0x08
     f9c:	b1 87       	std	Z+9, r27	; 0x09
     f9e:	12 86       	std	Z+10, r1	; 0x0a
     fa0:	84 e5       	ldi	r24, 0x54	; 84
     fa2:	97 e0       	ldi	r25, 0x07	; 7
     fa4:	94 87       	std	Z+12, r25	; 0x0c
     fa6:	83 87       	std	Z+11, r24	; 0x0b
     fa8:	08 95       	ret

00000faa <nwkTxFrame>:
     faa:	cf 93       	push	r28
     fac:	df 93       	push	r29
     fae:	ec 01       	movw	r28, r24
     fb0:	fc 01       	movw	r30, r24
     fb2:	ea 57       	subi	r30, 0x7A	; 122
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	80 81       	ld	r24, Z
     fb8:	81 ff       	sbrs	r24, 1
     fba:	03 c0       	rjmp	.+6      	; 0xfc2 <nwkTxFrame+0x18>
     fbc:	92 e1       	ldi	r25, 0x12	; 18
     fbe:	98 83       	st	Y, r25
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <nwkTxFrame+0x1c>
     fc2:	92 e1       	ldi	r25, 0x12	; 18
     fc4:	98 83       	st	Y, r25
     fc6:	fe 01       	movw	r30, r28
     fc8:	ed 57       	subi	r30, 0x7D	; 125
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	10 82       	st	Z, r1
     fce:	80 ff       	sbrs	r24, 0
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <nwkTxFrame+0x32>
     fd2:	2f ef       	ldi	r18, 0xFF	; 255
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	3e 83       	std	Y+6, r19	; 0x06
     fd8:	2d 83       	std	Y+5, r18	; 0x05
     fda:	06 c0       	rjmp	.+12     	; 0xfe8 <nwkTxFrame+0x3e>
     fdc:	20 91 4f 07 	lds	r18, 0x074F	; 0x80074f <nwkIb+0x2>
     fe0:	30 91 50 07 	lds	r19, 0x0750	; 0x800750 <nwkIb+0x3>
     fe4:	3e 83       	std	Y+6, r19	; 0x06
     fe6:	2d 83       	std	Y+5, r18	; 0x05
     fe8:	85 70       	andi	r24, 0x05	; 5
     fea:	19 f4       	brne	.+6      	; 0xff2 <nwkTxFrame+0x48>
     fec:	ce 01       	movw	r24, r28
     fee:	28 dc       	rcall	.-1968   	; 0x840 <nwkRoutePrepareTx>
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <nwkTxFrame+0x50>
     ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff4:	98 89       	ldd	r25, Y+16	; 0x10
     ff6:	98 87       	std	Y+8, r25	; 0x08
     ff8:	8f 83       	std	Y+7, r24	; 0x07
     ffa:	ed e4       	ldi	r30, 0x4D	; 77
     ffc:	f7 e0       	ldi	r31, 0x07	; 7
     ffe:	80 81       	ld	r24, Z
    1000:	91 81       	ldd	r25, Z+1	; 0x01
    1002:	9a 87       	std	Y+10, r25	; 0x0a
    1004:	89 87       	std	Y+9, r24	; 0x09
    1006:	85 81       	ldd	r24, Z+5	; 0x05
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	85 83       	std	Z+5, r24	; 0x05
    100c:	8c 83       	std	Y+4, r24	; 0x04
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	69 f4       	brne	.+26     	; 0x1030 <nwkTxFrame+0x86>
    1016:	81 e4       	ldi	r24, 0x41	; 65
    1018:	98 e8       	ldi	r25, 0x88	; 136
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
    101e:	9c d3       	rcall	.+1848   	; 0x1758 <rand>
    1020:	cc 57       	subi	r28, 0x7C	; 124
    1022:	df 4f       	sbci	r29, 0xFF	; 255
    1024:	87 70       	andi	r24, 0x07	; 7
    1026:	99 27       	eor	r25, r25
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	99 83       	std	Y+1, r25	; 0x01
    102c:	88 83       	st	Y, r24
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <nwkTxFrame+0x96>
    1030:	81 e6       	ldi	r24, 0x61	; 97
    1032:	98 e8       	ldi	r25, 0x88	; 136
    1034:	9b 83       	std	Y+3, r25	; 0x03
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	cc 57       	subi	r28, 0x7C	; 124
    103a:	df 4f       	sbci	r29, 0xFF	; 255
    103c:	19 82       	std	Y+1, r1	; 0x01
    103e:	18 82       	st	Y, r1
    1040:	df 91       	pop	r29
    1042:	cf 91       	pop	r28
    1044:	08 95       	ret

00001046 <nwkTxBroadcastFrame>:
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	8c 01       	movw	r16, r24
    1050:	58 da       	rcall	.-2896   	; 0x502 <nwkFrameAlloc>
    1052:	ec 01       	movw	r28, r24
    1054:	89 2b       	or	r24, r25
    1056:	a9 f1       	breq	.+106    	; 0x10c2 <nwkTxBroadcastFrame+0x7c>
    1058:	82 e1       	ldi	r24, 0x12	; 18
    105a:	88 83       	st	Y, r24
    105c:	f8 01       	movw	r30, r16
    105e:	81 81       	ldd	r24, Z+1	; 0x01
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	fe 01       	movw	r30, r28
    1064:	ed 57       	subi	r30, 0x7D	; 125
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	10 82       	st	Z, r1
    106a:	76 d3       	rcall	.+1772   	; 0x1758 <rand>
    106c:	fe 01       	movw	r30, r28
    106e:	ec 57       	subi	r30, 0x7C	; 124
    1070:	ff 4f       	sbci	r31, 0xFF	; 255
    1072:	87 70       	andi	r24, 0x07	; 7
    1074:	99 27       	eor	r25, r25
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	91 83       	std	Z+1, r25	; 0x01
    107a:	80 83       	st	Z, r24
    107c:	33 96       	adiw	r30, 0x03	; 3
    107e:	11 82       	std	Z+1, r1	; 0x01
    1080:	10 82       	st	Z, r1
    1082:	f8 01       	movw	r30, r16
    1084:	41 81       	ldd	r20, Z+1	; 0x01
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	b8 01       	movw	r22, r16
    108a:	6e 5f       	subi	r22, 0xFE	; 254
    108c:	7f 4f       	sbci	r23, 0xFF	; 255
    108e:	ce 01       	movw	r24, r28
    1090:	02 96       	adiw	r24, 0x02	; 2
    1092:	70 d3       	rcall	.+1760   	; 0x1774 <memcpy>
    1094:	81 e4       	ldi	r24, 0x41	; 65
    1096:	98 e8       	ldi	r25, 0x88	; 136
    1098:	9b 83       	std	Y+3, r25	; 0x03
    109a:	8a 83       	std	Y+2, r24	; 0x02
    109c:	8f ef       	ldi	r24, 0xFF	; 255
    109e:	9f ef       	ldi	r25, 0xFF	; 255
    10a0:	98 87       	std	Y+8, r25	; 0x08
    10a2:	8f 83       	std	Y+7, r24	; 0x07
    10a4:	f8 01       	movw	r30, r16
    10a6:	85 81       	ldd	r24, Z+5	; 0x05
    10a8:	96 81       	ldd	r25, Z+6	; 0x06
    10aa:	9e 83       	std	Y+6, r25	; 0x06
    10ac:	8d 83       	std	Y+5, r24	; 0x05
    10ae:	ed e4       	ldi	r30, 0x4D	; 77
    10b0:	f7 e0       	ldi	r31, 0x07	; 7
    10b2:	80 81       	ld	r24, Z
    10b4:	91 81       	ldd	r25, Z+1	; 0x01
    10b6:	9a 87       	std	Y+10, r25	; 0x0a
    10b8:	89 87       	std	Y+9, r24	; 0x09
    10ba:	85 81       	ldd	r24, Z+5	; 0x05
    10bc:	8f 5f       	subi	r24, 0xFF	; 255
    10be:	85 83       	std	Z+5, r24	; 0x05
    10c0:	8c 83       	std	Y+4, r24	; 0x04
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	08 95       	ret

000010cc <nwkTxAckReceived>:
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	fc 01       	movw	r30, r24
    10d2:	c7 81       	ldd	r28, Z+7	; 0x07
    10d4:	d0 85       	ldd	r29, Z+8	; 0x08
    10d6:	81 85       	ldd	r24, Z+9	; 0x09
    10d8:	83 30       	cpi	r24, 0x03	; 3
    10da:	c1 f4       	brne	.+48     	; 0x110c <nwkTxAckReceived+0x40>
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	10 c0       	rjmp	.+32     	; 0x1102 <nwkTxAckReceived+0x36>
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 81       	ld	r18, Z
    10e6:	26 31       	cpi	r18, 0x16	; 22
    10e8:	61 f4       	brne	.+24     	; 0x1102 <nwkTxAckReceived+0x36>
    10ea:	34 85       	ldd	r19, Z+12	; 0x0c
    10ec:	29 81       	ldd	r18, Y+1	; 0x01
    10ee:	32 13       	cpse	r19, r18
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <nwkTxAckReceived+0x36>
    10f2:	27 e1       	ldi	r18, 0x17	; 23
    10f4:	20 83       	st	Z, r18
    10f6:	2a 81       	ldd	r18, Y+2	; 0x02
    10f8:	ea 57       	subi	r30, 0x7A	; 122
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	20 83       	st	Z, r18
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	06 c0       	rjmp	.+12     	; 0x110e <nwkTxAckReceived+0x42>
    1102:	3f da       	rcall	.-2946   	; 0x582 <nwkFrameNext>
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <nwkTxAckReceived+0x16>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	01 c0       	rjmp	.+2      	; 0x110e <nwkTxAckReceived+0x42>
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	df 91       	pop	r29
    1110:	cf 91       	pop	r28
    1112:	08 95       	ret

00001114 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1114:	e0 91 c5 06 	lds	r30, 0x06C5	; 0x8006c5 <nwkTxPhyActiveFrame>
    1118:	f0 91 c6 06 	lds	r31, 0x06C6	; 0x8006c6 <nwkTxPhyActiveFrame+0x1>

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	21 f0       	breq	.+8      	; 0x1128 <PHY_DataConf+0x14>
    1120:	48 f0       	brcs	.+18     	; 0x1134 <PHY_DataConf+0x20>
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	19 f0       	breq	.+6      	; 0x112c <PHY_DataConf+0x18>
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1128:	80 e2       	ldi	r24, 0x20	; 32
    112a:	05 c0       	rjmp	.+10     	; 0x1136 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    112c:	81 e2       	ldi	r24, 0x21	; 33
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	01 c0       	rjmp	.+2      	; 0x1136 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1134:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1136:	df 01       	movw	r26, r30
    1138:	ad 57       	subi	r26, 0x7D	; 125
    113a:	bf 4f       	sbci	r27, 0xFF	; 255
    113c:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    113e:	85 e1       	ldi	r24, 0x15	; 21
    1140:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1142:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <nwkTxPhyActiveFrame+0x1>
    1146:	10 92 c5 06 	sts	0x06C5, r1	; 0x8006c5 <nwkTxPhyActiveFrame>
  nwkIb.lock--;
    114a:	ed e4       	ldi	r30, 0x4D	; 77
    114c:	f7 e0       	ldi	r31, 0x07	; 7
    114e:	86 a1       	ldd	r24, Z+38	; 0x26
    1150:	97 a1       	ldd	r25, Z+39	; 0x27
    1152:	01 97       	sbiw	r24, 0x01	; 1
    1154:	97 a3       	std	Z+39, r25	; 0x27
    1156:	86 a3       	std	Z+38, r24	; 0x26
    1158:	08 95       	ret

0000115a <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1170:	c0 e0       	ldi	r28, 0x00	; 0
    1172:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1174:	0f 2e       	mov	r0, r31
    1176:	f4 e1       	ldi	r31, 0x14	; 20
    1178:	af 2e       	mov	r10, r31
    117a:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    117c:	0d e4       	ldi	r16, 0x4D	; 77
    117e:	17 e0       	ldi	r17, 0x07	; 7
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1180:	0f 2e       	mov	r0, r31
    1182:	f7 e1       	ldi	r31, 0x17	; 23
    1184:	df 2e       	mov	r13, r31
    1186:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1188:	0f 2e       	mov	r0, r31
    118a:	f6 e1       	ldi	r31, 0x16	; 22
    118c:	9f 2e       	mov	r9, r31
    118e:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1190:	0f 2e       	mov	r0, r31
    1192:	f5 e1       	ldi	r31, 0x15	; 21
    1194:	ef 2e       	mov	r14, r31
    1196:	f1 2c       	mov	r15, r1
    1198:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    119a:	0f 2e       	mov	r0, r31
    119c:	f3 e1       	ldi	r31, 0x13	; 19
    119e:	cf 2e       	mov	r12, r31
    11a0:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    11a2:	0f 2e       	mov	r0, r31
    11a4:	f1 e1       	ldi	r31, 0x11	; 17
    11a6:	bf 2e       	mov	r11, r31
    11a8:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    11aa:	60 c0       	rjmp	.+192    	; 0x126c <nwkTxTaskHandler+0x112>
  {
    switch (frame->state)
    11ac:	88 81       	ld	r24, Y
    11ae:	83 31       	cpi	r24, 0x13	; 19
    11b0:	c1 f0       	breq	.+48     	; 0x11e2 <nwkTxTaskHandler+0x88>
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <nwkTxTaskHandler+0x60>
    11b4:	82 31       	cpi	r24, 0x12	; 18
    11b6:	39 f0       	breq	.+14     	; 0x11c6 <nwkTxTaskHandler+0x6c>
    11b8:	59 c0       	rjmp	.+178    	; 0x126c <nwkTxTaskHandler+0x112>
    11ba:	85 31       	cpi	r24, 0x15	; 21
    11bc:	49 f1       	breq	.+82     	; 0x1210 <nwkTxTaskHandler+0xb6>
    11be:	87 31       	cpi	r24, 0x17	; 23
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <nwkTxTaskHandler+0x6a>
    11c2:	45 c0       	rjmp	.+138    	; 0x124e <nwkTxTaskHandler+0xf4>
    11c4:	53 c0       	rjmp	.+166    	; 0x126c <nwkTxTaskHandler+0x112>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    11c6:	fe 01       	movw	r30, r28
    11c8:	ec 57       	subi	r30, 0x7C	; 124
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	91 81       	ldd	r25, Z+1	; 0x01
    11d0:	89 2b       	or	r24, r25
    11d2:	29 f0       	breq	.+10     	; 0x11de <nwkTxTaskHandler+0x84>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    11d4:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    11d6:	8b ea       	ldi	r24, 0xAB	; 171
    11d8:	96 e0       	ldi	r25, 0x06	; 6
    11da:	c3 d1       	rcall	.+902    	; 0x1562 <SYS_TimerStart>
    11dc:	47 c0       	rjmp	.+142    	; 0x126c <nwkTxTaskHandler+0x112>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    11de:	c8 82       	st	Y, r12
    11e0:	45 c0       	rjmp	.+138    	; 0x126c <nwkTxTaskHandler+0x112>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    11e2:	80 91 c5 06 	lds	r24, 0x06C5	; 0x8006c5 <nwkTxPhyActiveFrame>
    11e6:	90 91 c6 06 	lds	r25, 0x06C6	; 0x8006c6 <nwkTxPhyActiveFrame+0x1>
    11ea:	89 2b       	or	r24, r25
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <nwkTxTaskHandler+0x96>
    11ee:	3e c0       	rjmp	.+124    	; 0x126c <nwkTxTaskHandler+0x112>
        {
          nwkTxPhyActiveFrame = frame;
    11f0:	d0 93 c6 06 	sts	0x06C6, r29	; 0x8006c6 <nwkTxPhyActiveFrame+0x1>
    11f4:	c0 93 c5 06 	sts	0x06C5, r28	; 0x8006c5 <nwkTxPhyActiveFrame>
          frame->state = NWK_TX_STATE_WAIT_CONF;
    11f8:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    11fa:	69 81       	ldd	r22, Y+1	; 0x01
    11fc:	ce 01       	movw	r24, r28
    11fe:	02 96       	adiw	r24, 0x02	; 2
    1200:	7c d0       	rcall	.+248    	; 0x12fa <PHY_DataReq>
          nwkIb.lock++;
    1202:	f8 01       	movw	r30, r16
    1204:	86 a1       	ldd	r24, Z+38	; 0x26
    1206:	97 a1       	ldd	r25, Z+39	; 0x27
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	97 a3       	std	Z+39, r25	; 0x27
    120c:	86 a3       	std	Z+38, r24	; 0x26
    120e:	2e c0       	rjmp	.+92     	; 0x126c <nwkTxTaskHandler+0x112>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1210:	fe 01       	movw	r30, r28
    1212:	ed 57       	subi	r30, 0x7D	; 125
    1214:	ff 4f       	sbci	r31, 0xFF	; 255
    1216:	80 81       	ld	r24, Z
    1218:	81 11       	cpse	r24, r1
    121a:	17 c0       	rjmp	.+46     	; 0x124a <nwkTxTaskHandler+0xf0>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    121c:	2d 85       	ldd	r18, Y+13	; 0x0d
    121e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1220:	f8 01       	movw	r30, r16
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	28 17       	cp	r18, r24
    1228:	39 07       	cpc	r19, r25
    122a:	69 f4       	brne	.+26     	; 0x1246 <nwkTxTaskHandler+0xec>
    122c:	8b 85       	ldd	r24, Y+11	; 0x0b
    122e:	80 ff       	sbrs	r24, 0
    1230:	0a c0       	rjmp	.+20     	; 0x1246 <nwkTxTaskHandler+0xec>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1232:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1234:	fe 01       	movw	r30, r28
    1236:	ec 57       	subi	r30, 0x7C	; 124
    1238:	ff 4f       	sbci	r31, 0xFF	; 255
    123a:	f1 82       	std	Z+1, r15	; 0x01
    123c:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    123e:	88 eb       	ldi	r24, 0xB8	; 184
    1240:	96 e0       	ldi	r25, 0x06	; 6
    1242:	8f d1       	rcall	.+798    	; 0x1562 <SYS_TimerStart>
    1244:	13 c0       	rjmp	.+38     	; 0x126c <nwkTxTaskHandler+0x112>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1246:	d8 82       	st	Y, r13
    1248:	11 c0       	rjmp	.+34     	; 0x126c <nwkTxTaskHandler+0x112>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    124a:	d8 82       	st	Y, r13
    124c:	0f c0       	rjmp	.+30     	; 0x126c <nwkTxTaskHandler+0x112>
        break;

      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
    124e:	ce 01       	movw	r24, r28
    1250:	b0 da       	rcall	.-2720   	; 0x7b2 <nwkRouteFrameSent>
#endif
        if (NULL == frame->tx.confirm)
    1252:	fe 01       	movw	r30, r28
    1254:	e9 57       	subi	r30, 0x79	; 121
    1256:	ff 4f       	sbci	r31, 0xFF	; 255
    1258:	01 90       	ld	r0, Z+
    125a:	f0 81       	ld	r31, Z
    125c:	e0 2d       	mov	r30, r0
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	19 f4       	brne	.+6      	; 0x1268 <nwkTxTaskHandler+0x10e>
          nwkFrameFree(frame);
    1262:	ce 01       	movw	r24, r28
    1264:	84 d9       	rcall	.-3320   	; 0x56e <nwkFrameFree>
    1266:	02 c0       	rjmp	.+4      	; 0x126c <nwkTxTaskHandler+0x112>
        else
          frame->tx.confirm(frame);
    1268:	ce 01       	movw	r24, r28
    126a:	19 95       	eicall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    126c:	ce 01       	movw	r24, r28
    126e:	89 d9       	rcall	.-3310   	; 0x582 <nwkFrameNext>
    1270:	ec 01       	movw	r28, r24
    1272:	89 2b       	or	r24, r25
    1274:	09 f0       	breq	.+2      	; 0x1278 <nwkTxTaskHandler+0x11e>
    1276:	9a cf       	rjmp	.-204    	; 0x11ac <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	af 90       	pop	r10
    128c:	9f 90       	pop	r9
    128e:	08 95       	ret

00001290 <phyTrxSetState>:
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
  phySetRxState();
  phyState = PHY_STATE_IDLE;
    1290:	93 e0       	ldi	r25, 0x03	; 3
    1292:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1296:	e1 e4       	ldi	r30, 0x41	; 65
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	90 81       	ld	r25, Z
    129c:	9f 71       	andi	r25, 0x1F	; 31
    129e:	98 30       	cpi	r25, 0x08	; 8
    12a0:	e1 f7       	brne	.-8      	; 0x129a <phyTrxSetState+0xa>
    12a2:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    12a6:	e1 e4       	ldi	r30, 0x41	; 65
    12a8:	f1 e0       	ldi	r31, 0x01	; 1
    12aa:	90 81       	ld	r25, Z
    12ac:	9f 71       	andi	r25, 0x1F	; 31
    12ae:	98 13       	cpse	r25, r24
    12b0:	fc cf       	rjmp	.-8      	; 0x12aa <phyTrxSetState+0x1a>
    12b2:	08 95       	ret

000012b4 <phySetRxState>:
    12b4:	88 e0       	ldi	r24, 0x08	; 8
    12b6:	ec df       	rcall	.-40     	; 0x1290 <phyTrxSetState>
    12b8:	8f ef       	ldi	r24, 0xFF	; 255
    12ba:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    12be:	80 91 c8 06 	lds	r24, 0x06C8	; 0x8006c8 <phyRxState>
    12c2:	88 23       	and	r24, r24
    12c4:	11 f0       	breq	.+4      	; 0x12ca <phySetRxState+0x16>
    12c6:	86 e1       	ldi	r24, 0x16	; 22
    12c8:	e3 cf       	rjmp	.-58     	; 0x1290 <phyTrxSetState>
    12ca:	08 95       	ret

000012cc <PHY_Init>:
    12cc:	e9 e3       	ldi	r30, 0x39	; 57
    12ce:	f1 e0       	ldi	r31, 0x01	; 1
    12d0:	80 81       	ld	r24, Z
    12d2:	81 60       	ori	r24, 0x01	; 1
    12d4:	80 83       	st	Z, r24
    12d6:	10 92 c8 06 	sts	0x06C8, r1	; 0x8006c8 <phyRxState>
    12da:	10 92 c7 06 	sts	0x06C7, r1	; 0x8006c7 <phyBand>
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <phyState>
    12e4:	88 e0       	ldi	r24, 0x08	; 8
    12e6:	d4 df       	rcall	.-88     	; 0x1290 <phyTrxSetState>
    12e8:	8b ee       	ldi	r24, 0xEB	; 235
    12ea:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__TEXT_REGION_LENGTH__+0x700156>
    12ee:	ec e4       	ldi	r30, 0x4C	; 76
    12f0:	f1 e0       	ldi	r31, 0x01	; 1
    12f2:	80 81       	ld	r24, Z
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	80 83       	st	Z, r24
    12f8:	08 95       	ret

000012fa <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    12fa:	0f 93       	push	r16
    12fc:	1f 93       	push	r17
    12fe:	cf 93       	push	r28
    1300:	8c 01       	movw	r16, r24
    1302:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1304:	89 e1       	ldi	r24, 0x19	; 25
    1306:	c4 df       	rcall	.-120    	; 0x1290 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	8c 0f       	add	r24, r28
    1312:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__TEXT_REGION_LENGTH__+0x700180>
  for (uint8_t i = 0; i < size; i++)
    1316:	cc 23       	and	r28, r28
    1318:	81 f0       	breq	.+32     	; 0x133a <PHY_DataReq+0x40>
    131a:	f8 01       	movw	r30, r16
    131c:	c1 50       	subi	r28, 0x01	; 1
    131e:	2c 2f       	mov	r18, r28
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	2f 5f       	subi	r18, 0xFF	; 255
    1324:	3f 4f       	sbci	r19, 0xFF	; 255
    1326:	c8 01       	movw	r24, r16
    1328:	82 0f       	add	r24, r18
    132a:	93 1f       	adc	r25, r19
    132c:	a1 e8       	ldi	r26, 0x81	; 129
    132e:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1330:	21 91       	ld	r18, Z+
    1332:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1334:	e8 17       	cp	r30, r24
    1336:	f9 07       	cpc	r31, r25
    1338:	d9 f7       	brne	.-10     	; 0x1330 <PHY_DataReq+0x36>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    133a:	83 e0       	ldi	r24, 0x03	; 3
    133c:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <phyState>
  TRX_STATE_REG = TRX_CMD_TX_START;
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
}
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	08 95       	ret

0000134e <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	00 d0       	rcall	.+0      	; 0x1356 <PHY_TaskHandler+0x8>
    1356:	1f 92       	push	r1
    1358:	1f 92       	push	r1
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    135e:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <phyState>
    1362:	82 30       	cpi	r24, 0x02	; 2
    1364:	09 f4       	brne	.+2      	; 0x1368 <PHY_TaskHandler+0x1a>
    1366:	65 c0       	rjmp	.+202    	; 0x1432 <PHY_TaskHandler+0xe4>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1368:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    136c:	83 ff       	sbrs	r24, 3
    136e:	3e c0       	rjmp	.+124    	; 0x13ec <PHY_TaskHandler+0x9e>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1370:	a0 91 7b 01 	lds	r26, 0x017B	; 0x80017b <__TEXT_REGION_LENGTH__+0x70017b>

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1374:	6a 2f       	mov	r22, r26
    1376:	70 e0       	ldi	r23, 0x00	; 0
    1378:	ab 01       	movw	r20, r22
    137a:	4f 5f       	subi	r20, 0xFF	; 255
    137c:	5f 4f       	sbci	r21, 0xFF	; 255
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1384:	fc 01       	movw	r30, r24
    1386:	e0 58       	subi	r30, 0x80	; 128
    1388:	fe 4f       	sbci	r31, 0xFE	; 254
    138a:	30 81       	ld	r19, Z
    138c:	fc 01       	movw	r30, r24
    138e:	e7 53       	subi	r30, 0x37	; 55
    1390:	f9 4f       	sbci	r31, 0xF9	; 249
    1392:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1394:	2f 5f       	subi	r18, 0xFF	; 255
    1396:	82 2f       	mov	r24, r18
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	84 17       	cp	r24, r20
    139c:	95 07       	cpc	r25, r21
    139e:	94 f3       	brlt	.-28     	; 0x1384 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    13a0:	89 ec       	ldi	r24, 0xC9	; 201
    13a2:	96 e0       	ldi	r25, 0x06	; 6
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    13a8:	a2 50       	subi	r26, 0x02	; 2
    13aa:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    13ac:	fb 01       	movw	r30, r22
    13ae:	e7 53       	subi	r30, 0x37	; 55
    13b0:	f9 4f       	sbci	r31, 0xF9	; 249
    13b2:	80 81       	ld	r24, Z
    13b4:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    13b6:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <__TEXT_REGION_LENGTH__+0x700147>
    13ba:	8a 55       	subi	r24, 0x5A	; 90
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    13be:	ce 01       	movw	r24, r28
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	05 db       	rcall	.-2550   	; 0x9ce <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    13c4:	e1 e4       	ldi	r30, 0x41	; 65
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	80 81       	ld	r24, Z
    13ca:	8f 71       	andi	r24, 0x1F	; 31
    13cc:	86 31       	cpi	r24, 0x16	; 22
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <PHY_TaskHandler+0x7a>

    IRQ_STATUS_REG_s.rxEnd = 1;
    13d0:	ef e4       	ldi	r30, 0x4F	; 79
    13d2:	f1 e0       	ldi	r31, 0x01	; 1
    13d4:	80 81       	ld	r24, Z
    13d6:	88 60       	ori	r24, 0x08	; 8
    13d8:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    13da:	ec e4       	ldi	r30, 0x4C	; 76
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	80 81       	ld	r24, Z
    13e0:	8f 77       	andi	r24, 0x7F	; 127
    13e2:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    13e4:	80 81       	ld	r24, Z
    13e6:	80 68       	ori	r24, 0x80	; 128
    13e8:	80 83       	st	Z, r24
    13ea:	23 c0       	rjmp	.+70     	; 0x1432 <PHY_TaskHandler+0xe4>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    13ec:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <__TEXT_REGION_LENGTH__+0x70014f>
    13f0:	86 ff       	sbrs	r24, 6
    13f2:	1f c0       	rjmp	.+62     	; 0x1432 <PHY_TaskHandler+0xe4>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    13f4:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x700141>
    13f8:	8f 71       	andi	r24, 0x1F	; 31
    13fa:	89 31       	cpi	r24, 0x19	; 25
    13fc:	a9 f4       	brne	.+42     	; 0x1428 <PHY_TaskHandler+0xda>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    13fe:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <__TEXT_REGION_LENGTH__+0x700142>
    1402:	12 95       	swap	r17
    1404:	16 95       	lsr	r17
    1406:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1408:	49 f0       	breq	.+18     	; 0x141c <PHY_TaskHandler+0xce>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    140a:	13 30       	cpi	r17, 0x03	; 3
    140c:	21 f0       	breq	.+8      	; 0x1416 <PHY_TaskHandler+0xc8>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    140e:	15 30       	cpi	r17, 0x05	; 5
    1410:	21 f0       	breq	.+8      	; 0x141a <PHY_TaskHandler+0xcc>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1412:	13 e0       	ldi	r17, 0x03	; 3
    1414:	03 c0       	rjmp	.+6      	; 0x141c <PHY_TaskHandler+0xce>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1416:	11 e0       	ldi	r17, 0x01	; 1
    1418:	01 c0       	rjmp	.+2      	; 0x141c <PHY_TaskHandler+0xce>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    141a:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    141c:	4b df       	rcall	.-362    	; 0x12b4 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <phyState>

      PHY_DataConf(status);
    1424:	81 2f       	mov	r24, r17
    1426:	76 de       	rcall	.-788    	; 0x1114 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1428:	ef e4       	ldi	r30, 0x4F	; 79
    142a:	f1 e0       	ldi	r31, 0x01	; 1
    142c:	80 81       	ld	r24, Z
    142e:	80 64       	ori	r24, 0x40	; 64
    1430:	80 83       	st	Z, r24
  }
}
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	0f 90       	pop	r0
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	08 95       	ret

00001444 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1444:	0e 94 bb 00 	call	0x176	; 0x176 <HAL_Init>
  SYS_TimerInit();
    1448:	6d d0       	rcall	.+218    	; 0x1524 <SYS_TimerInit>
  PHY_Init();
    144a:	40 df       	rcall	.-384    	; 0x12cc <PHY_Init>
  NWK_Init();
    144c:	0c 94 8b 01 	jmp	0x316	; 0x316 <NWK_Init>
    1450:	08 95       	ret

00001452 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1452:	7d df       	rcall	.-262    	; 0x134e <PHY_TaskHandler>
  NWK_TaskHandler();
    1454:	0e 94 ab 01 	call	0x356	; 0x356 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1458:	8f c0       	rjmp	.+286    	; 0x1578 <SYS_TimerTaskHandler>
    145a:	08 95       	ret

0000145c <placeTimer>:

      break;
    }
    prev = t;
  }
}
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	ec 01       	movw	r28, r24
    1466:	80 91 4a 07 	lds	r24, 0x074A	; 0x80074a <timers>
    146a:	90 91 4b 07 	lds	r25, 0x074B	; 0x80074b <timers+0x1>
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	09 f4       	brne	.+2      	; 0x1474 <placeTimer+0x18>
    1472:	45 c0       	rjmp	.+138    	; 0x14fe <placeTimer+0xa2>
    1474:	4e 81       	ldd	r20, Y+6	; 0x06
    1476:	5f 81       	ldd	r21, Y+7	; 0x07
    1478:	68 85       	ldd	r22, Y+8	; 0x08
    147a:	79 85       	ldd	r23, Y+9	; 0x09
    147c:	fc 01       	movw	r30, r24
    147e:	02 81       	ldd	r16, Z+2	; 0x02
    1480:	13 81       	ldd	r17, Z+3	; 0x03
    1482:	24 81       	ldd	r18, Z+4	; 0x04
    1484:	35 81       	ldd	r19, Z+5	; 0x05
    1486:	40 17       	cp	r20, r16
    1488:	51 07       	cpc	r21, r17
    148a:	62 07       	cpc	r22, r18
    148c:	73 07       	cpc	r23, r19
    148e:	60 f0       	brcs	.+24     	; 0x14a8 <placeTimer+0x4c>
    1490:	dc 01       	movw	r26, r24
    1492:	17 c0       	rjmp	.+46     	; 0x14c2 <placeTimer+0x66>
    1494:	02 81       	ldd	r16, Z+2	; 0x02
    1496:	13 81       	ldd	r17, Z+3	; 0x03
    1498:	24 81       	ldd	r18, Z+4	; 0x04
    149a:	35 81       	ldd	r19, Z+5	; 0x05
    149c:	40 17       	cp	r20, r16
    149e:	51 07       	cpc	r21, r17
    14a0:	62 07       	cpc	r22, r18
    14a2:	73 07       	cpc	r23, r19
    14a4:	68 f4       	brcc	.+26     	; 0x14c0 <placeTimer+0x64>
    14a6:	03 c0       	rjmp	.+6      	; 0x14ae <placeTimer+0x52>
    14a8:	fc 01       	movw	r30, r24
    14aa:	a0 e0       	ldi	r26, 0x00	; 0
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	04 1b       	sub	r16, r20
    14b0:	15 0b       	sbc	r17, r21
    14b2:	26 0b       	sbc	r18, r22
    14b4:	37 0b       	sbc	r19, r23
    14b6:	02 83       	std	Z+2, r16	; 0x02
    14b8:	13 83       	std	Z+3, r17	; 0x03
    14ba:	24 83       	std	Z+4, r18	; 0x04
    14bc:	35 83       	std	Z+5, r19	; 0x05
    14be:	0a c0       	rjmp	.+20     	; 0x14d4 <placeTimer+0x78>
    14c0:	df 01       	movw	r26, r30
    14c2:	40 1b       	sub	r20, r16
    14c4:	51 0b       	sbc	r21, r17
    14c6:	62 0b       	sbc	r22, r18
    14c8:	73 0b       	sbc	r23, r19
    14ca:	ed 91       	ld	r30, X+
    14cc:	fc 91       	ld	r31, X
    14ce:	11 97       	sbiw	r26, 0x01	; 1
    14d0:	30 97       	sbiw	r30, 0x00	; 0
    14d2:	01 f7       	brne	.-64     	; 0x1494 <placeTimer+0x38>
    14d4:	4a 83       	std	Y+2, r20	; 0x02
    14d6:	5b 83       	std	Y+3, r21	; 0x03
    14d8:	6c 83       	std	Y+4, r22	; 0x04
    14da:	7d 83       	std	Y+5, r23	; 0x05
    14dc:	10 97       	sbiw	r26, 0x00	; 0
    14de:	41 f0       	breq	.+16     	; 0x14f0 <placeTimer+0x94>
    14e0:	8d 91       	ld	r24, X+
    14e2:	9c 91       	ld	r25, X
    14e4:	11 97       	sbiw	r26, 0x01	; 1
    14e6:	99 83       	std	Y+1, r25	; 0x01
    14e8:	88 83       	st	Y, r24
    14ea:	cd 93       	st	X+, r28
    14ec:	dc 93       	st	X, r29
    14ee:	15 c0       	rjmp	.+42     	; 0x151a <placeTimer+0xbe>
    14f0:	99 83       	std	Y+1, r25	; 0x01
    14f2:	88 83       	st	Y, r24
    14f4:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <timers+0x1>
    14f8:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <timers>
    14fc:	0e c0       	rjmp	.+28     	; 0x151a <placeTimer+0xbe>
    14fe:	19 82       	std	Y+1, r1	; 0x01
    1500:	18 82       	st	Y, r1
    1502:	8e 81       	ldd	r24, Y+6	; 0x06
    1504:	9f 81       	ldd	r25, Y+7	; 0x07
    1506:	a8 85       	ldd	r26, Y+8	; 0x08
    1508:	b9 85       	ldd	r27, Y+9	; 0x09
    150a:	8a 83       	std	Y+2, r24	; 0x02
    150c:	9b 83       	std	Y+3, r25	; 0x03
    150e:	ac 83       	std	Y+4, r26	; 0x04
    1510:	bd 83       	std	Y+5, r27	; 0x05
    1512:	d0 93 4b 07 	sts	0x074B, r29	; 0x80074b <timers+0x1>
    1516:	c0 93 4a 07 	sts	0x074A, r28	; 0x80074a <timers>
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	1f 91       	pop	r17
    1520:	0f 91       	pop	r16
    1522:	08 95       	ret

00001524 <SYS_TimerInit>:
    1524:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <timers+0x1>
    1528:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <timers>
    152c:	08 95       	ret

0000152e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    152e:	e0 91 4a 07 	lds	r30, 0x074A	; 0x80074a <timers>
    1532:	f0 91 4b 07 	lds	r31, 0x074B	; 0x80074b <timers+0x1>
    1536:	30 97       	sbiw	r30, 0x00	; 0
    1538:	71 f0       	breq	.+28     	; 0x1556 <SYS_TimerStarted+0x28>
    if (t == timer)
    153a:	e8 17       	cp	r30, r24
    153c:	f9 07       	cpc	r31, r25
    153e:	21 f4       	brne	.+8      	; 0x1548 <SYS_TimerStarted+0x1a>
    1540:	0c c0       	rjmp	.+24     	; 0x155a <SYS_TimerStarted+0x2c>
    1542:	8e 17       	cp	r24, r30
    1544:	9f 07       	cpc	r25, r31
    1546:	59 f0       	breq	.+22     	; 0x155e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1548:	01 90       	ld	r0, Z+
    154a:	f0 81       	ld	r31, Z
    154c:	e0 2d       	mov	r30, r0
    154e:	30 97       	sbiw	r30, 0x00	; 0
    1550:	c1 f7       	brne	.-16     	; 0x1542 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	08 95       	ret
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	08 95       	ret
    155e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1560:	08 95       	ret

00001562 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1562:	cf 93       	push	r28
    1564:	df 93       	push	r29
    1566:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1568:	e2 df       	rcall	.-60     	; 0x152e <SYS_TimerStarted>
    156a:	81 11       	cpse	r24, r1
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <SYS_TimerStart+0x10>
    placeTimer(timer);
    156e:	ce 01       	movw	r24, r28
    1570:	75 df       	rcall	.-278    	; 0x145c <placeTimer>
}
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1578:	cf 92       	push	r12
    157a:	df 92       	push	r13
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1584:	80 91 4c 07 	lds	r24, 0x074C	; 0x80074c <halTimerIrqCount>
    1588:	88 23       	and	r24, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <SYS_TimerTaskHandler+0x16>
    158c:	59 c0       	rjmp	.+178    	; 0x1640 <SYS_TimerTaskHandler+0xc8>
    return;

  ATOMIC_SECTION_ENTER
    158e:	8f b7       	in	r24, 0x3f	; 63
    1590:	f8 94       	cli
    cnt = halTimerIrqCount;
    1592:	c0 90 4c 07 	lds	r12, 0x074C	; 0x80074c <halTimerIrqCount>
    halTimerIrqCount = 0;
    1596:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <halTimerIrqCount>
  ATOMIC_SECTION_LEAVE
    159a:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    159c:	d1 2c       	mov	r13, r1
    159e:	e1 2c       	mov	r14, r1
    15a0:	f1 2c       	mov	r15, r1
    15a2:	cc 0c       	add	r12, r12
    15a4:	dd 1c       	adc	r13, r13
    15a6:	ee 1c       	adc	r14, r14
    15a8:	ff 1c       	adc	r15, r15
    15aa:	d7 01       	movw	r26, r14
    15ac:	c6 01       	movw	r24, r12
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	aa 1f       	adc	r26, r26
    15b4:	bb 1f       	adc	r27, r27
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	aa 1f       	adc	r26, r26
    15bc:	bb 1f       	adc	r27, r27
    15be:	c8 0e       	add	r12, r24
    15c0:	d9 1e       	adc	r13, r25
    15c2:	ea 1e       	adc	r14, r26
    15c4:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    15c6:	c0 91 4a 07 	lds	r28, 0x074A	; 0x80074a <timers>
    15ca:	d0 91 4b 07 	lds	r29, 0x074B	; 0x80074b <timers+0x1>
    15ce:	20 97       	sbiw	r28, 0x00	; 0
    15d0:	b9 f1       	breq	.+110    	; 0x1640 <SYS_TimerTaskHandler+0xc8>
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9b 81       	ldd	r25, Y+3	; 0x03
    15d6:	ac 81       	ldd	r26, Y+4	; 0x04
    15d8:	bd 81       	ldd	r27, Y+5	; 0x05
    15da:	c8 16       	cp	r12, r24
    15dc:	d9 06       	cpc	r13, r25
    15de:	ea 06       	cpc	r14, r26
    15e0:	fb 06       	cpc	r15, r27
    15e2:	10 f1       	brcs	.+68     	; 0x1628 <SYS_TimerTaskHandler+0xb0>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    15e4:	c8 1a       	sub	r12, r24
    15e6:	d9 0a       	sbc	r13, r25
    15e8:	ea 0a       	sbc	r14, r26
    15ea:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    15ec:	88 81       	ld	r24, Y
    15ee:	99 81       	ldd	r25, Y+1	; 0x01
    15f0:	90 93 4b 07 	sts	0x074B, r25	; 0x80074b <timers+0x1>
    15f4:	80 93 4a 07 	sts	0x074A, r24	; 0x80074a <timers>
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    15f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	11 f4       	brne	.+4      	; 0x1602 <SYS_TimerTaskHandler+0x8a>
      placeTimer(timer);
    15fe:	ce 01       	movw	r24, r28
    1600:	2d df       	rcall	.-422    	; 0x145c <placeTimer>
    timer->handler(timer);
    1602:	eb 85       	ldd	r30, Y+11	; 0x0b
    1604:	fc 85       	ldd	r31, Y+12	; 0x0c
    1606:	ce 01       	movw	r24, r28
    1608:	19 95       	eicall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    160a:	c0 91 4a 07 	lds	r28, 0x074A	; 0x80074a <timers>
    160e:	d0 91 4b 07 	lds	r29, 0x074B	; 0x80074b <timers+0x1>
    1612:	20 97       	sbiw	r28, 0x00	; 0
    1614:	a9 f0       	breq	.+42     	; 0x1640 <SYS_TimerTaskHandler+0xc8>
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	9b 81       	ldd	r25, Y+3	; 0x03
    161a:	ac 81       	ldd	r26, Y+4	; 0x04
    161c:	bd 81       	ldd	r27, Y+5	; 0x05
    161e:	c8 16       	cp	r12, r24
    1620:	d9 06       	cpc	r13, r25
    1622:	ea 06       	cpc	r14, r26
    1624:	fb 06       	cpc	r15, r27
    1626:	f0 f6       	brcc	.-68     	; 0x15e4 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	9b 81       	ldd	r25, Y+3	; 0x03
    162c:	ac 81       	ldd	r26, Y+4	; 0x04
    162e:	bd 81       	ldd	r27, Y+5	; 0x05
    1630:	8c 19       	sub	r24, r12
    1632:	9d 09       	sbc	r25, r13
    1634:	ae 09       	sbc	r26, r14
    1636:	bf 09       	sbc	r27, r15
    1638:	8a 83       	std	Y+2, r24	; 0x02
    163a:	9b 83       	std	Y+3, r25	; 0x03
    163c:	ac 83       	std	Y+4, r26	; 0x04
    163e:	bd 83       	std	Y+5, r27	; 0x05
}
    1640:	df 91       	pop	r29
    1642:	cf 91       	pop	r28
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	08 95       	ret

0000164e <__udivmodsi4>:
    164e:	a1 e2       	ldi	r26, 0x21	; 33
    1650:	1a 2e       	mov	r1, r26
    1652:	aa 1b       	sub	r26, r26
    1654:	bb 1b       	sub	r27, r27
    1656:	fd 01       	movw	r30, r26
    1658:	0d c0       	rjmp	.+26     	; 0x1674 <__udivmodsi4_ep>

0000165a <__udivmodsi4_loop>:
    165a:	aa 1f       	adc	r26, r26
    165c:	bb 1f       	adc	r27, r27
    165e:	ee 1f       	adc	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	a2 17       	cp	r26, r18
    1664:	b3 07       	cpc	r27, r19
    1666:	e4 07       	cpc	r30, r20
    1668:	f5 07       	cpc	r31, r21
    166a:	20 f0       	brcs	.+8      	; 0x1674 <__udivmodsi4_ep>
    166c:	a2 1b       	sub	r26, r18
    166e:	b3 0b       	sbc	r27, r19
    1670:	e4 0b       	sbc	r30, r20
    1672:	f5 0b       	sbc	r31, r21

00001674 <__udivmodsi4_ep>:
    1674:	66 1f       	adc	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	88 1f       	adc	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	1a 94       	dec	r1
    167e:	69 f7       	brne	.-38     	; 0x165a <__udivmodsi4_loop>
    1680:	60 95       	com	r22
    1682:	70 95       	com	r23
    1684:	80 95       	com	r24
    1686:	90 95       	com	r25
    1688:	9b 01       	movw	r18, r22
    168a:	ac 01       	movw	r20, r24
    168c:	bd 01       	movw	r22, r26
    168e:	cf 01       	movw	r24, r30
    1690:	08 95       	ret

00001692 <__divmodsi4>:
    1692:	05 2e       	mov	r0, r21
    1694:	97 fb       	bst	r25, 7
    1696:	16 f4       	brtc	.+4      	; 0x169c <__divmodsi4+0xa>
    1698:	00 94       	com	r0
    169a:	0f d0       	rcall	.+30     	; 0x16ba <__negsi2>
    169c:	57 fd       	sbrc	r21, 7
    169e:	05 d0       	rcall	.+10     	; 0x16aa <__divmodsi4_neg2>
    16a0:	d6 df       	rcall	.-84     	; 0x164e <__udivmodsi4>
    16a2:	07 fc       	sbrc	r0, 7
    16a4:	02 d0       	rcall	.+4      	; 0x16aa <__divmodsi4_neg2>
    16a6:	46 f4       	brtc	.+16     	; 0x16b8 <__divmodsi4_exit>
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <__negsi2>

000016aa <__divmodsi4_neg2>:
    16aa:	50 95       	com	r21
    16ac:	40 95       	com	r20
    16ae:	30 95       	com	r19
    16b0:	21 95       	neg	r18
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	4f 4f       	sbci	r20, 0xFF	; 255
    16b6:	5f 4f       	sbci	r21, 0xFF	; 255

000016b8 <__divmodsi4_exit>:
    16b8:	08 95       	ret

000016ba <__negsi2>:
    16ba:	90 95       	com	r25
    16bc:	80 95       	com	r24
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255
    16c4:	8f 4f       	sbci	r24, 0xFF	; 255
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <do_rand>:
    16ca:	8f 92       	push	r8
    16cc:	9f 92       	push	r9
    16ce:	af 92       	push	r10
    16d0:	bf 92       	push	r11
    16d2:	cf 92       	push	r12
    16d4:	df 92       	push	r13
    16d6:	ef 92       	push	r14
    16d8:	ff 92       	push	r15
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	ec 01       	movw	r28, r24
    16e0:	68 81       	ld	r22, Y
    16e2:	79 81       	ldd	r23, Y+1	; 0x01
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	9b 81       	ldd	r25, Y+3	; 0x03
    16e8:	61 15       	cp	r22, r1
    16ea:	71 05       	cpc	r23, r1
    16ec:	81 05       	cpc	r24, r1
    16ee:	91 05       	cpc	r25, r1
    16f0:	21 f4       	brne	.+8      	; 0x16fa <do_rand+0x30>
    16f2:	64 e2       	ldi	r22, 0x24	; 36
    16f4:	79 ed       	ldi	r23, 0xD9	; 217
    16f6:	8b e5       	ldi	r24, 0x5B	; 91
    16f8:	97 e0       	ldi	r25, 0x07	; 7
    16fa:	2d e1       	ldi	r18, 0x1D	; 29
    16fc:	33 ef       	ldi	r19, 0xF3	; 243
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	c7 df       	rcall	.-114    	; 0x1692 <__divmodsi4>
    1704:	49 01       	movw	r8, r18
    1706:	5a 01       	movw	r10, r20
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	a7 ea       	ldi	r26, 0xA7	; 167
    170e:	b1 e4       	ldi	r27, 0x41	; 65
    1710:	3a d0       	rcall	.+116    	; 0x1786 <__muluhisi3>
    1712:	6b 01       	movw	r12, r22
    1714:	7c 01       	movw	r14, r24
    1716:	ac ee       	ldi	r26, 0xEC	; 236
    1718:	b4 ef       	ldi	r27, 0xF4	; 244
    171a:	a5 01       	movw	r20, r10
    171c:	94 01       	movw	r18, r8
    171e:	3f d0       	rcall	.+126    	; 0x179e <__mulohisi3>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	8c 0d       	add	r24, r12
    1726:	9d 1d       	adc	r25, r13
    1728:	ae 1d       	adc	r26, r14
    172a:	bf 1d       	adc	r27, r15
    172c:	b7 ff       	sbrs	r27, 7
    172e:	03 c0       	rjmp	.+6      	; 0x1736 <do_rand+0x6c>
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	a1 09       	sbc	r26, r1
    1734:	b0 48       	sbci	r27, 0x80	; 128
    1736:	88 83       	st	Y, r24
    1738:	99 83       	std	Y+1, r25	; 0x01
    173a:	aa 83       	std	Y+2, r26	; 0x02
    173c:	bb 83       	std	Y+3, r27	; 0x03
    173e:	9f 77       	andi	r25, 0x7F	; 127
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	ff 90       	pop	r15
    1746:	ef 90       	pop	r14
    1748:	df 90       	pop	r13
    174a:	cf 90       	pop	r12
    174c:	bf 90       	pop	r11
    174e:	af 90       	pop	r10
    1750:	9f 90       	pop	r9
    1752:	8f 90       	pop	r8
    1754:	08 95       	ret

00001756 <rand_r>:
    1756:	b9 cf       	rjmp	.-142    	; 0x16ca <do_rand>

00001758 <rand>:
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	92 e0       	ldi	r25, 0x02	; 2
    175c:	b6 cf       	rjmp	.-148    	; 0x16ca <do_rand>

0000175e <srand>:
    175e:	a0 e0       	ldi	r26, 0x00	; 0
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
    1766:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
    176a:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__data_start+0x2>
    176e:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__data_start+0x3>
    1772:	08 95       	ret

00001774 <memcpy>:
    1774:	fb 01       	movw	r30, r22
    1776:	dc 01       	movw	r26, r24
    1778:	02 c0       	rjmp	.+4      	; 0x177e <memcpy+0xa>
    177a:	01 90       	ld	r0, Z+
    177c:	0d 92       	st	X+, r0
    177e:	41 50       	subi	r20, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	d8 f7       	brcc	.-10     	; 0x177a <memcpy+0x6>
    1784:	08 95       	ret

00001786 <__muluhisi3>:
    1786:	0f d0       	rcall	.+30     	; 0x17a6 <__umulhisi3>
    1788:	a5 9f       	mul	r26, r21
    178a:	90 0d       	add	r25, r0
    178c:	b4 9f       	mul	r27, r20
    178e:	90 0d       	add	r25, r0
    1790:	a4 9f       	mul	r26, r20
    1792:	80 0d       	add	r24, r0
    1794:	91 1d       	adc	r25, r1
    1796:	11 24       	eor	r1, r1
    1798:	08 95       	ret

0000179a <__mulshisi3>:
    179a:	b7 ff       	sbrs	r27, 7
    179c:	f4 cf       	rjmp	.-24     	; 0x1786 <__muluhisi3>

0000179e <__mulohisi3>:
    179e:	f3 df       	rcall	.-26     	; 0x1786 <__muluhisi3>
    17a0:	82 1b       	sub	r24, r18
    17a2:	93 0b       	sbc	r25, r19
    17a4:	08 95       	ret

000017a6 <__umulhisi3>:
    17a6:	a2 9f       	mul	r26, r18
    17a8:	b0 01       	movw	r22, r0
    17aa:	b3 9f       	mul	r27, r19
    17ac:	c0 01       	movw	r24, r0
    17ae:	a3 9f       	mul	r26, r19
    17b0:	70 0d       	add	r23, r0
    17b2:	81 1d       	adc	r24, r1
    17b4:	11 24       	eor	r1, r1
    17b6:	91 1d       	adc	r25, r1
    17b8:	b2 9f       	mul	r27, r18
    17ba:	70 0d       	add	r23, r0
    17bc:	81 1d       	adc	r24, r1
    17be:	11 24       	eor	r1, r1
    17c0:	91 1d       	adc	r25, r1
    17c2:	08 95       	ret

000017c4 <_exit>:
    17c4:	f8 94       	cli

000017c6 <__stop_program>:
    17c6:	ff cf       	rjmp	.-2      	; 0x17c6 <__stop_program>
